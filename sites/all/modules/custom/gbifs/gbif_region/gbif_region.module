<?php

/**
 * Implementation of hook_menu().
 */
function gbif_region_menu() {
  $items['gbif/region'] = array(
    'title' => 'Regional Overview',
    'description' => 'Statistics according to regions',
    'page callback' => 'gbif_region',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
  );
  $items['gbif/region/%region'] = array(
    'title' => 'Regional Overview',
    'description' => 'Statistics according to regions',
    'page callback' => 'gbif_region_page_view',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['gbif/region/africa'] = array(
    'title' => 'Africa',
    'description' => 'Statistics according to regions',
    'page callback' => 'gbif_region_page_view',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  $items['gbif/region/asia'] = array(
    'title' => 'Asia',
    'description' => 'Statistics according to regions',
    'page callback' => 'gbif_region_page_view',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['gbif/region/europe'] = array(
    'title' => 'Europe',
    'description' => 'Statistics according to regions',
    'page callback' => 'gbif_region_page_view',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['gbif/region/namerica'] = array(
    'title' => 'North America',
    'description' => 'Statistics according to regions',
    'page callback' => 'gbif_region_page_view',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  $items['gbif/region/lamerica'] = array(
    'title' => 'Latin America',
    'description' => 'Statistics according to regions',
    'page callback' => 'gbif_region_page_view',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );
  $items['gbif/region/oceania'] = array(
    'title' => 'Oceania',
    'description' => 'Statistics according to regions',
    'page callback' => 'gbif_region_page_view',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );
  $items['gbif/region/json/%'] = array(
    'title' => 'GBIF Region JSON',
    'description' => 'Export overview information in JSON',
    'page callback' => 'gbif_region_page_json',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function region_to_arg($arg) {
  return $arg;
}

/*
 * Implementation of hook_library()
 */
function gbif_region_library() {
  $libraries['d3'] = array(
    'title' => 'd3 data visualisation',
    'website' => 'http://d3js.org',
    'version' => '2.9.1',
    'js' => array(
      'http://d3js.org/d3.v2.js' => array(
        'type' => 'external',
        'weight' => -20,
      ),
    ),  
  );
  $libraries['data_publishing'] = array(
    'title' => 'GBIF data publishing status',
    'website' => 'http://data.gbif.org',
    'version' => '0',
    'js' => array(
      drupal_get_path('module', 'gbif_region') . '/js/published.js' => array(
        'type' => 'file',
        'scope' => 'footer',
        'weight' => 20,
      ),
      drupal_get_path('module', 'gbif_region') . '/js/jquery.dataTables.min.js' => array(
        'type' => 'file',
        'scope' => 'footer',
        'weight' => 21,
      ),
      drupal_get_path('module', 'gbif_region') . '/js/dataGrid.js' => array(
        'type' => 'file',
        'scope' => 'footer',
        'weight' => 22,
      ),
    ),
    'css' => array(
      drupal_get_path('module', 'gbif_region') . '/css/published.css' => array(
        'type' => 'file',
        'media' => 'all',
      ),
      drupal_get_path('module', 'gbif_region') . '/css/dataGrid.css' => array(
        'type' => 'file',
        'media' => 'all',
      ),
    ),
  );
  return $libraries;
}

/*
 * Default overview page
 * Could be a global view but right now is just a placeholder.
 */
function gbif_region() {
  $page_content = '';
  $page_content .= '<div class="gallery" id="map">';
  $page_content .= '</div>';
  $page_content .= '<div class="gallery" id="chart">';
  $page_content .= '</div>';
  $page_content .= '<article>';
  $page_content .= '<p>';
  $page_content .= 'Please click a tab.';
  $page_content .= '</p>';
  $page_content .= '</article>';
  return $page_content;
}

/*
 * Process the main page content
 * @TODO use hook_page_build() instead
 */
function gbif_region_page_view($region = NULL) {
  
  // Prepare the data grid table
  $table = '';
  $table .= '<table cellpadding="0" cellspacing="0" border="0" class="display" id="dataGrid">';
  $table .= '<thead>';
  $table .= '<tr>';
  $table .= '<th>Node</th>';
  $table .= '<th>Membership</th>';
  $table .= '<th>Node</th>';
  $table .= '<th>Organisation</th>';
  $table .= '<th>Resource</th>';
  $table .= '<th>IPT</th>';
  $table .= '<th>Provider</th>';
  $table .= '<th>Dataset</th>';
  $table .= '<th>Occurrence</th>';
  $table .= '<th>Georeferenced</th>';
  $table .= '</tr>';
  $table .= '</thead>';
  $table .= '<tbody><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></tbody>';
  $table .= '</table>';
    
  // Export the list
  $page_content = '';
  $page_content .= '<div class="gallery" id="map">';
  $page_content .= '</div>';
  $page_content .= '<div class="gallery" id="chart">';
  $page_content .= '</div>';
  $page_content .= '<article>';
  
  $page_content .= $table;

  $page_content .= '</article>';

  // Currently unused structured JSON
  $filename = 'gbif_region/membership_' . $region . '.json';
  $destMembership = file_build_uri($filename);
  
  // Used by d3 chart
  $filenameOcc = 'gbif_region/occurrence_' . $region . '.json';
  $destOcc = file_build_uri($filenameOcc);
  
  // Used by DataTables
  $filenameOccTable = 'gbif_region/occurrenceTable_' . $region . '.json';
  $destOccTable = file_build_uri($filenameOccTable);
  
  $destURL = array();
  $destURL['forChart'] = file_create_url($destOcc);
  $destURL['forTable'] = file_create_url($destOccTable);

  drupal_add_library('gbif_region', 'd3', FALSE);
  drupal_add_library('gbif_region', 'data_publishing', FALSE);
  drupal_add_js(array('gbif_region' => $destURL), 'setting');

  return $page_content;
}


/**
 * Get participant list according to membership type
 */
function list_participants($type, $region_to_load, $IMS) {

  $records = array();

  $membershipType = array(
    'country' => 'Member_Country__lcn',
    'other' => 'Member_Other__lcn',
  );
  
  $ListNodes_find =& $IMS->newFindCommand('WWWA_Participant_bko');
  $ListNodes_find->addFindCriterion($membershipType[$type], '1');
  $ListNodes_find->addFindCriterion('WWWA_Participant_Region_GBIFarea::GBIFarea', $region_to_load);
  $ListNodes_find->addSortRule('Name_Short', 1, FILEMAKER_SORT_ASCEND);
  $result = $ListNodes_find->execute();

  // Handle error (if any)
  if (FileMaker::isError($result)) {
    echo "Error: " . $result->getMessage() . "\n"; 
  }

  $records['IMS'] = $result->getRecords();
  $participantProfile = array();

  foreach($records['IMS'] as $value) {
    $name_short = $value->getField('Name_Short');

    $participantProfile[$name_short] = array();
    $participantProfile[$name_short]['GBIFMembership'] = $value->getField('GBIFmembership');
    // $participantProfile[$name_short]['MOU2012'] = $value->getField('MOU2012');

    $key = $value->getField('__Country::ISO2');
    
    db_set_active('gbrds');
    $gbrdsResult = db_query("SELECT at.name as name, count(a.name) as count FROM {agent} a LEFT JOIN {country} c ON a.iso_country_code = LOWER(c.iso_country_code) LEFT JOIN agent_type at ON at.id = a.agent_type_id WHERE c.iso_country_code = :memberName AND a.agent_type_id in (1, 2, 3, 4) GROUP BY at.`name`", array(':memberName' => $key))->fetchAll();

    foreach ($gbrdsResult as $agentType) {
      $participantProfile[$name_short]['agents'][$agentType->name] = (int) $agentType->count;
    }

    db_set_active('portal');
    $portalResult = db_query("SELECT rollover_id, provider_count, dataset_count, occurrence_count, occurrence_georeferenced_count FROM {stats_country_contribution} WHERE iso_country_code = :ISO ORDER BY rollover_id DESC LIMIT 0,1", array(':ISO' => $key))->fetchAll();
    if (isset($portalResult[0])) $participantProfile[$name_short]['stats'] = (array) $portalResult[0];
    if (isset($portalResult[0]) == NULL) {
      $participantProfile[$name_short]['stats'] = array(
        'rollover_id' => 0,
        'provider_count' => 0,
        'dataset_count' => 0,
        'occurrence_count' => 0,
        'occurrence_georeferenced_count' => 0,
      );
    }
    foreach ($participantProfile[$name_short]['stats'] as $k => $v) { $participantProfile[$name_short]['stats'][$k] = (int) $v; }
  
  }

  db_set_active();

  $records['member'] = $participantProfile;
  unset($records['IMS']);
  return $records;
}

/**
 * Loads FileMaker API if it's not loaded already.
 *
 * @return
 *  TRUE if the FileMaker API is loaded, FALSE otherwise.
 */
function gbif_region_load_api() {

  if (!class_exists('FileMaker')) {

    // Try using libraries module.
    if (module_exists('libraries')) {

      $libraries_path= drupal_get_path('module', 'libraries');
      $libraries_include = $libraries_path . '/' . 'libraries.module';

      include_once($libraries_include);

      // Let's see if the FileMaker API is really available from libraries.
      $filemaker_api = './' . libraries_get_path('filemakerapi') . '/FileMaker.php';
      if (file_exists($filemaker_api)) {
        include_once $filemaker_api;
      }
    }
  }

  if (!class_exists('FileMaker')) {
    drupal_set_message(t('Can not find FileMaker API. Please place the FileMaker API at sites/all/libraries/filemakerapi/FileMaker. See README.txt for details.'), 'error');
  }
  
  // Tell the caller if the FileMaker class exists.
  return class_exists('FileMaker');
}

/**
 * Implementation of hook_cron()
 */
function gbif_region_cron() {
  gbif_region_stats_update();
/*
  $interval = variable_get('gbif_region_interval', 60 * 60 * 24);
  if (time() >= variable_get('gbif_region_next_update', 0)) {

  
    watchdog('gbif_region', 'GBIF Regional stats updated.');
    variable_set('gbif_region_next_update', time() + $interval);
  }
*/
}

/*
 * GBIF Region Statistics Update
 * Run through all queries and save results as JSON files.
 */
function gbif_region_stats_update() {
  $regions = array(
    'africa' => 'Africa',
    'asia' => 'Asia',
    'europe' => 'Europe',
    'namerica' => 'North America',
    'oceania' => 'Oceania',
    'lamerica' => 'Latin America',
  );
  
  // Iterate through all regions
  foreach($regions as $regionAcronym => $region) {
    
    // Load FileMaker api
    gbif_region_load_api();
    
    // Load credentials
    $IMSCredential = variable_get('ims_connection');

    $IMS = new FileMaker();
    $IMS->setProperty('database', $IMSCredential['database']);
    $IMS->setProperty('hostspec', $IMSCredential['hostname']);
    $IMS->setProperty('username', $IMSCredential['username']);
    $IMS->setProperty('password', $IMSCredential['password']);
    $membershipTypes = array(
      'country' => 'Country',
      'other' => 'Other Associate Participants',
    );
    $memberships = array();
    foreach ($membershipTypes as $membershipType => $membershipTitle) {
      
      // It's really strange that FileMaker API doesn't allow me
      // to include credentials inside list_participants()
      $participants = list_participants($membershipType, $region, $IMS);
      foreach ($participants['member'] as $member => $agent) {
        if (isset($agent['agents'])) $agents = $agent['agents'];
        foreach ($agents as $agent_type => $count) {
        }
      }
      $memberships[$membershipType] = $participants['member'];
    }
    $occurrenceCount = array();
    foreach($memberships as $node) {
      foreach($node as $nodeName => $statsType) {
        $toPush = array();
        $toPush['nodeTitle'] = $nodeName;

        $membershipAcronym = '';
        switch ($statsType['GBIFMembership']) {
          case 'Voting Participant':
            $membershipAcronym = 'VP';
            break;
          case 'Associate Country Participant';
            $membershipAcronym = 'ACP';
            break;
          case 'Other Associate Participant';
            $membershipAcronym = 'OAP';
            break;
        }

        $toPush['GBIFMembership'] = $membershipAcronym;
        $toPush['nodeCount'] = (isset($statsType['agents']['Node'])) ? $statsType['agents']['Node'] : 0;
        $toPush['orgCount'] = (isset($statsType['agents']['Organisation'])) ? $statsType['agents']['Organisation'] : 0;
        $toPush['resourceCount'] = (isset($statsType['agents']['Resource'])) ? $statsType['agents']['Resource'] : 0;
        $toPush['IPTCount'] = (isset($statsType['agents']['IPT'])) ? $statsType['agents']['IPT'] : 0;
        $toPush['providerCount'] = $statsType['stats']['provider_count'];
        $toPush['datasetCount'] = $statsType['stats']['dataset_count'];
        $toPush['occurrenceCount'] = $statsType['stats']['occurrence_count'];
        $toPush['occurrenceGeoCount'] = $statsType['stats']['occurrence_georeferenced_count'];
        array_push($occurrenceCount, $toPush);
      }
    }
    $membershipsJSON = json_encode($memberships);
    $occurrenceCountJSON = json_encode($occurrenceCount);
    $occurrenceTable = array();
    $occurrenceTable['aaData'] = $occurrenceCount;
    $occurrenceTableJSON = json_encode($occurrenceTable);

    $filename = 'gbif_region/membership_' . $regionAcronym . '.json';
    $dest = file_build_uri($filename);
    file_save_data($membershipsJSON, $dest, FILE_EXISTS_REPLACE);

    $filenameOcc = 'gbif_region/occurrence_' . $regionAcronym . '.json';
    $destOcc = file_build_uri($filenameOcc);
    file_save_data($occurrenceCountJSON, $destOcc, FILE_EXISTS_REPLACE);

    $filenameOccTable = 'gbif_region/occurrenceTable_' . $regionAcronym . '.json';
    $destOccTable = file_build_uri($filenameOccTable);
    file_save_data($occurrenceTableJSON, $destOccTable, FILE_EXISTS_REPLACE);
  }
}