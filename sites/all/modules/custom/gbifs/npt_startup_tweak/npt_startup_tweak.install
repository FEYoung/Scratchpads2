<?php
/**
 * @file
 * Installation of npt_startup.
 *
 */

function npt_startup_tweak_install() {
  // Set the default theme to "gbifwhite2012".
  variable_set('theme_default', 'gbifwhite2012');

  // Disable default theme and the Scratchpads theme.
  theme_disable(array(
    'bartik',
    'scratchpads'
  ));

  // Enable NPT default theme.
  theme_enable(array(
    'gbifwhite2012'
  ));

  // Default site name and slogan. To be replaced by values from setup form
  variable_set('site_name', 'NPT Startup');
  variable_set('site_slogan', 'Participating in Development');
  
  // Enable relevant modules
  module_enable(array(
    'npt_blocks',
    'npt_news',
    'npt_setup',
    'npt_mollom',
    'npt_solr',
  ), TRUE);
  
  variable_set('creative_commons_block_display_type', '80x15.png');

  // Set the comment form defaults.
  foreach (node_type_get_names() as $type => $name) {
    if ($type != 'forum') {
      variable_set('comment_form_location_' . $type, COMMENT_FORM_SEPARATE_PAGE);
    }
  }
  
  npt_startup_vocabularies();

  // Insert default pre-defined node types
  $types = array(
    array(
      'type' => 'article',
      'name' => st('Article'),
      'base' => 'node_content',
      'description' => st('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );
  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    scratchpads_tweaks_add_body_field($type);
  }
  
  // Insert default pages
  npt_startup_default_page();  

  menu_rebuild();
}

function npt_startup_vocabularies() {
  // Insert default pre-defined vocabularies
  $vocabularies = array(
    'article_type' => array(
      'name' => 'Article Type',
      'machine_name' => 'article_type',
      'description' => 'Term to categorise articles',
      'hierarchy' => '0',
      'module' => 'taxonomy',
      'weight' => '0',
      'rdf_mapping' => array(
        'rdftype' => array(
          0 => 'skos:ConceptScheme',
        ),
        'name' => array(
          'predicates' => array(
            0 => 'dc:title',
          ),
        ),
        'description' => array(
          'predicates' => array(
            0 => 'rdfs:comment',
          ),
        ),
      ),
    ),
    'species_list' => array(
      'name' => 'Species',
      'machine_name' => 'species_list',
      'description' => 'A default site-wide biological classification',
      'hierarchy' => '0',
      'module' => 'taxonomy',
      'weight' => '0',
      'rdf_mapping' => array(
        'rdftype' => array(
          0 => 'skos:ConceptScheme',
        ),
        'name' => array(
          'predicates' => array(
            0 => 'dc:title',
          ),
        ),
        'description' => array(
          'predicates' => array(
            0 => 'rdfs:comment',
          ),
        ),
      ),
    ),
    'tags' => array(
      'name' => 'Tags',
      'machine_name' => 'tags',
      'description' => 'A pre-defined vocabulary for free tagging.',
      'hierarchy' => '0',
      'module' => 'taxonomy',
      'weight' => '0',
      'rdf_mapping' => array(
        'rdftype' => array(
          0 => 'skos:ConceptScheme',
        ),
        'name' => array(
          'predicates' => array(
            0 => 'dc:title',
          ),
        ),
        'description' => array(
          'predicates' => array(
            0 => 'rdfs:comment',
          ),
        ),
      ),
    ),
  );
  foreach ($vocabularies as $vocabulary) {
    $vocabulary = (object)$vocabulary;
    taxonomy_vocabulary_save($vocabulary);
  }
  // Insert default terms for article_type
  $terms = array(
    array(
      'name' => 'news'
    ),
    array(
      'name' => 'blog'
    ),
    array(
      'name' => 'log'
    )
  );
  $vocabulary = taxonomy_vocabulary_machine_name_load('article_type');
  foreach ($terms as $term) {
    $term = (object)$term;
    $term->vid = $vocabulary->vid;
    taxonomy_term_save($term);
  }

  // Insert default biological classification
  $default_biological_vocabulary = taxonomy_vocabulary_machine_name_load('species_list');
  $default_biological_vocabulary->biological_classification = 1;
  itis_term_taxonomy_vocabulary_biological_classification($default_biological_vocabulary, '1');
}


/**
 * Default how to publish data to GBIF page
 */
function npt_startup_default_page() {
  $path = drupal_get_path('module', 'npt_startup_tweak');
  $initial_contents_path = $path . '/initial_contents';
  
  $bodytext = '';
  $bodytext_file = $initial_contents_path . '/how_to_publish_data_through_gbif_en.txt';
  $bodytext = file_get_contents($bodytext_file);
  
  $text_summary = '';
  $text_summary_file = $initial_contents_path . '/how_to_publish_data_through_gbif_sum_en.txt';
  $text_summary = file_get_contents($text_summary_file);
  
  $node = new stdClass();
  $node->type = 'page';
  node_object_prepare($node);
  $node->title = t('How to publish data through the GBIF network');
  $node->language = 'en';
  $node->body[$node->language][0]['value'] = $bodytext;
  $node->body[$node->language][0]['summary'] = text_summary($text_summary);
  $node->body[$node->language][0]['format'] = 'filtered_html';
  $node->status = 1;
  $node->comment = 1;
  $node->promote = 0;
  $node->revision = 0;
  $node->changed = $_SERVER['REQUEST_TIME'];
  $node->created = $_SERVER['REQUEST_TIME'];
  node_submit($node);
  node_save($node);
  
  // Use this node as the front page
  variable_set('howto_publish_page', 'node/' . $node->nid);
}
