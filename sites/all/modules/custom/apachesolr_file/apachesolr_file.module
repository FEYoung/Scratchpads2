<?php

// $Id$
/**
 * @file
 * Indexer for the userhook_apachesolr_entity_info_alter entities for the Apachesolr module.
 */
function apachesolr_file_apachesolr_entity_info_alter(&$entity_info){
  dpm($entity_info);
  /*$entity_info['taxonomy_term']['indexable'] = TRUE;
  $entity_info['taxonomy_term']['status callback'] = 'apachesolr_file_status_callback';
  $entity_info['taxonomy_term']['document callback'][] = 'apachesolr_file_solr_document';
  $entity_info['taxonomy_term']['reindex callback'] = 'apachesolr_file_solr_reindex';*/
  //$entity_info['taxonomy_term']['index_table'] = 'apachesolr_index_entities_file';
}

/**
 * Builds the user-specific information for a Solr document.
 *
 * @param ApacheSolrDocument $document
 * The Solr document we are building up.
 * @param stdClass $entity
 * The entity we are indexing.
 * @param string $entity_type
 * The type of entity we're dealing with.
 */
function apachesolr_file_solr_document(ApacheSolrDocument $document, $term, $entity_type){
  $document->tid = $term->tid;
  // Title is a required field.
  $document->label = apachesolr_clean_text(format_username($term));
  //$term_tree = apachesolr_file_solr_taxonomy_ancestors($term);
  //foreach ($term_tree as $tt => $td) {
  //$document->addField($td['key'], apachesolr_clean_text($td['value']));
  //}
  // Note the conspicuous lack of password hash. :-)
  $build = taxonomy_term_view($term, 'search_index');
  // Why do we need this?
  unset($build['#theme']);
  $text = drupal_render($build);
  $document->content = apachesolr_clean_text($text);
  //  Generic usecase for future reference. Callbacks can
  //  allow you to send back multiple documents
  $documents = array();
  $documents[] = $document;
  return $documents;
}

/**
 * Status callback for ApacheSolr, for terms.
 */
function apachesolr_file_status_callback($term, $type){
  return TRUE;
}