<?php
/**
 * @file
 * Code for the Pensoft publication feature.
 */
include_once ('pensoft_publication.features.inc');

/**
 * Implement hook_process_relation_select_field
 * 
 * Call appropriate function for each field type
 */
function pensoft_publication_process_relation_select_field(&$variables){
  if($variables['entity_type'] == 'publication' && $variables['bundle'] == 'pensoft'){
    // Pass the processing to individual field processors
    $func = 'pensoft_publication_process_' . $variables['field_name'];
    if(function_exists($func)){
      $func($variables);
    }
  }
}

/*
function pensoft_publication_process_field_publication_authors(&$variables){
  $variables['items'] = array();
  $variables['list_type'] = 'ol';
  $conjunction = '';
  $count = 1;
  foreach($variables['related_entities'] as $related_entity){
    $variables['prefix'] .= $conjunction;
    $variables['prefix'] .= $related_entity->field_user_family_name[LANGUAGE_NONE][0]['safe_value'];
    $variables['prefix'] .= ' ';
    $variables['prefix'] .= $related_entity->field_user_given_names[LANGUAGE_NONE][0]['safe_value'];
    if($related_entity->field_user_institution){
      $variables['prefix'] .= '<sup>' . $count . '</sup>';
      $variables['items'][] = $related_entity->field_user_institution[LANGUAGE_NONE][0]['safe_value'];
      $count++;
    }
    $conjunction = ', ';
  }
}

function pensoft_publication_process_field_publication_treatments(&$variables){
  $variables['items'] = array();
  $variables['list_type'] = 'ul';
  $relation = $variables['relation'];
  $spm_entity = reset($variables['related_entities']);
  $alternative_name = field_view_field('relation', $relation, 'field_publication_treatment_name');
  if(count($alternative_name)){
    $alternative_name['#label_display'] = 'hidden';
    $title = drupal_render($alternative_name);
  } else {
    $title = $spm_entity->title;
  }
  $variables['prefix'] = '<div class="field-label">' . $title . '</div>';
  // Get the field settings
  $data = unserialize($variables['entity']->data);
  // Field settings are key by relation RID
  // TODO - Edit relation fields
  if(isset($data[$variables['relation']->rid])){
    $field_settings = reset($data[$variables['relation']->rid]);
    foreach($field_settings as $group_field_settings){
      foreach(array_keys(array_filter($group_field_settings)) as $field_name){
        $field = field_view_field('node', $spm_entity, $field_name);
        $variables['items'][] = drupal_render($field);
      }
    }
  }
  $relation_page = relation_page($relation);
  $variables['suffix'] = drupal_render($relation_page);
}

function pensoft_publication_field_publication_treatments_after_build($element){
  $element['#prefix'] = '<label id="taxon-treatment">Taxon treatments</label>';
  foreach(element_children($element[LANGUAGE_NONE]) as $field_id){
    if(isset($element[LANGUAGE_NONE][$field_id]['#default_value'])){
      unset($element[LANGUAGE_NONE][$field_id]['exposed_filters']);
      unset($element[LANGUAGE_NONE][$field_id]['#title']);
    }else{
      unset($element[LANGUAGE_NONE][$field_id]);
    }
  }
  return $element;
}*/

     
/**
 * Implement hook_form_publication_edit_form_alter
 * 
 * - Add the spm fields for each treatment ;
 * - Enable the horizontal tabbed intereface for treatments ;
 * - Add hidden fields for the automatic addition of references/figures that have
 *   been inserted using the insert_from_view module ;
 * 
 */
function pensoft_publication_form_publication_edit_form_alter(&$form, &$form_state, $form_id) {
  // Attach resources
  $form['#attached']['css'][] = drupal_get_path('module', 'pensoft_publication') . '/css/pensoft.css';
  $form['#attached']['css'][] = drupal_get_path('module', 'pensoft_publication') . '/css/pensoft_tabs.css';
  $form['#attached']['js'][] = drupal_get_path('module', 'pensoft_publication') . '/js/pensoft_tabs.js';
  $form['#attached']['js'][] = drupal_get_path('module', 'pensoft_publication') . '/js/pensoft.js';
  
  // Setup all the vertical tabs that use relation select to use additional horizontal tabs
  //_pensoft_publication_relation_tab_prepare_form($form, 'field_publication_authors');
  //_pensoft_publication_relation_tab_prepare_form($form, 'field_publication_contributors');
  //_pensoft_publication_relation_tab_prepare_form($form, 'field_publication_treatments');
  
  // Load the field selector for the treatments
  foreach (element_children($form['field_publication_treatments']['und']) as $key) {
    $treatment_form = $form['field_publication_treatments']['und'][$key];
    $values = $form_state['values']['field_publication_treatments']['und'][$key];
    if (empty($treatment_form['#entity_type'])) {
      continue;
    }
    if (isset($values['endpoints'][0])) {
      list($type, $nid) = explode(':', $values['endpoints'][0]);
      $node = node_load($nid);
      $selected_fields = array();
      foreach ($values['treatment_entity_fields_group-' . $key] as $group => $fields) {
        if (!is_array($fields)) {
          continue;
        }
        foreach ($fields as $field_name => $field_value) {
          if ($field_value) {
            $selected_fields[] = $field_name;
          }
        }
      }
    } else {
      $relation = $treatment_form['relation_fields']['#entity'];
      if (isset($relation->endpoints['und'][1]['entity_id'])) {
        $node = node_load($relation->endpoints['und'][1]['entity_id']);
      } else {
        $node = NULL;
      }
      $selected_fields = explode(',', $relation->field_publication_treat_fields['und'][0]['value']);
    }
  
    $treatment_field_form = _pensoft_publication_treatment_spm_fields_form($form, $selected_fields, $node, $key);
    hide($treatment_form['relation_fields']['field_publication_treat_fields']);
    $form['field_publication_treatments']['und'][$key] = array_merge($treatment_form, $treatment_field_form);
  }
  
  // Handle automatic adding of references  
  $entity = $form['#entity'];
  $references_map = array();
  foreach ($entity->field_publication_references['und'] as $ref_key => $ref) {
    if (!empty($ref['nid'])) {
      $references_map[$ref['nid']] = true;
    }
  }

  $form['pensoft_add_multiple_references'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($form_state['values']['pensoft_add_multiple_references']) ? $form_state['values']['pensoft_add_multiple_references'] : '',
    '#prefix' => '<div class="pensoft_add_multiple_references">',
    '#suffix' => '</div>',
  );
  
  // Handle automatic adding of figures
  $entity = $form['#entity'];
  $figures_map = array();
  $figure_key = 0;
  foreach ($entity->field_publication_figures['und'] as $fig_key => $figure) {
    if (!empty($figure['fid'])) {
      $form['field_publication_figures']['und'][$fig_key]['#title'] = 'Fig. ' . ($fig_key+1);
      $figures_map[$figure['fid']] = $fig_key;
      if ($fig_key >= $figure_key) {
        $figure_key = $fig_key+1;
      }
    }
  }

  $form['pensoft_add_multiple_figures'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($form_state['values']['pensoft_add_multiple_figures']) ? $form_state['values']['pensoft_add_multiple_figures'] : '',
    '#prefix' => '<div class="pensoft_add_multiple_figures">',
    '#suffix' => '</div>',
  );

  // Handle automatic adding of tables
  $entity = $form['#entity'];
  $tables_map = array();
  $table_key = 0;
  foreach (element_children($form['field_publication_tables']['und']) as $elem_key) {
    $form['field_publication_tables']['und'][$elem_key]['#title'] = 'Table. ' . ($elem_key+1);
    if ($elem_key >= $table_key) {
      $table_key = $elem_key+1;
    }
  }
  
  // JS settings
  $form['#attached']['js'][] = array(
    'data' => array('pensoft' => array(
      'figures_map' => $figures_map,
      'figure_key' => $figure_key,
      'references_map' => $references_map,
      'table_key' => $table_key,
    )),
    'type' => 'setting'
  );  
  
  _pensoft_publication_relation_tab_prepare_form($form, 'field_publication_treatments');
  
  // Add our own submit function, ensuring it runs first  
  array_unshift($form['actions']['submit']['#submit'], 'pensoft_publication_publication_edit_form_submit');
}

/**
 * Helper function for hook_form_publication_edit_form_alter - prepare a vertical tab
 * containing a relation select element so it can be used with the horizontal tab javascript
 */
function _pensoft_publication_relation_tab_prepare_form(&$form, $tab) {
  $wrapper = preg_replace('/_/', '-', str_replace('field_', '', $tab)) . '-container';
 
  $form[$tab]['#prefix'] = "<div id='$wrapper' class='publication-relation-select-container'>";
  $form[$tab]['#suffix'] = '</div>';
  $form[$tab]['reload-'.$tab] = array(
    '#type' => 'button',
    '#value' => 'refreshForm-'.$tab,
    '#prefix' => '<div class="reload-button" style="display:none;">',
    '#suffix' => '</div>',
    '#ajax' => array(
      'callback' => 'pensoft_publication_entity_field_group_callback',
      'wrapper' => $wrapper,
      'event' => 'refreshForm',
      '#tab' => $tab,
    ),
  );
}

/**
 * Helper function for hook_form_publication_edit_form_alter - Generate a form array 
 * displaying checkboxes to select the fields from an SPM node entity.
 *
 */
function _pensoft_publication_treatment_spm_fields_form($form, $selected_fields, $entity = NULL, $key = 0) {
  $form = array();

  $field_groups = field_group_info_groups('node', 'spm', 'form', true);
  $field_instances = field_info_instances('node', 'spm');

  $all_empty = TRUE;
  foreach ($field_groups as $field_group_name => $field_group) {
    if (empty($field_group->children)) {
      continue;
    }

    $child_form = array();
    $has_child = FALSE;
    foreach ($field_group->children as $field_name) {
      if (empty($field_instances[$field_name])) {
        continue;
      }
      if ($field_instances[$field_name]['widget']['type'] == 'relation_select') {
        continue;
      }
      $value = '';
      if($entity && count($entity->{$field_name})){
        $elements = field_view_value('node', $entity, $field_name, $entity->{$field_name}[LANGUAGE_NONE][0]);
        $value = drupal_render($elements);
      }
      $child_form[$field_name] = array(
        '#type' => 'checkbox',
        '#title' => $field_instances[$field_name]['label'],
        '#suffix' => $value,
        '#tree' => TRUE,
        '#default_value' => in_array($field_name, $selected_fields) ? 1 : 0,
      );
      if (empty($value)) {
        $child_form[$field_name]['#prefix'] = '<div style="display:none;">';
        $child_form[$field_name]['#suffix'] = '</div>';
      } else {
        $has_child = TRUE;
        $all_empty = FALSE;
      }
    }
    
    $form[$field_group_name] = array_merge(array(
      '#type' => 'fieldset',
      '#title' => preg_replace('/[^a-zA-Z0-9]/', ' ', $field_group_name),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
    ), $child_form);
    
    if (!$has_child) {
      $form[$field_group_name]['#prefix'] = '<div style="display:none;">';
      $form[$field_group_name]['#suffix'] = '</div>';      
    }
  }

  $group_id = 'treatment_entity_field_group-' . $key;
  $group = array(
    $group_id => array_merge(array(
      '#type' => 'vertical_tabs',
      '#weight' => 25,
      '#prefix' => "<div class=\"field-publication-treatments-entity-fields\" id=\"field-publication-treatments-entity-fields-$key\"><label>" . t('Select the fields you wish to include in this treatment') . '</label>',
      '#suffix' => '</div>',
    ), $form)
  );
  if ($all_empty) {
    $group[$group_id]['#prefix'] = "<div style=\"display: none;\" class=\"field-publication-treatments-entity-fields\" id=\"field-publication-treatments-entity-fields-$key\">";
  }

  return $group;
}

/**
 * Ajax callback function when refreshing the publication treatments part of the form
 *
 */
function pensoft_publication_entity_field_group_callback(&$form, &$form_state) {
  //pensoft_publication_form_publication_edit_form_alter($form, $form_state, 'publication_edit_form');
  return $form[$form_state['triggering_element']['#ajax']['#tab']];
}

/**
 * Own handler for the Pensoft publication edit form submit
 * - Copy the selected SPM fields into the relation field (which is just a textbox)
 * 
 */
function pensoft_publication_publication_edit_form_submit($form, &$form_state) {
  foreach (element_children($form['field_publication_treatments']['und']) as $key) {
    $treatment_form = $form['field_publication_treatments']['und'][$key];
    if (empty($treatment_form['#entity_type'])) {
      continue;
    }
    $values =& $form_state['values']['field_publication_treatments']['und'][$key];
    if (empty($values['endpoints'][0])) {
      continue;
    }
    
    $fields_to_include = array();
    foreach ($values['treatment_entity_field_group-' . $key] as $group => $fields) {
      if (!is_array($fields)) {
        continue;
      }
      foreach ($fields as $name => $tick) {
        if ($tick) {
          $fields_to_include[] = $name;
        }
      }
    }
    $values['relation_fields']['field_publication_treat_fields']['und'][0]['value'] = implode(',', $fields_to_include);
  }  
}

/**
 * Implement hook_entity_presave
 * - Add the references and figures that were inserted via insert_from_view
 *
 */
function pensoft_publication_entity_presave($entity, $type) {
  if ($type != 'publication' || $entity->type != 'pensoft') {
    return;
  }

  // Add references
  if (!empty($entity->pensoft_add_multiple_references)) {
    $references_to_add = explode(',', $entity->pensoft_add_multiple_references);

    $existing_references = array();
    foreach ($entity->field_publication_references['und'] as $key => $value) {
      $existing_references[] = $value['nid'];
    }
    $references_to_add = array_unique(array_diff($references_to_add, $existing_references));

    foreach ($references_to_add as $nid) {
      if (!empty($nid)) {
        $entity->field_publication_references['und'][] = array('nid' => $nid);
      }
    }
  }

  // Add figures
  if (!empty($entity->pensoft_add_multiple_figures)) {
    $figures_to_add = explode(',', $entity->pensoft_add_multiple_figures);

    $existing_figures = array();
    foreach ($entity->field_publication_figures['und'] as $key => $value) {
      $existing_figures[] = $value['fid'];
    }
    $figures_to_add = array_unique(array_diff($figures_to_add, $existing_figures));

    foreach ($figures_to_add as $fid) {
      if (!empty($fid)) {
        $entity->field_publication_figures['und'][] = array('fid' => $fid);
      }
    }
  }
}

/**
 * Implement hook_form_publication_type_form_alter to add our own settings
 * (pensoft API URL)
 * 
 */
function pensoft_publication_form_publication_type_form_alter(&$form, &$form_state, $form_id){
  $form['pensoft_submit_url'] = array(
    '#type' => 'textfield',
    '#title' => 'Pensoft API URL',
    '#required' => TRUE,
    '#default_value' => variable_get('pensoft_submit_url', 'http://test.pwt.pensoft.eu/api.php'),
    '#weight' => 10
  );
  $form['#submit'][] = 'pensoft_publication_type_form_submit';
  $form['#validate'][] = 'pensoft_publication_type_form_validate';
}

/**
 * Own validation for the Pensoft publication type form settings submit
 */
function pensoft_publication_type_form_validate($form, &$form_state) {
  if (!valid_url($form_state['values']['pensoft_submit_url'])) {
    form_set_error('pensoft_submit_url', t('You must enter a valid URL'));
  }
}

/**
 * Own handler for the Pensoft publication type form settings submit
 */
function pensoft_publication_type_form_submit($form, &$form_state) {
  variable_set('pensoft_submit_url', $form_state['values']['pensoft_submit_url']);  
}

/**
 * Form for publishing a publication
 */
function pensoft_publication_publish_form($form, &$form_state, $publication) {
  $form = array();
  
  $form['pensoft_publication'] = array(
    '#type' => 'value',
    '#value' => $publication
  );

  $form['pensoft_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Pensoft username'),
    '#default_value' => 'a.heaton@nhm.ac.uk',
    '#required' => TRUE
  );

  $form['pensoft_password'] = array(
    '#type' => 'password',
    '#title' => t('Pensoft password'),
    '#default_value' => '',
    '#required' => TRUE
  );
  
  $form['pensoft_return_xml'] = array(
    '#type' => 'radios',
    '#title' => 'Data handling',
    '#default_value' => 1,
    '#options' => array(1 => t('Return XML file'), 2 => t('Post XML file to Pensoft'), 3 => t('Just valiate the process')),
  );
  
  $form['pensoft_publish'] = array(
    '#type' => 'submit',
    '#value' => 'Publish'
  );
  
  return $form;
}

/**
 * Validate form submit handler
 */
function pensoft_publication_publish_form_validate($form, &$form_state) {
  $publication = $form_state['values']['pensoft_publication'];
  
  if ($publication->published) {
    form_set_error('pensoft_publication', t('This publication has already been published'));
  }
}

/**
 * Publish page form submit handler
 */
function pensoft_publication_publish_form_submit($form, &$form_state) {
  module_load_include('xml.inc', 'pensoft_publication');

  $publication = $form_state['values']['pensoft_publication'];
  $xml = _pensoft_publication_build_xml($publication);
  $mode = $form_state['values']['pensoft_return_xml'];
  
  if ($mode == 3) {
    drupal_set_message('XML contains ' . strlen($xml) . " bytes", 'status');    
    return;
  } else if ($mode == 1) {
    header('Content-type: application/xml');
    echo $xml;
    exit();    
  } else if (empty($xml)) {
    drupal_set_message('Could not process XML as required', 'error');
    return;
  }

  $url = variable_get('pensoft_submit_url', 'http://test.pwt.pensoft.eu/api.php');
  
  $data = array(
    'username' => $form_state['values']['pensoft_username'],
    'password' => $form_state['values']['pensoft_password'],
    'action' => 'process_document',
    'xml' => $xml
  );

  /**
   * This was just used so I can see the headers being sent, etc.
  
  echo '<html><head></head><body>';
  echo "<form action='$url' method='POST'>";
  echo "<input type='text' name='username' value='" . $form_state['values']['pensoft_username'] . "'/>";
  echo "<input type='text' name='password' value='" . $form_state['values']['pensoft_password'] . "'/>";
  echo "<input type='text' name='action' value = 'process_document' />";
  echo "<textarea name='xml'>" . $xml . '</textarea>';
  echo '<input type="submit" value="submit" />';
  echo '</body></html>';
  exit();
*/  
  
  
  $options = array(
    'http' => array(
      'method' => 'POST',
      'content' => http_build_query($data),
      'header' => 'Content-Type: application/x-www-form-urlencoded'
    )
  );
  
  $context = stream_context_create($options);
  $result = file_get_contents($url, false, $context);
  header('Content-type: application/xml');
  echo $result;
  exit();
  
  /*
  $xml_result = new SimpleXMLElement($result);
  if ($xml_result->result->returnCode == 0) {
    $publisher_data = array(
      'document_id' => $xml_result->result->document_id,
      'document_link' => $xml_result->result->document_link
    );
    $publication->published = 1;
    $publication->publisher_data = serialize($publisher_data);
    publication_save($publication);
    
    drupal_set_message('notice', 'The document was succesfully published');
    drupal_goto($_GET['q']);
  } else {
    drupal_set_message('error', 'The publication failed :' . $xml_result->result->errorMsg);
  }
  */
}