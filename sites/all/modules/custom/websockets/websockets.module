<?php

// We define a variable for the websockets port, as it needs to be the same on
// all sites in a multisite setup, but can be changed if required (You may
// already have services listening on the default port 8080).
DEFINE('WEBSOCKETS_PORT', 8080);

/**
 * @file
 * 
 */
/**
 * Implementation of hook_init().
 */
function websockets_init(){
  // Ensure the WebSockets server is running.  There may be a more efficient
  // way of checking for the presence of the server than this.
  // As multisite installs can have different "tmp" folders, and will almost
  // certainly have different files folders, the best place to keep the PID
  // file is in the same folder as the module.  We will fall back to using the
  // "/tmp" folder if we're unable to write to this location
  $pid = file_get_contents(dirname(__FILE__) . '/websockets.pid');
  if(!$pid){
    $pid = file_get_contents('/tmp/websockets.pid');
  }
  if($pid){
    if(check_process($pid)){
      // Process is running.
      return;
    }else{
      // Process is no longer running.  Lets add a warning that we probably
      // crashed.
      watchdog('websockets', 'WebSockets server (%pid) has crashed. Restarting.', array(
        '%pid' => $pid
      ));
    }
  }
  // Process isn't running, lets create the process, and make a note of its PID
  $pid = shell_exec("nohup $command > /dev/null & echo $!");
}

/**
 * Implementation of hook_menu().
 */
function websockets_menu(){
  return array(
    'websockets-test' => array(
      '#title' => 'WebSockets test',
      '#'
    )
  );
}

/**
 * Check if process exists on Linux type OS
 * 
 * http://www.blrf.net/howto/25_PHP__How_to_check_if_PID_exists_on_Linux_.html
 *
 * @param int $pid Process ID
 * @param string $name Process name, null for no process name matching
 * @return bool
 */
function check_process($pid, $name = null){
  // form the filename to search for
  $file = '/proc/' . (int)$pid . '/cmdline';
  $fp = false;
  if(file_exists($file))
    $fp = @fopen($file, 'r');
     // if file does not exist or cannot be opened, return false
  if(!$fp)
    return false;
  $buf = fgets($fp);
  // if we failed to read from file, return false
  if($buf === false){return false;}
  if($name !== null){
    // this code will also check if name matches
    $cmd = basename($buf);
    if(preg_match('/' . $name . '.*/', $cmd)){
      fclose($fp);
      return true;
    }else{
      // process was found, but name did not match
      fclose($fp);
      return false;
    }
  }else{
    // process found, name is null, return true
    fclose($fp);
    return true;
  }
}