<?php

/**
 * @file
 * 
 */
/**
 * Implementation of hook_init().
 */
function websockets_init(){
  // Ensure the WebSockets server is running.  There may be a more efficient
  // way of checking for the presence of the server than this.
  // As multisite installs can have different "tmp" folders, and will almost
  // certainly have different files folders, the best place to keep the PID
  // file is in the same folder as the module.  We will fall back to using the
  // DRUPAL_ROOT or "/tmp" folders if we're unable to write to this location
  $path = drupal_get_path('module', 'websockets');
  @$pid = file_get_contents("$path/websockets.pid");
  if(!$pid){
    @$pid = file_get_contents(DRUPAL_ROOT . '/websockets.pid');
  }
  if(!$pid){
    @$pid = file_get_contents('/tmp/websockets.pid');
  }
  if($pid){
    if(check_process($pid)){
      // Process is running.
      return;
    }else{
      // Process is no longer running.  Lets add a warning that we probably
      // crashed.
      watchdog('websockets', 'WebSockets server (%pid) has crashed. Restarting.', array(
        '%pid' => trim($pid)
      ), WATCHDOG_ERROR);
    }
  }
  // Process isn't running, lets create the process, and make a note of its PID
  $pid = trim(shell_exec("nohup php -q $path/websockets.server.php > /dev/null & echo $!"));
  if($pid){
    // Write the PID to the file
    if(!@file_put_contents("$path/websockets.pid", $pid)){
      if(!@file_put_contents(DRUPAL_ROOT . "/websockets.pid", $pid)){
        if(!@file_put_contents("/tmp/websockets.pid", $pid)){
          // Failed to write the PID.  This will result in us attempting to create
          // a new server on every page request - NOT GOOD.
          watchdog('websockets', 'Unable to record the PID of the WebSockets server', array(), WATCHDOG_ERROR);
        }
      }
    }
  }else{
    // Failed to start the server.
    watchdog('websockets', 'Default WebSockets server failed to start', array(), WATCHDOG_ERROR);
  }
}

/**
 * Implementation of hook_menu().
 */
function websockets_menu(){
  return array(
    'websockets-test' => array(
      'title' => 'WebSockets test',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'websockets_test_callback'
      ),
      'access arguments' => array(
        'access content'
      )
    )
  );
}

/**
 * Callback for the test page
 */
function websockets_test_callback(){
  $script = <<<ENDOFSCRIPT
(function($){
	$(document).ready(function(){
    try{
  		socket = $.gracefulWebSocket("ws://monkey.nhm.ac.uk:8080/");
      console.log('WebSocket - status '+socket.readyState);
      socket.onopen    = function(msg){ console.log("Welcome - status "+this.readyState); };
      socket.onmessage = function(msg){ alert(msg.data); console.log("Received: "+msg.data); };
      socket.onclose   = function(msg){ console.log("Disconnected - status "+this.readyState); };      
    }
    catch(ex){ console.log("First error");console.log(ex); }
    $("msg").focus();
    
    $(".form-submit").click(function(){
      try{
      	socket.send($('#websockets-test').val());
			} catch(ex){ console.log("Second error");console.log(ex); }
    });
  });
})(jQuery);
ENDOFSCRIPT;
  drupal_add_js($script, 'inline');
  return array(
    'field' => array(
      '#type' => 'textfield',
      '#title' => 'Send a message to anyone else viewing this page',
      '#id' => 'websockets-test'
    ),
    'button' => array(
      '#type' => 'button',
      '#title' => 'Button',
      '#value' => 'Send!'
    )
  );
}

/**
 * Check if process exists on Linux type OS
 * 
 * http://www.blrf.net/howto/25_PHP__How_to_check_if_PID_exists_on_Linux_.html
 *
 * @param int $pid Process ID
 * @param string $name Process name, null for no process name matching
 * @return bool
 */
function check_process($pid, $name = null){
  // form the filename to search for
  $file = '/proc/' . (int)$pid . '/cmdline';
  $fp = false;
  if(file_exists($file))
    $fp = @fopen($file, 'r');
     // if file does not exist or cannot be opened, return false
  if(!$fp)
    return false;
  $buf = fgets($fp);
  // if we failed to read from file, return false
  if($buf === false){return false;}
  if($name !== null){
    // this code will also check if name matches
    $cmd = basename($buf);
    if(preg_match('/' . $name . '.*/', $cmd)){
      fclose($fp);
      return true;
    }else{
      // process was found, but name did not match
      fclose($fp);
      return false;
    }
  }else{
    // process found, name is null, return true
    fclose($fp);
    return true;
  }
}