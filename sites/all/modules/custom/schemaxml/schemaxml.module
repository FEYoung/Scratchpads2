<?php

/**
 *
 * This module uses what it calls "schema array", to represent
 * an XML file schema and describe how to map a given entity
 * to the XML format.
 *
 * The schema array is similar to other type definitions in Drupal
 * (form arrays, render arrays, etc.): items that start with a '#'
 * are properties while other items are actual values or children
 * schemas.
 *
 * Creating an XML file starts with an entity and a schema array. 
 * The schema array is scanned and the XML is generated from the 
 * fields of the entity.
 *
 * The schema array has the following format:
 *
 *  array(
 *    #min_occurence:   Minimum number of occurence. Defaults to 1.
 *                      An exception will be raised if this constraint is not respected
 *
 *    #max_occurence':  Maximum number of occurence. Defaults to 1, use -1 for unlimited
 *                      An expception will be raised if this constraint is not respected
 *
 *    #attributes:      Attributes to add to the XML element, as an array of name => value/callable function.
 *                      If the value is NULL, it is ignored. The current context is passed as
 *                      argument to the called function.
 *
 *    #process:         Optional callable to process the given value before insertion into the XML document.
 *                      The current context is passed as argument to the called function.
 *    
 *    #entity:          Optional callable (or array whereby the first element is a callable and following
 *                      elements are arguments) which gets as parameter the current context followed
 *                      by the given arguments, and should return an array defining 'entity' and 'entity_type'
 *                      or FALSE.
 *                      
 *                      This replaces the currently processed entity by the returned one, or skips the
 *                      current element if the return value is FALSE.
 *                      
 *                      This is done at the begining of the processing, such that all other processing
 *                      is done on the new entity.
 *                      
 *    #child_entity:    Optional callable (or array whereby the first element is a callable and following
 *                      elements are arguments) which gets as parameter the current context followed
 *                      by the current field value, followed by the given arguments, and should return
 *                      an array defining 'entity' and 'entity_type' or FALSE.
 *                      
 *                      This only gets invoked for elements that have a '#field' defined, such that for each
 *                      value of the field (if it is a multi-value field) the entity used by the child
 *                      elements will be replaced by the one returned by this function. The second argument
 *                      passed to the loader function is the value of each delta of the current field.
 *
 *    #child_relation:  If defined, this is the name of a relation type for which the current entity is
 *                      an endpoint. Child entities are loaded as the entities on the other endpoint
 *                      of this relation. If this is defined then #field and #child_entity cannot
 *                      be defined, as this drives both the number of occurences and the child entities.
 *                      
 *                      Once this has been defined child elements will be able to access the fields
 *                      of the relation as well as the fields of the child entitiy.
 *                      
 *                      XXX we should have an analogous #relation
 *                      
 *    #value :          A static value to insert when generating the XML. This is inserted as many
 *                      times as required by #min_occurence.
 *                      
 *    #field :          A field or property name on the current entity to use as value when generating the XML.
 *
 *                      If the field is multi-valued then each value is inserted as a separate XML element (and
 *                      this is valiadted against mix/max constrainsts) unless '#merge' is defined.
 *                      
 *                      If the value has multiple properties then the property 'value' is used if it exists ;
 *                      if not, the first property is used. If a different behaviour is required then
 *                      use '#process' to return the right value to insert.
 *
 *                      If both #value and #field are present, #field is used for constraint checking
 *                      (and for #child_entity), but it's the value of #value that is inserted in the XML.
 *
 *    #merge :          If a field (as defined by #field) is multi valued and '#merge' is defined and is
 *                      callable, then that function is called and only one value (the  return value of 
 *                      that function) is inserted.
 *
 *    #condition:       If present, the current item (and it's children) are only processed if the field
 *                      described by #condition is not empty, or the callable function indicated by
 *                      #condition returns TRUE. The callable is passed the current context as argument.
 *                      
 *                      If '#condition' is an array, then it is assumed the first element is a callable
 *                      and the remaining are passed as extra arguments.
 *
 *    #error_info:      If present, this will be used instead of the field name in error messages
 *                      (eg. field ... is required)
 *
 *    #error_field      If present, the string '%' in the #error_info will be substituted for the value
 *                      of that field on the current entity
 *
 *    #restrictions:    Optionally other restrictions. This is an array of the form:
 *                      array(
 *                        'enumeration' => array(... allowed values ...),
 *                        'attributes_enumerations' => array(
 *                          <attribute_name> => array(... allowed values ...),
 *                          ...
 *                        )
 *                      )
 *
 *   <tag name>:        A schema array for child elements. There can be any number of
 *                      such entries. To allow for several of the same tag (for instance, several
 *                      iteration of a tag mapping to different fields) add #<number> at the end
 *                      of the tag.
 *  );
 *
 * The context that is passed to callables is an array defining:
 *
 *   entity:          The entity being processed
 *   entity_type:     The type of the entity being processed
 *   wrapper:         An entity metadata wrapper around the entity being processed
 *   child_entity:    The child entity (if loaded using #load)
 *   child_entity_type: The type of the child entity (if loaded using #load)
 *   child_wrapper:   Wrapper around the child entity (if loaded using #load)
 *   field:           The current field (if applicable)
 *   delta:           The delta of the current value (for fields, if applicable)
 *   raw_value:       The actual value of the field
 *   value_to_insert: The value that will be inserted
 *   schema:          The current schema
 *
 */
/**
 * This method is used to fetch the given schema array.
 *
 * It will get the schemas returned by module that implement
 * 'schema_array($schema_name, $variables)' and
 * 'schema_array_<schema_name>($variables)'
 * and merge them using SchemaXSDParser::merge_schemas
 * 
 * The final schema will be altered by calling
 * 'schema_array_alter($schema_name, $schema, $variables)' and
 * 'schema_array_<schema_name>_alter($schema, $variables)'.
 */
function schema_array($schema_name, $variables = array()){
  $result = array();
  $safe_name = preg_replace('/[^a-zA-Z0-9_]/', '', $schema_name);
  $modules = module_implements('schema_array');
  foreach($modules as $module){
    $fn = $module . '_schema_array';
    $sc = $fn($schema_name, $variables);
    $result = SchemaXSDParser::merge_schemas($result, $sc);
  }
  $modules = module_implements('schema_array_' . $schema_name);
  foreach($modules as $module){
    $fn = $module . '_schema_array_' . $safe_name;
    $sc = $fn($variables);
    $result = SchemaXSDParser::merge_schemas($result, $sc);
  }
  $modules = module_implements('schema_array_alter');
  foreach($modules as $module){
    $fn = $module . '_schema_array_alter';
    $fn($schema_name, $result);
  }
  $modules = module_implements('schema_array_' . $safe_name . '_alter');
  foreach($modules as $module){
    $fn = $module . '_schema_array_' . $safe_name . '_alter';
    $fn($result);
  }
  return $result;
}

/**
 * Return an int from a boolean
 */
function _schemaxml_xml_boolean_to_int($context){
  if($context->value_to_insert){
    return '1';
  }else{
    return '0';
  }
}

/**
 * Process a country field to return either the iso2 code or
 * the country name
 *
 */
function _schemaxml_xml_process_country($context, $type = 'name'){
  $value = $context->value_to_insert;
  if($type == 'iso2'){
    return $value['iso2'];
  }else{
    $country = country_load($value['iso2']);
    return $country->name;
  }
}

/**
 * Process an URI and return a file url
 */
function _schemaxml_xml_process_get_file_url($context){
  return file_create_url($context->value_to_insert['uri']);
}

/**
 * Process a map field to return just one property (by default the latitude)
 */
function _schemaxml_xml_process_map($context, $type = 'latitude'){
  $value = $context->value_to_insert;
  if(isset($value[0])){
    $map = (array)($value[0]);
  }else{
    $map = (array)$value;
  }
  return $map[$type];
}

/**
 * Merge function for merging multiple users into one
 */
function _schemaxml_xml_merge_user($values){
  $output = array();
  foreach($values as $value){
    $wrapper = entity_metadata_wrapper('user', $value);
    $full_name = implode(' ', array(
      $wrapper->field_user_title->value(),
      $wrapper->field_user_given_names->value(),
      $wrapper->field_user_family_name->value()
    ));
    $output[] = $full_name;
  }
  return implode(' ', $output);
}

/**
 * Return full name/first name/middle names of current user object
 */
function _schemaxml_xml_process_user($context, $type = 'full'){
  switch($type){
    case 'full':
      return implode(' ', array(
        $context->wrapper->field_user_title->value(),
        $context->wrapper->field_user_given_names->value(),
        $context->wrapper->field_user_family_name->value()
      ));
      break;
    case 'first':
      $given_names = explode(' ', $context->wrapper->field_user_given_names->value());
      return reset($given_names);
      break;
    case 'middle':
      $given_names = explode(' ', $context->wrapper->field_user_given_names->value());
      array_shift($given_names);
      return implode(' ', $given_names);
      break;
  }
}

/**
 * Loader function for files
 */
function _schemaxml_xml_load_file($context, $value){
  $file = entity_load('file', $value['fid']);
  return array(
    'entity' => $file,
    'entity_type' => 'file'
  );
}

/**
 * Return the given value as an entity of the given type.
 *
 * This function can be used for loading referenced entities,
 * as the value given by the meta data wrapper is the loaded
 * entity.
 */
function _schemaxml_xml_load_entity($context, $value, $type = 'node'){
  return array(
    'entity_type' => $type,
    'entity' => $value
  );
}

/**
 * Return the given field value as an entity of the given type
 */
function _schemaxml_xml_load_entity_from_field($context, $field, $type = 'node'){
  $value = $context->wrapper->get($field)->value();
  if(is_array($value) && strpos($context->wrapper->get($field)->type(), 'list<') === 0){
    $value = reset($value);
  }
  return _schemaxml_xml_load_entity($context, $value, $type);
}

/**
 * Loads a term that is referenced by the field_taxonomic_name field
 * of a node
 */
function _schemaxml_xml_load_taxonomic_name($context, $value = NULL){
  $entity = $context->wrapper->field_taxonomic_name[0]->value();
  return array(
    'entity_type' => 'taxonomy_term',
    'entity' => $entity
  );
}

/**
 * Loads the parent of the given term
 */
function _schemaxml_xml_load_parent_term($context, $value, $rank = NULL){
  if(is_array($value) && isset($value['tid'])){
    $value = $value['tid'];
  }else if(is_object($value) && isset($value->tid)){
    $value = $value->tid;
  }
  $terms = taxonomy_get_parents($value);
  while(!empty($terms)){
    $current = array_shift($terms);
    if($rank === NULL || $current->field_rank[LANGUAGE_NONE][0]['value'] == $rank){return array(
        'entity_type' => 'taxonomy_term',
        'entity' => $current
      );}
    $parents = taxonomy_get_parents($current->tid);
    $terms = array_merge($terms, $parents);
  }
  return NULL;
}

/**
 * Loader function for materials
 * XXX we can't do this anymore - merge specimen and location together.
 * We need to find another approach for this
 */
function _schemaxml_xml_load_specimen($context, $value){
  $specimen = node_load($value['nid']);
  if(!empty($specimen->field_location[$specimen->language][0]['nid'])){
    $location = node_load($specimen->field_location[$specimen->language][0]['nid']);
    $location->location_title = $location->title;
    unset($location->title);
    $specimen = ((object)(array_merge((array)$specimen, (array)($location))));
  }
  $specimen->field_collector[LANGUAGE_NONE] = array();
  $specimen->field_identified_by[LANGUAGE_NONE] = array();
  return $specimen;
}

/**
 * Translate charater entities into numeric entities, as vanilla XML does
 * not accept all HTML entities.
 */
function _schemaxml_xml_translate_entities($str){
  $map = array(
    "&quot;" => "&#x0022;",
    "&amp;" => "&#x0026;",
    "&apos;" => "&#x0027;",
    "&lt;" => "&#x003C;",
    "&gt;" => "&#x003E;",
    "&nbsp;" => "&#x00A0;",
    "&iexcl;" => "&#x00A1;",
    "&cent;" => "&#x00A2;",
    "&pound;" => "&#x00A3;",
    "&curren;" => "&#x00A4;",
    "&yen;" => "&#x00A5;",
    "&brvbar;" => "&#x00A6;",
    "&sect;" => "&#x00A7;",
    "&uml;" => "&#x00A8;",
    "&copy;" => "&#x00A9;",
    "&ordf;" => "&#x00AA;",
    "&laquo;" => "&#x00AB;",
    "&not;" => "&#x00AC;",
    "&shy;" => "&#x00AD;",
    "&reg;" => "&#x00AE;",
    "&macr;" => "&#x00AF;",
    "&deg;" => "&#x00B0;",
    "&plusmn;" => "&#x00B1;",
    "&sup2;" => "&#x00B2;",
    "&sup3;" => "&#x00B3;",
    "&acute;" => "&#x00B4;",
    "&micro;" => "&#x00B5;",
    "&para;" => "&#x00B6;",
    "&middot;" => "&#x00B7;",
    "&cedil;" => "&#x00B8;",
    "&sup1;" => "&#x00B9;",
    "&ordm;" => "&#x00BA;",
    "&raquo;" => "&#x00BB;",
    "&frac14;" => "&#x00BC;",
    "&frac12;" => "&#x00BD;",
    "&frac34;" => "&#x00BE;",
    "&iquest;" => "&#x00BF;",
    "&Agrave;" => "&#x00C0;",
    "&Aacute;" => "&#x00C1;",
    "&Acirc;" => "&#x00C2;",
    "&Atilde;" => "&#x00C3;",
    "&Auml;" => "&#x00C4;",
    "&Aring;" => "&#x00C5;",
    "&AElig;" => "&#x00C6;",
    "&Ccedil;" => "&#x00C7;",
    "&Egrave;" => "&#x00C8;",
    "&Eacute;" => "&#x00C9;",
    "&Ecirc;" => "&#x00CA;",
    "&Euml;" => "&#x00CB;",
    "&Igrave;" => "&#x00CC;",
    "&Iacute;" => "&#x00CD;",
    "&Icirc;" => "&#x00CE;",
    "&Iuml;" => "&#x00CF;",
    "&ETH;" => "&#x00D0;",
    "&Ntilde;" => "&#x00D1;",
    "&Ograve;" => "&#x00D2;",
    "&Oacute;" => "&#x00D3;",
    "&Ocirc;" => "&#x00D4;",
    "&Otilde;" => "&#x00D5;",
    "&Ouml;" => "&#x00D6;",
    "&times;" => "&#x00D7;",
    "&Oslash;" => "&#x00D8;",
    "&Ugrave;" => "&#x00D9;",
    "&Uacute;" => "&#x00DA;",
    "&Ucirc;" => "&#x00DB;",
    "&Uuml;" => "&#x00DC;",
    "&Yacute;" => "&#x00DD;",
    "&THORN;" => "&#x00DE;",
    "&szlig;" => "&#x00DF;",
    "&agrave;" => "&#x00E0;",
    "&aacute;" => "&#x00E1;",
    "&acirc;" => "&#x00E2;",
    "&atilde;" => "&#x00E3;",
    "&auml;" => "&#x00E4;",
    "&aring;" => "&#x00E5;",
    "&aelig;" => "&#x00E6;",
    "&ccedil;" => "&#x00E7;",
    "&egrave;" => "&#x00E8;",
    "&eacute;" => "&#x00E9;",
    "&ecirc;" => "&#x00EA;",
    "&euml;" => "&#x00EB;",
    "&igrave;" => "&#x00EC;",
    "&iacute;" => "&#x00ED;",
    "&icirc;" => "&#x00EE;",
    "&iuml;" => "&#x00EF;",
    "&eth;" => "&#x00F0;",
    "&ntilde;" => "&#x00F1;",
    "&ograve;" => "&#x00F2;",
    "&oacute;" => "&#x00F3;",
    "&ocirc;" => "&#x00F4;",
    "&otilde;" => "&#x00F5;",
    "&ouml;" => "&#x00F6;",
    "&divide;" => "&#x00F7;",
    "&oslash;" => "&#x00F8;",
    "&ugrave;" => "&#x00F9;",
    "&uacute;" => "&#x00FA;",
    "&ucirc;" => "&#x00FB;",
    "&uuml;" => "&#x00FC;",
    "&yacute;" => "&#x00FD;",
    "&thorn;" => "&#x00FE;",
    "&yuml;" => "&#x00FF;",
    "&OElig;" => "&#x0152;",
    "&oelig;" => "&#x0153;",
    "&Scaron;" => "&#x0160;",
    "&scaron;" => "&#x0161;",
    "&Yuml;" => "&#x0178;",
    "&fnof;" => "&#x0192;",
    "&circ;" => "&#x02C6;",
    "&tilde;" => "&#x02DC;",
    "&Alpha;" => "&#x0391;",
    "&Beta;" => "&#x0392;",
    "&Gamma;" => "&#x0393;",
    "&Delta;" => "&#x0394;",
    "&Epsilon;" => "&#x0395;",
    "&Zeta;" => "&#x0396;",
    "&Eta;" => "&#x0397;",
    "&Theta;" => "&#x0398;",
    "&Iota;" => "&#x0399;",
    "&Kappa;" => "&#x039A;",
    "&Lambda;" => "&#x039B;",
    "&Mu;" => "&#x039C;",
    "&Nu;" => "&#x039D;",
    "&Xi;" => "&#x039E;",
    "&Omicron;" => "&#x039F;",
    "&Pi;" => "&#x03A0;",
    "&Rho;" => "&#x03A1;",
    "&Sigma;" => "&#x03A3;",
    "&Tau;" => "&#x03A4;",
    "&Upsilon;" => "&#x03A5;",
    "&Phi;" => "&#x03A6;",
    "&Chi;" => "&#x03A7;",
    "&Psi;" => "&#x03A8;",
    "&Omega;" => "&#x03A9;",
    "&alpha;" => "&#x03B1;",
    "&beta;" => "&#x03B2;",
    "&gamma;" => "&#x03B3;",
    "&delta;" => "&#x03B4;",
    "&epsilon;" => "&#x03B5;",
    "&zeta;" => "&#x03B6;",
    "&eta;" => "&#x03B7;",
    "&theta;" => "&#x03B8;",
    "&iota;" => "&#x03B9;",
    "&kappa;" => "&#x03BA;",
    "&lambda;" => "&#x03BB;",
    "&mu;" => "&#x03BC;",
    "&nu;" => "&#x03BD;",
    "&xi;" => "&#x03BE;",
    "&omicron;" => "&#x03BF;",
    "&pi;" => "&#x03C0;",
    "&rho;" => "&#x03C1;",
    "&sigmaf;" => "&#x03C2;",
    "&sigma;" => "&#x03C3;",
    "&tau;" => "&#x03C4;",
    "&upsilon;" => "&#x03C5;",
    "&phi;" => "&#x03C6;",
    "&chi;" => "&#x03C7;",
    "&psi;" => "&#x03C8;",
    "&omega;" => "&#x03C9;",
    "&thetasym;" => "&#x03D1;",
    "&upsih;" => "&#x03D2;",
    "&piv;" => "&#x03D6;",
    "&ensp;" => "&#x2002;",
    "&emsp;" => "&#x2003;",
    "&thinsp;" => "&#x2009;",
    "&zwnj;" => "&#x200C;",
    "&zwj;" => "&#x200D;",
    "&lrm;" => "&#x200E;",
    "&rlm;" => "&#x200F;",
    "&ndash;" => "&#x2013;",
    "&mdash;" => "&#x2014;",
    "&lsquo;" => "&#x2018;",
    "&rsquo;" => "&#x2019;",
    "&sbquo;" => "&#x201A;",
    "&ldquo;" => "&#x201C;",
    "&rdquo;" => "&#x201D;",
    "&bdquo;" => "&#x201E;",
    "&dagger;" => "&#x2020;",
    "&Dagger;" => "&#x2021;",
    "&bull;" => "&#x2022;",
    "&hellip;" => "&#x2026;",
    "&permil;" => "&#x2030;",
    "&prime;" => "&#x2032;",
    "&Prime;" => "&#x2033;",
    "&lsaquo;" => "&#x2039;",
    "&rsaquo;" => "&#x203A;",
    "&oline;" => "&#x203E;",
    "&frasl;" => "&#x2044;",
    "&euro;" => "&#x20AC;",
    "&image;" => "&#x2111;",
    "&weierp;" => "&#x2118;",
    "&real;" => "&#x211C;",
    "&trade;" => "&#x2122;",
    "&alefsym;" => "&#x2135;",
    "&larr;" => "&#x2190;",
    "&uarr;" => "&#x2191;",
    "&rarr;" => "&#x2192;",
    "&darr;" => "&#x2193;",
    "&harr;" => "&#x2194;",
    "&crarr;" => "&#x21B5;",
    "&lArr;" => "&#x21D0;",
    "&uArr;" => "&#x21D1;",
    "&rArr;" => "&#x21D2;",
    "&dArr;" => "&#x21D3;",
    "&hArr;" => "&#x21D4;",
    "&forall;" => "&#x2200;",
    "&part;" => "&#x2202;",
    "&exist;" => "&#x2203;",
    "&empty;" => "&#x2205;",
    "&nabla;" => "&#x2207;",
    "&isin;" => "&#x2208;",
    "&notin;" => "&#x2209;",
    "&ni;" => "&#x220B;",
    "&prod;" => "&#x220F;",
    "&sum;" => "&#x2211;",
    "&minus;" => "&#x2212;",
    "&lowast;" => "&#x2217;",
    "&radic;" => "&#x221A;",
    "&prop;" => "&#x221D;",
    "&infin;" => "&#x221E;",
    "&ang;" => "&#x2220;",
    "&and;" => "&#x2227;",
    "&or;" => "&#x2228;",
    "&cap;" => "&#x2229;",
    "&cup;" => "&#x222A;",
    "&int;" => "&#x222B;",
    "&there4;" => "&#x2234;",
    "&sim;" => "&#x223C;",
    "&cong;" => "&#x2245;",
    "&asymp;" => "&#x2248;",
    "&ne;" => "&#x2260;",
    "&equiv;" => "&#x2261;",
    "&le;" => "&#x2264;",
    "&ge;" => "&#x2265;",
    "&sub;" => "&#x2282;",
    "&sup;" => "&#x2283;",
    "&nsub;" => "&#x2284;",
    "&sube;" => "&#x2286;",
    "&supe;" => "&#x2287;",
    "&oplus;" => "&#x2295;",
    "&otimes;" => "&#x2297;",
    "&perp;" => "&#x22A5;",
    "&sdot;" => "&#x22C5;",
    "&lceil;" => "&#x2308;",
    "&rceil;" => "&#x2309;",
    "&lfloor;" => "&#x230A;",
    "&rfloor;" => "&#x230B;",
    "&lang;" => "&#x2329;",
    "&rang;" => "&#x232A;",
    "&loz;" => "&#x25CA;",
    "&spades;" => "&#x2660;",
    "&clubs;" => "&#x2663;",
    "&hearts;" => "&#x2665;",
    "&diams;" => "&#x2666;"
  );
  return str_replace(array_keys($map), array_values($map), $str);
}