<?php

/**
 * Implements hook_theme().
 */
function scratchpad_ecorelation_types_theme($existing, $type, $theme, $path){
  $theme = array(
    'scratchpad_ecorelation_field' => array(
      'variables' => array(
        'entity' => NULL,
        'relation' => NULL,
        'entity_type' => NULL,
        'related_entities' => NULL,
        'bundle' => NULL,
        'custom_title' => NULL,
        'field_name' => NULL
      ),
      'template' => 'scratchpad-ecorelation-field',
      'path' => $path . '/theme'
    )
  );
  return $theme;
}

function scratchpad_ecorelation_types_preprocess_scratchpad_ecorelation_field(&$variables, $hook){
  $id = $variables['entity']->tid;
  $relation = $variables['relation'];
  $relation_type = relation_type_load($relation['relation_type']);
  foreach($relation['endpoints'][LANGUAGE_NONE] as $endpoint){
    if($endpoint['entity_type'] == $variables['entity_type'] && $endpoint['entity_id'] == $id){
      if($variables['custom_title']){
        $label = $variables['custom_title'];
      }else{
        if($endpoint['r_index'] == 0){
          $label = $relation_type->label;
        }else{
          $label = $relation_type->directional ? $relation_type->reverse_label : $relation_type->label;
        }
      }
    }
  }
  $label = preg_replace('/(?<!^)[A-Z]/e', 'strtolower(" $0")', $label);
  $label .= ": ";
  $variables['items'] = array();
  foreach($variables['related_entities'] as $related_entity){
    $link = entity_uri($related_entity->entity_type, $related_entity);
    $variables['items'][] = $label . ' ' . l(entity_label($related_entity->entity_type, $related_entity), $link['path']);
  }
  $variables['theme_hook_suggestions'][] = 'scratchpad_ecorelation_field__' . $variables['field_name'];
}

/**
 * Relation_add module was not formatting the endpoint lables correctly so override here
 * Implements hook_field_formatter_info().
 */
function scratchpad_ecorelation_types_field_formatter_info(){
  return array(
    'relation_add_endpoints_and_fields' => array(
      'label' => t('Endpoints and fields'),
      'field types' => array(
        'relation_add'
      )
    ),
    'endpoint_w_label' => array( //Machine name of the formatter
      'label' => t('Endpoint with label'),
      'field types' => array(
        'relation_add'
      ) //This will only be available to relation_add fields
    ),
    'endpoint_and_all_fields' => array( //Machine name of the formatter
      'label' => t('Endpoint with all fields'),
      'field types' => array(
        'relation_add'
      ) //This will only be available to relation_add fields
    )
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function scratchpad_ecorelation_types_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display){
  $element = array(); // Initialize the var
  switch($display['type']){
    case 'endpoint_and_all_fields':
      foreach($items as $delta => $item){
        $links = array();
        list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
        $relation = (object)$item;
        $relation_type = relation_type_load($relation->relation_type);
        $relationship_label = $relation_type->directional ? $relation_type->reverse_label : $relation_type->label;
        $relationship_label = preg_replace('/(?<=\\w)(?=[A-Z])/', " $1", $relationship_label);
        $relationship_label = trim(ucfirst(strtolower($relationship_label)));
        if($display['label'] == 'inline'){
          $label_display = ' field-label-inline ';
        }else if($display['label'] == 'above'){
          $label_display = ' field-label-above ';
        }else if($display['label'] == 'hidden'){
          $label_display = ' field-label-inline ';
        }else{
          $label_display = '';
        }
        if(count($relation->endpoints[LANGUAGE_NONE]) > 1){
          foreach(array_filter($relation->endpoints[LANGUAGE_NONE]) as $endpoint){
            if($endpoint['entity_id'] != $id){ // only show the related terms
              $related_entities = entity_load($endpoint['entity_type'], array(
                $endpoint['entity_id']
              ));
              $related_entity = reset($related_entities);
              if(!($endpoint['entity_type'] == $entity_type && $endpoint['entity_id'] == $entity_id)){
                $link = entity_uri($endpoint['entity_type'], $related_entity);
                $link['href'] = $link['path'];
                $link['title'] = entity_label($endpoint['entity_type'], $related_entity);
                $relation_link = l($link['title'], $link['href']);
                $element[$delta]['relation']['relation'] = array(
                  'item' => array(
                    '#type' => 'container',
                    '#attributes' => array(
                      'class' => array(
                        'field field-name-field-endpoint' . $label_display . 'clearfix'
                      )
                    ),
                    'markup' => array(
                      '#markup' => '<div class="field-label">' . $relationship_label . ':&nbsp;</div>' . '<div class="field-items"><div class="field-item even"> ' . $relation_link . '</div></div>'
                    )
                  )
                );
              }
            }
          }
          $endpoint_title = '';
          switch($instance['widget']['settings']['relation_endpoint_label']){
            case 'endpoint':
              $relation_instance = field_info_instance('relation', 'endpoints', $relation->relation_type);
              // $endpoint_title = t(check_plain($relation_instance['label']));
              $endpoint_title = t(check_plain($relationship_label));
              $endpoint_title = trim(ucfirst(strtolower(preg_replace('/(?<=\\w)(?=[A-Z])/', " $1", $endpoint_title))));
              break;
            case 'custom':
              $endpoint_title = t($instance['widget']['settings']['relation_endpoint_custom_label']);
              break;
          }
        }
        $relation_view = relation_view($relation);
        $relation_instances = field_info_instances('relation', $relation->relation_type);
        foreach(array_keys($relation_instances) as $relation_field_name){
          if($relation_field_name !== 'endpoints'){
            if(isset($relation_view[$relation_field_name])){
              if($relation_view[$relation_field_name]['#field_type'] !== 'list_boolean' && $relation_view[$relation_field_name]['#items'][0]['value'] !== 0){
                $element[$delta]['relation']['fields'][] = $relation_view[$relation_field_name];
              }
            }
          }
        }
      }
      break;
    case 'endpoint_w_label':
      foreach($items as $delta => $item){
        list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
        $relation = (object)$item;
        $relation_type = relation_type_load($relation->relation_type);
        $subject_is_source = ($relation->endpoints[LANGUAGE_NONE]['0']['entity_id']) == $id ? TRUE : FALSE;
        $count = 0; // For comma separation of objects.
        $duplicate = FALSE; // To make sure duplicates of $entity get included in object list.
        $objects = ''; // Comma separated list of entities that are the object of the sentence.
        // Gramatical predicate of the sentence.
        $predicate = $relation_type->directional ? $relation_type->reverse_label : $relation_type->label;
        foreach($relation->endpoints[LANGUAGE_NONE] as $endpoint){
          // Add all entities that aren't this entity to the sentence $objects.
          // Check for duplicates of the $subject first.
          if($endpoint['entity_type'] == $entity_type && $endpoint['entity_id'] == $id && $duplicate == FALSE){
            $duplicate = TRUE;
            // Use the forward label as sentence predicate if r_index == 0.  (only makes a difference if relation is directional).
            if($endpoint['r_index'] == 0){
              $predicate = ' ' . $relation_type->label;
            }
          }else{
            /**
             *  If the relation is directional and the subject isn't the source, we want to list the source without any siblings. 
             *  If it is directional and the subject is a source, list all targets. 
             *  If non-directional, list everything as normal.
            */
            if(!$relation_type->directional || $subject_is_source || $endpoint['r_index'] == 0){
              $object_entities = entity_load($endpoint['entity_type'], array(
                $endpoint['entity_id']
              ));
              $object_entity = reset($object_entities);
              $object_label = entity_label($endpoint['entity_type'], $object_entity);
              $object_uri = entity_uri($endpoint['entity_type'], $object_entity);
              // Just add a space before the first element, comma and space before further ones.
              $objects .= $count ? ', ' : ' ';
              $count += 1;
              $objects .= l($object_label, $object_uri['path']);
            }
          }
        }
        $element[$delta]['relation'] = array(
          '#theme' => 'item_list',
          '#items' => array(
            $predicate . $objects
          )
        );
      }
      break;
    case 'relation_add_endpoints_and_fields':
      // order items by relation_type
      foreach($items as $key => $row){
        $type[$key] = $row['relation_type'];
      }
      array_multisort($type, SORT_ASC, $items);
      foreach($items as $delta => $item){
        $relation = (object)$item;
        $related_entities = array();
        if(count($relation->endpoints[LANGUAGE_NONE]) > 1){
          foreach(array_filter($relation->endpoints[LANGUAGE_NONE]) as $endpoint){
            if($endpoint['entity_type'] == $entity_type && $endpoint['entity_id'] == $entity_id){
              continue;
            }
            // No link to the parent entity
            $related_entity = @reset(entity_load($endpoint['entity_type'], array(
              $endpoint['entity_id']
            )));
            $related_entity->entity_type = $endpoint['entity_type'];
            $related_entities[] = $related_entity;
          }
          switch($instance['widget']['settings']['relation_endpoint_label']){
            case 'custom':
              $endpoint_title = t($instance['widget']['settings']['relation_endpoint_custom_label']);
              break;
          }
          $element[$delta]['relation'] = array(
            '#theme' => 'scratchpad_ecorelation_field',
            '#entity' => $entity,
            '#relation' => $item,
            '#entity_type' => $entity_type,
            '#related_entities' => $related_entities,
            '#bundle' => $instance['bundle'],
            '#custom_title' => $endpoint_title,
            '#field_name' => $instance['field_name']
          );
        }
        $relation_view = relation_view($relation);
        $relation_instances = field_info_instances('relation', $relation->relation_type);
        foreach(array_keys($relation_instances) as $relation_field_name){
          if($relation_field_name !== 'endpoints'){
            if(isset($relation_view[$relation_field_name])){
              $element[$delta]['relation']['fields'][] = $relation_view[$relation_field_name];
            }
          }
        }
      }
      break;
  }
  return $element;
}