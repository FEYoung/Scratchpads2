<?php

/**
 * @file
 * 
 * Provides three additional hooks:
 * 
 * hook_tcsdc_form()
 * hook_tcsdc_help()
 * hook_tcsdc_data_alter()
 */
/**
 * Implementation of hook_menu().
 */
function tcsdc_menu(){
  return array(
    'admin/structure/taxonomy/tcs-import' => array(
      'title' => 'TCS Import',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'tcsdc_primary_form'
      ),
      'access arguments' => array(
        'administer taxonomy'
      )
    ) // 'file' => 'tcsdc.form.inc'
  );
}

/**
 * Form definition, as used by the form flow.
 */
function tcsdc_primary_form($form, &$form_state){
  // First, we need to get the TCS form definitions from the respective modules.
  // We do this by getting the tcsdc defintions and looping through each.
  $form = module_invoke_all('tcsdc_form', $form, $form_state);
  return array_merge($form, array(
    '#submit' => array(
      'tcsdc_primary_form_submit'
    )
  ));
}

/**
 * Helper function for setting variables that need to be accessed in different
 * functions.
 */
function tcsdc_variable($name, $value = NULL){
  static $data = array();
  if(!is_null($value)){
    $data[$name] = $value;
  }
  return $data[$name];
}

/**
 * Batch downloader.  This does the recursive downloading of the XML.  The XML
 * is converted and saved in the database, eventually to be output as CSV.
 */
function tcsdc_batch_downloader($urls, $total = 1000000, &$context){
  if(!isset($context['sandbox']['progress'])){
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = $total;
    $context['sandbox']['originalurl'] = $urls[0];
    $context['sandbox']['urls'] = $urls;
    $context['sandbox']['start_time'] = time();
    // Set a static array for the URLs, this means that we can alter it when
    // parsing the XML.
    tcsdc_variable('tcsdc_urls', $urls);
  }
  $batch = &batch_get();
  $url = array_shift($context['sandbox']['urls']);
  tcsdc_variable('tcsdc_urls', $context['sandbox']['urls']);
  tcsdc_variable('tcsdc_vernaculars', $context['sandbox']['vernacular_urls']);
  tcsdc_variable('tcsdc_synonyms', $context['sandbox']['synonym_urls']);
  tcsdc_batch_downloader_helper($url);
  $context['sandbox']['urls'] = tcsdc_variable('tcsdc_urls');
  $context['sandbox']['vernacular_urls'] = tcsdc_variable('tcsdc_vernaculars');
  $context['sandbox']['synonym_urls'] = tcsdc_variable('tcsdc_synonyms');
  // Get the number of names we have downloaded.
  $num_names_saved = db_query("SELECT COUNT(*) FROM {tcsdc_data} WHERE bid = ?", array(
    $batch['id']
  ))->fetchField();
  $context['sandbox']['progress'] = $num_names_saved / $context['sandbox']['max'];
  // Set the message
  $time_taken_so_far = time() - $context['sandbox']['start_time'];
  $approx_time_remaining = $context['sandbox']['progress'] == 0 ? 'Too soon to guess' : format_interval($time_taken_so_far * ((1 - $context['sandbox']['progress']) / $context['sandbox']['progress']));
  $context['message'] = t('Downloaded %numnames names of approximately %totalnames', array(
    '%numnames' => $num_names_saved,
    '%totalnames' => $context['sandbox']['max']
  )) . '<br/>' . t('Approximate time remaining: %time_remaining', array(
    '%time_remaining' => $approx_time_remaining
  ));
  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if(count($context['sandbox']['urls'])){
    if($context['sandbox']['progress'] < 1){
      $context['finished'] = $context['sandbox']['progress'];
    }else{
      $context['finished'] = 0.95;
    }
  }else{
    $context['finished'] = 1;
  }
}

/**
 * Helper for the above function
 */
function tcsdc_batch_downloader_helper($url){
  $xml = new SimpleXMLElement($url, 0, TRUE);
  $batch = &batch_get();
  $data = array();
  // Check if we're operating on a vernacular URL.  If so, we add the data to
  // the parent URL (which WILL be set).
  $vernacular_urls = tcsdc_variable('tcsdc_vernaculars');
  if(isset($vernacular_urls[$url])){
    $row = array_pop(db_select('tcsdc_data', 't')->fields('t')->condition('bid', $batch['id'])->condition('id', $vernacular_urls[$url])->execute()->fetchAll());
    $data = unserialize($row->data);
    foreach($xml->TaxonNames->TaxonName as $name){
      if(isset($data['vernaculars']) && is_array($data['vernaculars'])){
        $data['vernaculars'][] = (string)$name->Simple;
      }else{
        $data['vernaculars'] = array(
          (string)$name->Simple
        );
      }
    }
    db_update('tcsdc_data')->fields(array(
      'data' => serialize($data)
    ))->condition('id', $vernacular_urls[$url])->condition('bid', $batch['id'])->execute();
    unset($vernacular_urls[$url]);
    tcsdc_variable('tcsdc_vernaculars', $vernacular_urls);
    return;
  }
  foreach($xml->TaxonNames->TaxonName as $name){
    // Lets save the data to the table so that we can extract it later.
    // Get the type of this element.  If it is a vernacular of synonym, we
    // should have a record of it (for parentage).
    $data = array(
      'simple' => (string)$name->Simple,
      'rank' => (string)$name->Rank,
      'canonicalname' => (string)$name->CanonicalName->Simple
    );
  }
  foreach($xml->TaxonConcepts->TaxonConcept->TaxonRelationships->TaxonRelationship as $relationship){
    switch((string)$relationship['type']){
      case 'has synonym':
        // Add the URL to the list to download, and also add to the list of
        // synonyms (referencing this name).
        // URLs
        $urls = tcsdc_variable('tcsdc_urls');
        $urls[] = (string)$relationship->ToTaxonConcept['ref'];
        tcsdc_variable('tcsdc_urls', $urls);
        // Synonyms
        $synonym_urls = tcsdc_variable('tcsdc_synonyms');
        $synonym_urls[(string)$relationship->ToTaxonConcept['ref']] = $url;
        tcsdc_variable('tcsdc_synonyms', $synonym_urls);
        break;
      case 'has vernacular':
        // Add the URL to the list to download, and also add to the list of 
        // vernacular names (referencing this name).
        // URLs
        $urls = tcsdc_variable('tcsdc_urls');
        $urls[] = (string)$relationship->ToTaxonConcept['ref'];
        tcsdc_variable('tcsdc_urls', $urls);
        // Vernaculars
        $vernacular_urls[(string)$relationship->ToTaxonConcept['ref']] = $url;
        tcsdc_variable('tcsdc_vernaculars', $vernacular_urls);
        break;
      case 'is parent taxon of':
        // Add the URL to the list
        $urls = tcsdc_variable('tcsdc_urls');
        $urls[] = (string)$relationship->ToTaxonConcept['ref'];
        tcsdc_variable('tcsdc_urls', $urls);
        break;
      case 'is child taxon of':
        $data['parent'] = (string)$relationship->ToTaxonConcept['ref'];
        break;
      default:
        //dpm((string)$relationship['type']);
        break;
    }
  }
  $synonym_urls = tcsdc_variable('tcsdc_synonyms');
  if(isset($synonym_urls[$url])){
    // Set the parent
    $data['parent'] = $synonym_urls[$url];
    unset($synonym_urls[$url]);
    tcsdc_variable('tcsdc_synonyms', $synonym_urls);
  }
  if(count($data)){
    db_insert('tcsdc_data')->fields(array(
      'id' => $url,
      'name' => $data['simple'],
      'bid' => $batch['id'],
      'parent' => $data['parent'],
      'data' => serialize($data)
    ))->execute();
  }
}

/**
 * Final step of the download.  This outputs the data into a tab delimitted file
 * which can then be imported using the feeds module.
 */
function tcsdc_generate_tab_file(){
  $batch = &batch_get();
  $filename = file_create_filename('tcsdc', 'public://');
  $file_resource = fopen($filename, 'w');
  //$url = db_select('tcsdc_data', 't')->fields('t', array('id'))->condition('bid', $batch['id'])->execute()->fetchCol();
  $id = db_query('SELECT id FROM {tcsdc_data} WHERE bid = :bid AND parent NOT IN (SELECT id FROM {tcsdc_data} WHERE bid = :bid)', array(
    ':bid' => $batch['id']
  ))->fetchField();
  fwrite($file_resource, "guid\tname\tparent guid\trank\n");
  tcsdc_generate_tab_file_recurse($id, $file_resource, $batch);
  fclose($file_resource);
  db_delete('tcsdc_data')->condition('bid', $batch['id'])->execute();
}

/** 
 * Recursive function to ensure that the terms are in the correct order.
 */
function tcsdc_generate_tab_file_recurse($id, $file_resource, &$batch){
  // Get the data for this id
  $results = db_select('tcsdc_data', 't')->fields('t')->condition('id', $id)->condition('bid', $batch['id'])->execute();
  foreach($results as $result){
    $data = unserialize($result->data);
    fwrite($file_resource, "{$result->id}\t{$result->name}\t{$result->parent}\t{$data['rank']}\n");
    $results2 = db_select('tcsdc_data', 't')->fields('t', array('id'))->condition('parent', $result->id)->execute();
    foreach($results2 as $result2){
      tcsdc_generate_tab_file_recurse($result2->id, $file_resource, $batch);
    }
  }
}