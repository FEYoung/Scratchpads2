<?php

/**
 * Implementation of hook_entity_info().
 */
function eolapi_entity_info(){
  return array(
    'eolapi' => array(
      'label' => 'Encyclopaedia of Life data',
      'controller class' => 'EOLAPIController',
      'views controller class' => 'EntityDefaultViewsController',
      'base table' => 'eolapi',
      'revision table' => 'eolapi_revision',
      'load hook' => 'eolapi_load',
      'save callback' => 'eolapi_save',
      'uri callback' => 'eolapi_uri',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'eid',
        'revision' => 'erid',
        'bundle' => 'type'
      ),
      'bundle keys' => array(
        'bundle' => 'type'
      ),
      'bundles' => array(
        'search' => array(
          'label' => 'EOL API Search result'
        ),
        'pages' => array(
          'label' => 'EOL API Page'
        ),
        'text' => array(
          'label' => 'EOL API Text'
        ),
        'stillimage' => array(
          'label' => 'EOL API image'
        ),
        'movingimage' => array(
          'label' => 'EOL API Video'
        )
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE
        ),
        'teaser' => array(
          'label' => t('Teaser'),
          'custom settings' => TRUE
        )
      )
    )
  );
}

/**
 * Implementation of hook_taxonomy_vocabulary_insert().
 * 
 * Exactly the same function (almost) from the field_taxonomic_name module.
 */
function eolapi_taxonomy_vocabulary_insert($vocabulary){
  if(isset($vocabulary->biological_classification) && $vocabulary->biological_classification){
    // We have a biological classification.  We need to update the field.
    $field = field_info_field('eolapi_taxonomy');
    $bio_vids = variable_get('biological_vids', array());
    $i = 0;
    $field['settings']['allowed_values'] = array();
    foreach($bio_vids as $vid => $value){
      $voc = taxonomy_vocabulary_load($vid);
      if($voc){
        $field['settings']['allowed_values'][$i] = array(
          'parent' => 0,
          'vocabulary' => $voc->machine_name
        );
        $i++;
      }
    }
    $field['settings']['allowed_values'][] = array(
      'parent' => 0,
      'vocabulary' => $vocabulary->machine_name
    );
    field_update_field($field);
  }
}

/**
 * Implementation of hook_taxonomy_vocabulary_delete().
 */
function eolapi_taxonomy_vocabulary_delete($vocabulary){
  // We have a biological classification.  We need to update the field.
  $field = field_info_field('eolapi_taxonomy');
  $update = FALSE;
  foreach($field['settings']['allowed_values'] as $key => $value){
    if($value['vocabulary'] == $vocabulary->machine_name){
      $update = TRUE;
      unset($field['settings']['allowed_values'][$key]);
      if(!count($field['settings']['allowed_values'])){
        $field['settings']['allowed_values'][0] = array(
          'parent' => 0,
          'vocabulary' => $vocabulary->machine_name
        );
      }
      break;
    }
  }
  if($update){
    field_update_field($field);
  }
}

/**
 * Implementation of hook_views_api().
 */
function eolapi_views_api(){
  return array(
    'api' => '3',
    'path' => drupal_get_path('module', 'eolapi') . '/views'
  );
}

/**
 * Implementation of hook_menu().
 */
function eolapi_menu(){
  return array(
    'eolapi' => array(
      'title' => 'EOLAPI Callback',
      'description' => 'Endpoint to enable dynamic creation of EOLAPI content.',
      'page callback' => 'eolapi_callback',
      'file' => 'eolapi.ajax.inc',
      'access arguments' => array(
        'access content'
      ),
      'type' => MENU_CALLBACK
    )
  );
}

/**
 * Implement hook_taxonomy_term_delete().
 */
function eolapi_taxonomy_term_delete($term = FALSE){
  // Delete the field data.  Looks like there is a bug somewhere with my code,
  // as I would expect the field module to do this for me!
  if($term){
    db_delete('field_data_eolapi_taxonomy')->condition('eolapi_taxonomy_tid', $term->tid)->execute();
    db_delete('field_revision_eolapi_taxonomy')->condition('eolapi_taxonomy_tid', $term->tid)->execute();
  }
  // Tidying, just in case a delete failed.
  $subquery = db_select('taxonomy_term_data', 't')->fields('t', array(
    'tid'
  ));
  $results = db_delete('field_data_eolapi_taxonomy')->condition('eolapi_taxonomy_tid', $subquery, 'NOT IN')->execute();
  $results = db_delete('field_revision_eolapi_taxonomy')->condition('eolapi_taxonomy_tid', $subquery, 'NOT IN')->execute();
  // Delete the entities that are no longer associated with a taxon
  $subquery = db_select('field_data_eolapi_taxonomy', 'f')->fields('f', array(
    'entity_id'
  ));
  $results = db_select('eolapi', 'e')->fields('e', array(
    'eid'
  ))->condition('e.eid', $subquery, 'NOT IN')->execute();
  foreach($results as $record){
    entity_delete('eolapi', $record->eid);
  }
  // Delete the files
  // SELECT eolapi_image_fid FROM field_data_eolapi_image WHERE entity_id NOT IN (SELECT eid FROM eolapi);
  $subquery = db_select('eolapi', 'e')->fields('e', array(
    'eid'
  ));
  $results = db_select('field_data_eolapi_image', 'f')->fields('f', array(
    'eolapi_image_fid'
  ))->condition('entity_id', $subquery, 'NOT IN');
  foreach($results as $record){
    entity_delete('file', $record->eolapi_image_fid);
  }
  $subquery = db_select('file_managed', 'f')->fields('f', array(
    'fid'
  ));
  db_delete('field_data_eolapi_image')->condition('eolapi_image_fid', $subquery, 'NOT IN')->execute();
}

/**
 * Implementation of hook_cron().
 */
function eolapi_cron(){
  eolapi_taxonomy_term_delete();
}

//---- VIEW -------------------------------------------------------------------
/**
 * Implementation of hook_theme().
 */
function eolapi_theme(){
  $info = eolapi_entity_info();
  $theme = array();
  module_load_include('theme.inc', 'eolapi');
  foreach($info['eolapi']['bundles'] as $bundle_key => $bundle_info){
    foreach($info['eolapi']['view modes'] as $view_mode => $view_mode_info){
      $theme_name = "eolapi_{$bundle_key}_{$view_mode}";
      $theme[$theme_name] = array(
        'variables' => array(
          'entity' => array()
        ),
        'file' => 'eolapi.theme.inc'
      );
      if(!function_exists("theme_{$theme_name}")){
        // This function doesn't exist, we should use a default.
        if(function_exists("theme_eolapi_{$bundle_key}")){
          $theme[$theme_name]['function'] = "theme_eolapi_{$bundle_key}";
        }else{
          $theme[$theme_name]['function'] = "theme_eolapi";
        }
      }
    }
  }
  return $theme;
}

/**
 * Implementation of hook_entity_view().
 */
function eolapi_entity_view($entity, $type, $view_mode, $langcode){
  if($type == 'eolapi'){
    $entity->content = array(
      'content' => array(
        '#markup' => theme("{$type}_{$entity->type}_{$view_mode}", array(
          'entity' => $entity
        ))
      )
    );
  }
}

//---- SAVE -------------------------------------------------------------------
/**
 * Save the entity.
 */
function eolapi_save($entity){
  $transaction = db_transaction();
  try{
    if(!empty($entity->eid) && !isset($entity->original)){
      $entity->original = entity_load_unchanged('eolapi', $entity->eid);
    }
    field_attach_presave('eolapi', $entity);
    if(!isset($entity->is_new)){
      $entity->is_new = empty($entity->eid);
    }
    if(empty($entity->created)){
      $entity->created = REQUEST_TIME;
    }
    $entity->changed = REQUEST_TIME;
    $entity->timestamp = REQUEST_TIME;
    if(empty($eolapi->created)){
      $eolapi->created = REQUEST_TIME;
    }
    $eolapi->changed = REQUEST_TIME;
    $eolapi->timestamp = REQUEST_TIME;
    $update_eolapi = TRUE;
    module_invoke_all('eolapi_presave', $entity);
    module_invoke_all('entity_presave', $entity, 'eolapi');
    if($entity->is_new || !empty($entity->revision)){
      if(!isset($entity->log)){
        $entity->log = '';
      }
    }elseif(!isset($entity->log) || $entity->log === ''){
      unset($entity->log);
    }
    if(!$entity->is_new && !empty($entity->revision) && $entity->erid){
      $entity->old_erid = $entity->erid;
      unset($entity->erid);
    }
    if($entity->is_new){
      drupal_write_record('eolapi', $entity);
      _eolapi_save_revision($entity);
      field_attach_insert('eolapi', $entity);
      $op = 'insert';
    }else{
      drupal_write_record('eolapi', $entity, 'eid');
      if(!empty($entity->revision)){
        _eolapi_save_revision($entity);
      }else{
        _eolapi_save_revision($entity, 'erid');
        field_attach_update('eolapi', $entity);
        $update_eolapi = FALSE;
      }
      $op = 'update';
    }
    if($update_eolapi){
      db_update('eolapi')->fields(array(
        'erid' => $entity->erid
      ))->condition('eid', $entity->eid)->execute();
    }
    module_invoke_all('eolapi_' . $op, $entity);
    module_invoke_all('entity_' . $op, $entity, 'eolapi');
    $delete = $op == 'update';
    unset($entity->is_new);
    unset($entity->original);
    entity_get_controller('eolapi')->resetCache(array(
      $entity->eid
    ));
    db_ignore_slave();
  }
  catch(Exception $e){
    $transaction->rollback();
    watchdog_exception('eolapi', $e);
    throw $e;
  }
}

/**
 * Helper function to save a revision with the uid of the current user.
 *
 * The resulting revision ID is available afterward in $eolapi->erid.
 */
function _eolapi_save_revision($eolapi, $update = NULL){
  if(isset($update)){
    drupal_write_record('eolapi_revision', $eolapi, $update);
  }else{
    drupal_write_record('eolapi_revision', $eolapi);
  }
}