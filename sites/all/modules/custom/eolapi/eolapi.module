<?php

/**
 * Implementation of hook_entity_info().
 */
function eolapi_entity_info(){
  return array(
    'eolapi' => array(
      'label' => 'Encyclopaedia of Life data',
      'controller class' => 'EOLAPIController',
      'views controller class' => 'EntityDefaultViewsController',
      'base table' => 'eolapi',
      'revision table' => 'eolapi_revision',
      'load hook' => 'eolapi_load',
      'save callback' => 'eolapi_save',
      'uri callback' => 'eolapi_uri',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'eid',
        'revision' => 'erid',
        'bundle' => 'type'
      ),
      'bundle keys' => array(
        'bundle' => 'type'
      ),
      'bundles' => array(
        'search' => array(
          'label' => 'EOL API Search result'
        ),
        'pages' => array(
          'label' => 'EOL API Page'
        ),
        'text' => array(
          'label' => 'EOL API Text'
        ),
        'stillimage' => array(
          'label' => 'EOL API Still image'
        ),
        'youtube' => array(
          'label' => 'EOL API Youtube video'
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE
        ),
        'list' => array(
          'label' => t('List (teaser)'),
          'custom settings' => TRUE
        )
      )
    )
  );
}

/**
 * Implementation of hook_views_api().
 */
function eolapi_views_api(){
  return array(
    'api' => '3',
    'path' => drupal_get_path('module', 'eolapi') . '/views'
  );
}

/**
 * Implementation of hook_menu().
 */
function eolapi_menu(){
  return array(
    'eolapi' => array(
      'title' => 'EOLAPI Callback',
      'description' => 'Endpoint to enable dynamic creation of EOLAPI content.',
      'page callback' => 'eolapi_callback',
      'file' => 'eolapi.ajax.inc',
      'access arguments' => array(
        'access content'
      ),
      'type' => MENU_CALLBACK
    )
  );
}

function eolapi_init(){
  module_load_include('functions.inc', 'eolapi');
  $search_results = eolapi_search(3);
}

//---- VIEW -------------------------------------------------------------------
/**
 * Implementation of hook_theme().
 */
function eolapi_theme(){
  $info = eolapi_entity_info();
  $theme = array();
  module_load_include('theme.inc', 'eolapi');
  foreach($info['eolapi']['bundles'] as $bundle_key => $bundle_info){
    foreach($info['eolapi']['view modes'] as $view_mode => $view_mode_info){
      $theme_name = "eolapi_{$bundle_key}_{$view_mode}";
      $theme[$theme_name] = array(
        'variables' => array(
          'entity' => array()
        ),
        'file' => 'eolapi.theme.inc'
      );
      if(!function_exists("theme_{$theme_name}")){
        // This function doesn't exist, we should use a default.
        if(function_exists("theme_eolapi_{$bundle_key}")){
          $theme[$theme_name]['function'] = "theme_eolapi_{$bundle_key}";
        }else{
          $theme[$theme_name]['function'] = "theme_eolapi";
        }
      }
    }
  }
  return $theme;
}

/**
 * Implementation of hook_entity_view().
 */
function eolapi_entity_view($entity, $type, $view_mode, $langcode){
  if($type == 'eolapi'){
    $entity->content = array(
      'content' => array(
        '#markup' => theme("{$type}_{$entity->type}_{$view_mode}", array(
          'entity' => $entity
        ))
      )
    );
  }
}

//---- SAVE -------------------------------------------------------------------
/**
 * Save the entity.
 */
function eolapi_save($entity){
  $transaction = db_transaction();
  try{
    if(!empty($entity->eid) && !isset($entity->original)){
      $entity->original = entity_load_unchanged('eolapi', $entity->eid);
    }
    field_attach_presave('eolapi', $entity);
    if(!isset($entity->is_new)){
      $entity->is_new = empty($entity->eid);
    }
    if(empty($entity->created)){
      $entity->created = REQUEST_TIME;
    }
    $entity->changed = REQUEST_TIME;
    $entity->timestamp = REQUEST_TIME;
    if(empty($eolapi->created)){
      $eolapi->created = REQUEST_TIME;
    }
    $eolapi->changed = REQUEST_TIME;
    $eolapi->timestamp = REQUEST_TIME;
    $update_eolapi = TRUE;
    module_invoke_all('eolapi_presave', $entity);
    module_invoke_all('entity_presave', $entity, 'eolapi');
    if($entity->is_new || !empty($entity->revision)){
      if(!isset($entity->log)){
        $entity->log = '';
      }
    }elseif(!isset($entity->log) || $entity->log === ''){
      unset($entity->log);
    }
    if(!$entity->is_new && !empty($entity->revision) && $entity->erid){
      $entity->old_erid = $entity->erid;
      unset($entity->erid);
    }
    if($entity->is_new){
      drupal_write_record('eolapi', $entity);
      _eolapi_save_revision($entity);
      field_attach_insert('eolapi', $entity);
      $op = 'insert';
    }else{
      drupal_write_record('eolapi', $entity, 'eid');
      if(!empty($entity->revision)){
        _eolapi_save_revision($entity);
      }else{
        _eolapi_save_revision($entity, 'erid');
        field_attach_update('eolapi', $entity);
        $update_eolapi = FALSE;
      }
      $op = 'update';
    }
    if($update_eolapi){
      db_update('eolapi')->fields(array(
        'erid' => $entity->erid
      ))->condition('eid', $entity->eid)->execute();
    }
    module_invoke_all('eolapi_' . $op, $entity);
    module_invoke_all('entity_' . $op, $entity, 'eolapi');
    $delete = $op == 'update';
    unset($entity->is_new);
    unset($entity->original);
    entity_get_controller('eolapi')->resetCache(array(
      $entity->eid
    ));
    db_ignore_slave();
  }
  catch(Exception $e){
    $transaction->rollback();
    watchdog_exception('eolapi', $e);
    throw $e;
  }
}

/**
 * Helper function to save a revision with the uid of the current user.
 *
 * The resulting revision ID is available afterward in $eolapi->erid.
 */
function _eolapi_save_revision($eolapi, $update = NULL){
  if(isset($update)){
    drupal_write_record('eolapi_revision', $eolapi, $update);
  }else{
    drupal_write_record('eolapi_revision', $eolapi);
  }
}