<?php

/**
 * @file
 * Module file for feeds_multinode_processor.module.
 */
/**
 * Implements hook_feeds_plugins().
 */
function feeds_multinode_processor_feeds_plugins(){
  $info = array();
  $info['FeedsMultiNodeProcessor'] = array(
    'name' => 'Multi-node processor',
    'description' => 'Create and update nodes from multiple content types.',
    'handler' => array(
      'parent' => 'FeedsNodeProcessor',
      'class' => 'FeedsMultiNodeProcessor',
      'file' => 'FeedsMultiNodeProcessor.inc',
      'path' => drupal_get_path('module', 'feeds_multinode_processor')
    )
  );
  return $info;
}

/**
 * Implements hook_schema_alter().
 */
function feeds_multinode_processor_schema_alter(&$schema){
  $schema['feeds_item']['fields']['bundle'] = array(
    'type' => 'varchar',
    'length' => 32,
    'not null' => FALSE,
    'default' => ''
  );
}

function feeds_multinode_processor_menu_alter(&$items){
  $items['import/%feeds_importer/template']['page callback'] = 'feeds_multinode_processor_download_template';
  $items['import/%feeds_importer/template']['file'] = 'feeds_multinode_processor.template.inc';
  $items['import/%feeds_importer/template']['file path'] = drupal_get_path('module', 'feeds_multinode_processor');
  $items['import/%feeds_importer/populated-template']['page callback'] = 'feeds_multinode_processor_download_populated_template';
  $items['import/%feeds_importer/populated-template']['file'] = 'feeds_multinode_processor.template.inc';
  $items['import/%feeds_importer/populated-template']['file path'] = drupal_get_path('module', 'feeds_multinode_processor');
  $items['feeds_multinode_processor/getfile']['page callback'] = 'feeds_multinode_processor_get_populated_template';
  $items['feeds_multinode_processor/getfile']['file'] = 'feeds_multinode_processor.template.inc';
  $items['feeds_multinode_processor/getfile']['file path'] = drupal_get_path('module', 'feeds_multinode_processor');
}

/**
 * Implements hook_permission().
 */
function feeds_multinode_processor_permission(){
  return array(
    'feeds multinode processor allow download' => array(
      'title' => t('Feeds multinode processor allow download'),
      'description' => t('Allow the user to download all of the site\'s data in an Excel template.')
    )
  );
}

/**
 * Generate an entry in the feeds_item table that can be used by the populated
 * Excel template (or any other import).
 */
function feeds_multinode_processor_get_or_generate_feeds_item_entry($entity_type, $entity_id, $id, $guid = FALSE){
  $row = db_select('feeds_item', 'f')->fields('f')->condition('entity_type', $entity_type)->condition('entity_id', $entity_id)->execute()->fetchAssoc();
  if($row){
    return $row;
  }else{
    if(!$guid){
      // Generate an appropriate guid
      $guid = microtime(TRUE);
    }
    $record = array(
      'entity_type' => $entity_type,
      'entity_id' => $entity_id,
      'id' => $id,
      'feed_nid' => 0,
      'imported' => time(),
      'url' => '',
      'guid' => $guid,
      'hash' => 'd41d8cd98f00b204e9800998ecf8427e'
    );
    drupal_write_record('feeds_item', $record);
    return $record;
  }
}

/**
 * Implements hook_feeds_processor_targets_alter().
 *
 * We alter the numeric field types so that fields that are set up with values
 * like:
 *
 * 1|Something
 * 2|Rocking
 * 3|Banana
 *
 * allow the entry of the text "Something", or "Rocking" instead of "1" or "2".
 */
function feeds_multinode_processor_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name){
  $numeric_types = array(
    'list_integer',
    'list_float',
    'list_boolean',
    'number_integer',
    'number_decimal',
    'number_float'
  );
  foreach(field_info_instances($entity_type, $bundle_name) as $name => $instance){
    $info = field_info_field($name);
    if(in_array($info['type'], $numeric_types)){
      $targets[$name]['callback'] = 'feeds_multinode_processor_feeds_set_target_numeric';
    }
  }
}

/**
 * Callback for mapping numerics.
 *
 * Ensure that $value is a numeric to avoid database errors.  This will also map
 * from a value to a key for list fields.
 */
function feeds_multinode_processor_feeds_set_target_numeric($source, $entity, $target, $value){
  if(!is_array($value)){
    $value = array(
      $value
    );
  }
  foreach($value as $k => $v){
    if(!is_numeric($v)){
      // We load the field and try to do the mapping.
      $field = field_info_field($target);
      $key = array_search($v, $field['settings']['allowed_values']);
      if($field && is_numeric($key)){
        $value[$k] = $key;
      }else{
        unset($value[$k]);
      }
    }
  }
  _field_feeds_set_target($source, $entity, $target, $value, FALSE);
}

/**
 * Overlay doesn't handle the file download path well.
 */
function feeds_multinode_processor_admin_paths(){
  return array(
    'import/*/template' => FALSE
  );
}