<?php

/**
 * Implementation of hook_form_FORM_ID_alter().
 * 
 * This allows us to add an option to specify that this is a biological
 * classification, and the specific type (Mammals, Plants, Other).
 */
function itis_term_form_taxonomy_form_vocabulary_alter(&$form, &$form_state, $form_id){
  if(!isset($form_state['confirm_delete'])){
    $vids = variable_get('biological_vids', array());
    $form['biological_classification'] = array(
      '#title' => 'Biological classification',
      '#type' => 'select',
      '#options' => array(
        1 => 'Animal',
        2 => 'Plant/Fungi',
        3 => 'Moneran'
      ),
      '#empty_option' => t('Not a biological classification'),
      '#default_value' => (isset($form['vid']) && isset($vids[$form['vid']['#value']])) ? $vids[$form['vid']['#value']] : 0,
      '#disabled' => isset($form['vid']) ? TRUE : FALSE
    );
    // Add the an additional submit function so that we can tweak the vocabulary.
    $form['#submit'][] = 'itis_term_taxonomy_form_vocabulary_submit';
  }
}

/**
 * Submit function to alter a vocabulary.
 */
function itis_term_taxonomy_form_vocabulary_submit($form, &$form_state){
  if($form_state['values']['biological_classification']){
    $vids = variable_get('biological_vids', array());
    if(!isset($vids[$form_state['values']['vid']])){
      $vids[$form_state['values']['vid']] = $form_state['values']['biological_classification'];
      variable_set('biological_vids', $vids);
      // Add all the required fields to this vocabulary.
      module_load_include('install', 'itis_term');
      foreach(itis_term_fields() as $field){
        $field['field_instance']['bundle'] = $form_state['vocabulary']->machine_name;
        field_create_instance($field['field_instance']);
      }
      foreach(itis_term_groups() as $group){
        $group['bundle'] = $form_state['vocabulary']->machine_name;
        $group = (object)$group;
        field_group_create_field_group($group);
      }
    }
  }
}

/**
 * Implementation of hook_taxonomy_vocabulary_delete().
 */
function itis_term_taxonomy_vocabulary_delete($vocabulary){
  $vids = variable_get('biological_vids', array());
  unset($vids[$vocabulary->vid]);
  variable_set('biological_vids', $vids);
}

/**
 * Get an array of terms for a vocabulary
 */
function itis_term_allowed_values($field, $biological_type = FALSE){
  switch($field['field_name']){
    case 'field_rank':
      if($biological_type){
        switch($biological_type){
          case 1:
            return array(
              'Kingdom' => 'Kingdom',
              'Subkingdom' => 'Subkingdom',
              'Phylum' => 'Phylum',
              'Subphylum' => 'Subphylum',
              'Superclass' => 'Superclass',
              'Class' => 'Class',
              'Subclass' => 'Subclass',
              'Infraclass' => 'Infraclass',
              'Superorder' => 'Superorder',
              'Order' => 'Order',
              'Suborder' => 'Suborder',
              'Infraorder' => 'Infraorder',
              'Superfamily' => 'Superfamily',
              'Family' => 'Family',
              'Subfamily' => 'Subfamily',
              'Tribe' => 'Tribe',
              'Subtribe' => 'Subtribe',
              'Genus' => 'Genus',
              'Subgenus' => 'Subgenus',
              'Species' => 'Species',
              'Subspecies' => 'Subspecies'
            );
            break;
          case 2:
            return array(
              'Kingdom' => 'Kingdom',
              'Subkingdom' => 'Subkingdom',
              'Division' => 'Division',
              'Subdivision' => 'Subdivision',
              'Class' => 'Class',
              'Subclass' => 'Subclass',
              'Order' => 'Order',
              'Suborder' => 'Suborder',
              'Family' => 'Family',
              'Subfamily' => 'Subfamily',
              'Tribe' => 'Tribe',
              'Subtribe' => 'Subtribe',
              'Genus' => 'Genus',
              'Subgenus' => 'Subgenus',
              'Section' => 'Section',
              'Subsection' => 'Subsection',
              'Species' => 'Species',
              'Subspecies' => 'Subspecies',
              'Variety' => 'Variety',
              'Subvariety' => 'Subvariety',
              'Form' => 'Form',
              'Subform' => 'Subform'
            );
            break;
          case 3:
            return array(
              'Kingdom' => 'Kingdom',
              'Subkingdom' => 'Subkingdom',
              'Phylum' => 'Phylum',
              'Subphylum' => 'Subphylum',
              'Superclass' => 'Superclass',
              'Class' => 'Class',
              'Subclass' => 'Subclass',
              'Infraclass' => 'Infraclass',
              'Superorder' => 'Superorder',
              'Order' => 'Order',
              'Suborder' => 'Suborder',
              'Infraorder' => 'Infraorder',
              'Superfamily' => 'Superfamily',
              'Family' => 'Family',
              'Subfamily' => 'Subfamily',
              'Tribe' => 'Tribe',
              'Subtribe' => 'Subtribe',
              'Genus' => 'Genus',
              'Subgenus' => 'Subgenus',
              'Species' => 'Species',
              'Subspecies' => 'Subspecies'
            );
            break;
        }
      }else{
        return array(
          'Class' => 'Class',
          'Division' => 'Division',
          'Family' => 'Family',
          'Form' => 'Form',
          'Genus' => 'Genus',
          'Infraclass' => 'Infraclass',
          'Infraorder' => 'Infraorder',
          'Kingdom' => 'Kingdom',
          'Order' => 'Order',
          'Phylum' => 'Phylum',
          'Section' => 'Section',
          'Species' => 'Species',
          'Subclass' => 'Subclass',
          'Subdivision' => 'Subdivision',
          'Subfamily' => 'Subfamily',
          'Subform' => 'Subform',
          'Subgenus' => 'Subgenus',
          'Subkingdom' => 'Subkingdom',
          'Suborder' => 'Suborder',
          'Subphylum' => 'Subphylum',
          'Subsection' => 'Subsection',
          'Subspecies' => 'Subspecies',
          'Subtribe' => 'Subtribe',
          'Subvariety' => 'Subvariety',
          'Superclass' => 'Superclass',
          'Superfamily' => 'Superfamily',
          'Superorder' => 'Superorder',
          'Tribe' => 'Tribe',
          'Variety' => 'Variety'
        );
      }
      break;
    case 'field_rank':
      break;
  }
}

/**
 * Implementation of hook_form_alter.
 */
function itis_term_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id){
  if($form_id == 'taxonomy_form_term'){
    $vids = variable_get('biological_vids', array());
    if(isset($vids[$form['vid']['#value']])){
      // WHAT A FUCKING CLUDGE!
      $form['field_rank'][$form['field_rank']['#language']]['#options'] = itis_term_allowed_values(array(
        'field_name' => 'field_rank'
      ), $vids[$form['vid']['#value']]);
      // Set fields to hide/appear depending on values in other fields.
      $form['field_unit_name2']['#states'] = array(
        'visible' => array(
          ':input[name="field_unit_name1[und][0][value]"]' => array(
            'filled' => TRUE
          )
        )
      );
      $form['field_unit_name3']['#states'] = array(
        'visible' => array(
          ':input[name="field_unit_name2[und][0][value]"]' => array(
            'filled' => TRUE
          )
        )
      );
      $form['field_unit_name4']['#states'] = array(
        'visible' => array(
          ':input[name="field_unit_name3[und][0][value]"]' => array(
            'filled' => TRUE
          )
        )
      );
      $form['field_unit_indicator1']['#states'] = array(
        'visible' => array(
          ':input[name="field_unit_name1[und][0][value]"]' => array(
            'filled' => TRUE
          )
        )
      );
      $form['field_unit_indicator2']['#states'] = array(
        'visible' => array(
          ':input[name="field_unit_name2[und][0][value]"]' => array(
            'filled' => TRUE
          )
        )
      );
      $form['field_unit_indicator3']['#states'] = array(
        'visible' => array(
          ':input[name="field_unit_name3[und][0][value]"]' => array(
            'filled' => TRUE
          )
        )
      );
      $form['field_unit_indicator4']['#states'] = array(
        'visible' => array(
          ':input[name="field_unit_name4[und][0][value]"]' => array(
            'filled' => TRUE
          )
        )
      );
    }
  }
}