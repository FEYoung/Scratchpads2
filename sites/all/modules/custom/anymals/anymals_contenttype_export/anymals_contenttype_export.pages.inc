<?php

/**
 * Create the XML for an entity form.
 * 
 * Returns the XML which describes an entity/bundle form.  Note, this defaults
 * to the darwincore node form.
 * 
 *
 * // Alternative code to simply get an entity form.
  $entity_info = entity_get_info($entity_type);
  $function = $entity_info['form callback'];
  $entity = (object)array(
    $entity_info['entity keys']['bundle'] => $bundle
  );
  $form = $function($entity);
 */
function anymals_contenttype_export_get_xml($entity_type = 'node', $bundles = 'specimen_observation,location'){
  // Convert the bundles to an array.
  $bundles = explode(',', $bundles);
  // Create a new simple XML object to which we will attach the fields.
  $ecml = new SimpleXMLElement('<ecml/>');
  $ecml->addAttribute('version', '1');
  $model = $ecml->addChild('model');
  $submission = $model->addChild('submission');
  $submission->addAttribute('projectName', 'Scratchpads'); //FIXME - This may need to be dynamic
  $submission->addAttribute('allowDownloadEdits', 'false');
  $submission->addAttribute('versionNumber', '2.1');
  $uploadToServer = $model->addChild('uploadToServer', url('ecml/upload', array(
    'absolute' => TRUE
  )));
  $downloadFromServer = $model->addChild('downloadFromServer', url('ecml/download', array(
    'absolute' => TRUE
  )));
  foreach($bundles as $key => $bundle){
    $form = $ecml->addChild('form');
    $form->addAttribute('name', $bundle);
    // We set ALL fields as the key, as we're not going to overwrite data and
    // will handle errors on the server.
    $form->addAttribute('key', 'autokey');
    $form->addAttribute('num', $key + 1);
    $uuid_and_version = _anymals_contenttype_export_get_form_uuid_and_version($entity_type, $bundle);
    $form->addAttribute('uuid', $uuid_and_version['uuid']);
    $form->addAttribute('version', $uuid_and_version['version']);
    $form->addAttribute('isPublic', 'false');
    $entity_info = entity_get_info($entity_type);
    $form->addAttribute('verboseName', variable_get('site_name', 'Drupal') . ' | ' . $entity_info['bundles'][$bundle]['label']);
    // Get the default language
    $language = variable_get('language_default', 'en');
    if(is_object($language)){
      $language = $language->language;
    }
    $form->addAttribute('language', $language);
    if(!$key){
      $form->addAttribute('main', 'true');
    }
    $autokey = $form->addChild('input');
    $autokey->addAttribute('ref', 'autokey');
    $autokey->addAttribute('genkey', 'true');
    $autokey->addAttribute('required', 'true');
    $autokey->addAttribute('hidden', 'true');
    $autokey->addChild('label', 'Autogenerated key');
    foreach(_anymals_contenttype_export_get_sorted_fields($entity_type, $bundle) as $field){
      _anymals_contenttype_export_add_field_to_xml($field, $form);
    }
  }
  return $ecml->asXML();
}

/**
 * Helper function to get a UUID for a specific form.
 */
function _anymals_contenttype_export_get_form_uuid_and_version($entity_type, $bundle){
  $uuid_and_version = db_select('anymals_contenttype_export_uuids', 'a')->fields('a', array(
    'uuid',
    'version'
  ))->condition('entity_type', $entity_type)->condition('bundle', $bundle)->execute()->fetchAssoc();
  if(!$uuid_and_version){
    $uuid = uuid_generate();
    db_insert('anymals_contenttype_export_uuids')->fields(array(
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'uuid' => $uuid
    ))->execute();
    $uuid_and_version = array(
      'uuid' => $uuid,
      'version' => 1
    );
  }
  return $uuid_and_version;
}

function xml_deliver($page_callback_result){
  drupal_add_http_header('Content-Type', 'text/xml; charset=utf-8');
  print $page_callback_result;
}

/**
 * Helper function which adds an individual field to an XML object.
 */
function _anymals_contenttype_export_add_field_to_xml($field_instance, SimpleXMLElement &$xml){
  $input = FALSE;
  // FIXME - There are far more widgets than this available, we'll need to fix
  // this code to work with the rest.
  switch($field_instance['widget']['type']){
    case 'gm3_point_gm3':
    case 'gm3_combination_gm3':
    case 'gm3_point_text':
    case 'gm3_combination_text':
      $input = $xml->addChild('location');
      $input->addChild('label', $field_instance['label']);
      $input->addAttribute('ref', $field_instance['field_name']);
      $input->addAttribute('required', ($field_instance['required'] ? 'true' : 'false'));
      break;
    case 'text_textfield':
    case 'text_textarea_with_summary':
    case 'text_textarea':
      $input = $xml->addChild('input');
      $input->addChild('label', $field_instance['label']);
      $input->addAttribute('ref', $field_instance['field_name']);
      $input->addAttribute('required', ($field_instance['required'] ? 'true' : 'false'));
      break;
    case 'number':
      break;
    case 'user_reference_autocomplete':
      break;
    case 'date_text':
      break;
    case 'taxonomy_autocomplete':
      break;
    case 'options_select':
    case 'select':
      $field = field_info_field($field_instance['field_name']);
      if(count($field['settings']['allowed_values'])){
        if($field['cardinality'] == 1){
          $input = $xml->addChild('select1');
        }else{
          $input = $xml->addChild('select');
        }
        $input->addChild('label', $field_instance['label']);
        $input->addAttribute('ref', $field_instance['field_name']);
        $input->addAttribute('required', ($field_instance['required'] ? 'true' : 'false'));
        foreach($field['settings']['allowed_values'] as $key => $value){
          $item = $input->addChild('item');
          $item->addChild('label', $value);
          $item->addChild('value', $key);
        }
      }
      break;
  }
}

function _anymals_contenttype_export_get_sorted_fields($entity_type, $bundle){
  // Get the entity info so that we know what label to give this entity's label
  // field (e.g. Title for node).
  $entity_info = entity_get_info($entity_type);
  // Get the fields and the groups.
  $fields = field_info_instances($entity_type, $bundle);
  $groups = field_group_info_groups($entity_type, $bundle, 'form');
  $sorted_fields = array();
  // Create an array of tab names
  $tab_groups = array();
  foreach($groups as $key => $group){
    if(empty($group->parent_name)){
      $tab_groups[$key] = (array)$group;
      unset($groups[$key]);
    }
  }
  // Loop through each tab set, and get the tabs ordered.
  foreach($tab_groups as $tab_group_key => $tab_group){
    $tabs = array();
    foreach($groups as $group_key => $group){
      if($group->parent_name == $tab_group_key){
        $tabs[$group_key] = (array)$group;
      }
    }
    uasort($tabs, '_anymals_contenttype_export_sort_tabs');
    $tab_fields = array();
    foreach($tabs as $key => $tab){
      $fields_to_sort = array();
      foreach($tab['children'] as $field_name){
        if(isset($fields[$field_name])){
          $fields_to_sort[$field_name] = $fields[$field_name];
          unset($fields[$field_name]);
        }
      }
      uasort($fields_to_sort, '_anymals_contenttype_export_sort_fields');
      $tab_fields = array_merge($tab_fields, $fields_to_sort);
    }
    $tab_groups[$tab_group_key] = array(
      'widget' => array(
        'weight' => $tab_group['weight']
      ),
      'fields' => $tab_fields
    );
  }
  // Add the fields to the groups and sort again.
  $sorted_fields = array_merge($fields, $tab_groups);
  uasort($sorted_fields, '_anymals_contenttype_export_sort_fields');
  // Finally, flatten the tabs.
  $flattened_fields = array();
  foreach($sorted_fields as $key => $field){
    if(isset($field['fields'])){
      foreach($field['fields'] as $sub_key => $sub_field){
        $flattened_fields[$sub_key] = $sub_field;
      }
    }else{
      $flattened_fields[$key] = $field;
    }
  }
  return $flattened_fields;
}

/**
 * Sort function for sorting tabs (alphabetical too).
 */
function _anymals_contenttype_export_sort_tabs($a, $b){
  if($a['weight'] == $b['weight']){return strcasecmp($b['label'], $a['label']);}
  return ($a['weight'] < $b['weight']) ? -1 : 1;
}

/**
 * Sort function for sorting fields.
 */
function _anymals_contenttype_export_sort_fields($a, $b){
  if($a['widget']['weight'] == $b['widget']['weight']){return strcasecmp($a['label'], $b['label']);}
  return ($a['widget']['weight'] < $b['widget']['weight']) ? -1 : 1;
}