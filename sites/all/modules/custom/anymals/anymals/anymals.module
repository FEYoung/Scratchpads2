<?php

/**
 * Implements hook_ctools_plugin_api
 */
function anymals_ctools_plugin_api(){
  list($module, $api) = func_get_args();
  if($module == "feeds" && $api == "feeds_importer_default"){return array(
      "version" => "1"
    );}
}

/**
 * Implements hook_node_info().
 */
function anymals_node_info(){
  // Create an content type for every importer.  This is unfortunately necessary
  $types = array();
  $results = db_select('anymals_client_ids', 'a')->fields('a')->execute();
  $export = array();
  module_load_include('pages.inc', 'anymals_contenttype_export');
  foreach($results as $row){
    foreach(array_filter(variable_get('anymals_forms', array(
      'specimen_observation'
    ))) as $bundle){
      $types[md5('anymals_plants_' . $bundle . '_' . $row->client_id)] = array(
        'name' => t('anymals+plants importer'),
        'base' => 'node_content',
        'description' => '',
        'has_title' => TRUE,
        'title_label' => 'Importer',
        'help' => '',
        'locked' => TRUE
      );
    }
  }
  return $types;
}

/**
 * Implements hook_preprocess_page()
 * 
 * Remove the anymals+plants content types from the content type overview.
 */
function anymals_preprocess_page(&$vars){
  if($_GET['q'] == 'admin/structure/types'){
    foreach($vars['page']['content']['system_main']['node_table']['#rows'] as $key => $values){
      if(strpos($values[0], 'anymals+plants importer') === 0){
        unset($vars['page']['content']['system_main']['node_table']['#rows'][$key]);
      }
    }
  }
}

/**
 * Implements scratchpads_backend_node_types_alter()
 */
function anymals_scratchpads_backend_node_types_alter(&$node_types){
  foreach(array_keys(anymals_node_info()) as $id){
    $node_types[$id]->disabled = TRUE;
  }
}

/**
 * Implements hook_feeds_importer_default().
*/
function anymals_feeds_importer_default(){
  // Create an importer for each registered ID and each form (e.g. 2 forms, and
  // 2 users = 2*2 importers).
  $results = db_select('anymals_client_ids', 'a')->fields('a')->execute();
  $export = array();
  module_load_include('pages.inc', 'anymals_contenttype_export');
  foreach($results as $row){
    foreach(array_filter(variable_get('anymals_forms', array(
      'specimen_observation'
    ))) as $bundle){
      $feeds_importer = new stdClass();
      $feeds_importer->disabled = FALSE; /* Edit this to true to make a default feeds_importer disabled initially */
      $feeds_importer->api_version = 1;
      $feeds_importer->id = 'anymals_plants_' . $bundle . '_' . $row->client_id;
      $feeds_importer->config = array(
        'name' => 'anymals+plants (' . $row->client_id . ')',
        'description' => 'Periodically import records from the anymals+plants server for the client ' . $row->client_id,
        'fetcher' => array(
          'plugin_key' => 'FeedsHTTPFetcher',
          'config' => array(
            'auto_detect_feeds' => FALSE,
            'use_pubsubhubbub' => FALSE,
            'designated_hub' => '',
            'request_timeout' => NULL
          )
        ),
        'parser' => array(
          'plugin_key' => 'FeedsXPathParserXML',
          'config' => array(
            'sources' => array(
              'xpathparser:0' => 'UnitID'
            ),
            'rawXML' => array(
              'xpathparser:0' => 0
            ),
            'context' => '//DataSets/DataSet[DatasetGUID="' . $row->client_id . '"]/Units/Unit',
            'exp' => array(
              'errors' => 0,
              'tidy' => 0,
              'tidy_encoding' => 'UTF8',
              'debug' => array(
                'context' => 0,
                'xpathparser:0' => 0
              )
            ),
            'allow_override' => 0
          )
        ),
        'processor' => array(
          'plugin_key' => 'FeedsNodeProcessor',
          'config' => array(
            'expire' => '-1',
            'author' => 0,
            'authorize' => 0,
            'mappings' => array(
              array(
                'source' => 'xpathparser:0',
                'target' => 'guid',
                'unique' => TRUE
              )
            ),
            'update_existing' => '2',
            'input_format' => 'plain_text',
            'skip_hash_check' => 0,
            'bundle' => $bundle
          )
        ),
        'content_type' => md5('anymals_plants_' . $bundle . '_' . $row->client_id),
        'update' => 0,
        'import_period' => 86400,
        'expire_period' => 3600,
        'import_on_create' => 0,
        'process_in_background' => 0
      );
      $fields = _anymals_contenttype_export_get_sorted_fields('node', $bundle);
      foreach($fields as $key => $field){
        $value = FALSE;
        switch($field['widget']['type']){
          case 'options_select':
          case 'select':
            $label = $field['label'];
            $field = field_info_field($key);
            if(count($field['settings']['allowed_values'])){
              if($field['cardinality'] == 1){
                $value = 'UnitExtension/SightingForms/form/select1[label="' . $label . '"]/inputValue';
              }else{
                $value = 'UnitExtension/SightingForms/form/select[label="' . $label . '"]/inputValue';
              }
            }
            break;
          case 'gm3_point_gm3':
          case 'gm3_combination_gm3':
          case 'gm3_point_text':
          case 'gm3_combination_text':
            // FIXME - This needs adding.
            break;
          case 'text_textfield':
          case 'text_textarea_with_summary':
          case 'text_textarea':
            $value = 'UnitExtension/SightingForms/form/input[label="' . $field['label'] . '"]/inputValue';
            break;
          case 'number':
            break;
          case 'user_reference_autocomplete':
            break;
          case 'date_text':
            break;
          case 'taxonomy_autocomplete':
            break;
        }
        if($value){
          $count = count($feeds_importer->config['parser']['config']['sources']);
          $feeds_importer->config['parser']['config']['sources']['xpathparser:' . $count] = $value;
          $feeds_importer->config['parser']['config']['rawXML']['xpathparser:' . $count] = 0;
          $feeds_importer->config['parser']['config']['exp']['debug']['xpathparser:' . $count] = 0;
          $feeds_importer->config['processor']['config']['mappings'][] = array(
            'source' => 'xpathparser:' . $count,
            'target' => $key,
            'unique' => FALSE
          );
        }
      }
      $export[$feeds_importer->id] = $feeds_importer;
    }
  }
  return $export;
}

/**
 * Implements hook_menu()
 */
function anymals_menu(){
  return array(
    'admin/config/services/anymals' => array(
      'title' => 'anymals+plants configuration',
      'description' => 'Enter your anymals+plants configuration to allow your Scratchpad to "talk" to the anymals+plants service.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'anymals_configuration_form'
      ),
      'file' => 'anymals.pages.inc',
      'access arguments' => array(
        'administer anymals'
      )
    )
  );
}

/**
 * Implements hook_permission()
 */
function anymals_permission(){
  return array(
    'administer anymals' => array(
      'title' => t('Administer anymals+plants'),
      'description' => t('Perform administration tasks for anymals+plants.')
    )
  );
}

/**
 * Implements hook_scratchpads_default_permissions()
 */
function anymals_scratchpads_default_permissions(){
  return array(
    'maintainer' => array(
      'administer anymals'
    )
  );
}

/**
 * Implementation of hook_form_alter().
 */
function anymals_form_node_type_form_alter(&$form, &$form_state){
  $form['#submit'][] = 'anymals_node_type_form_submit';
}

/**
 * Submit function for updating the shizzle.
 */
function anymals_node_type_form_submit($form, $form_state){
  if(($anymals_token = variable_get('anymals_token', FALSE)) !== FALSE){
    module_load_include('pages.inc', 'anymals');
    anymals_configuration_form_submit(FALSE, array(
      'values' => array(
        'anymals_token' => $anymals_token,
        'anymals_key' => variable_get('anymals_key', ''),
        'anymals_forms' => array_filter(variable_get('anymals_forms', array()))
      )
    ));
  }
}