<?php

/**
 * Implementation of hook_facetapi_facet_info().
 */
function scratchpads_biblio_search_facetapi_facet_info($searcher_info){
  // Facets are usually associated with the type of content stored in the index.
  if(isset($searcher_info['types']['node'])){return array(
      'im_biblio_contributor' => array(
        'name' => 'im_biblio_contributor',
        'label' => t('Biblio: Contributor'),
        'description' => t('Biblio: Contributor'),
        'query types' => array(
          'term'
        ),
        'map callback' => 'scratchpads_biblio_search_map_callback',
        'map options' => array(
          'biblio_contributor'
        )
      ),
      'tus_biblio_year' => array(
        'name' => 'tus_biblio_year',
        'label' => t('Biblio: Publication year'),
        'description' => t('Biblio: Publication year'),
        'query types' => array(
          'term'
        )
      ),
      'tus_biblio_secondary_title' => array(
        'name' => 'tus_biblio_secondary_title',
        'label' => t('Biblio: Secondary title'),
        'description' => t('Biblio: Secondary title'),
        'query types' => array(
          'term'
        ),
        /*
         * Map be possible to normalise the biblio_secondary_title field to
         * allow this to work nicely.  Normalisation could be done at the
         * hook_apachesolr_update_index() stage.
         *   
        'map callback' => 'scratchpads_biblio_search_map_callback',
        'map options' => array(
          'biblio_secondary_title'
          
        )*/
      ),
      'tus_biblio_type' => array(
        'name' => 'tus_biblio_type',
        'label' => t('Biblio: Type'),
        'description' => t('Biblio: Type'),
        'query types' => array(
          'term'
        ),
        'map callback' => 'scratchpads_biblio_search_map_callback',
        'map options' => array(
          'biblio_type'
        )
      )
    );}
  return array();
}

/**
 * Implements hook_ctools_plugin_api().
 */
function scratchpads_biblio_search_ctools_plugin_api($owner, $api){
  if($owner == 'facetapi'){return array(
      'version' => 1
    );}
}

/**
 * Implements hook_facetapi_default_facet_settings().
 */
function scratchpads_biblio_search_facetapi_default_facet_settings(){
  $facets = array();
  foreach(scratchpads_biblio_search_facetapi_facet_info(array(
    'types' => array(
      'node' => TRUE
    )
  )) as $facet_id => $facet_values){
    $facet = new stdClass();
    $facet->disabled = FALSE;
    $facet->api_version = 1;
    $facet->name = 'apachesolr@solr:block:' . $facet_id;
    $facet->searcher = 'apachesolr@solr';
    $facet->realm = 'block';
    $facet->facet = $facet_id;
    $facet->enabled = TRUE;
    $facet->settings = array(
      'weight' => 0,
      'widget' => 'facetapi_links',
      'filters' => array(),
      'active_sorts' => array(
        'active' => 'active',
        'count' => 'count',
        'display' => 'display'
      ),
      'sort_weight' => array(
        'active' => -50,
        'count' => -49,
        'display' => -48
      ),
      'sort_order' => array(
        'active' => 3,
        'count' => 3,
        'display' => 4
      ),
      'empty_behavior' => 'none',
      'soft_limit' => 20,
      'show_expanded' => 0
    );
    $facets[] = $facet;
  }
  return $facets;
}

/**
 * Map keys to values
 */
function scratchpads_biblio_search_map_callback($values, $options){
  switch($options[0]){
    case 'biblio_type':
      $result = db_select('biblio_types', 'b')->fields('b', array(
        'tid',
        'name'
      ))->condition('tid', $values, 'IN')->execute();
      $map = array();
      while($record = $result->fetchAssoc()){
        $map[$record['tid']] = $record['name'];
      }
      return $map;
    case 'biblio_contributor':
      $result = db_select('biblio_contributor_data', 'b')->fields('b', array(
        'cid',
        'name'
      ))->condition('cid', $values, 'IN')->execute();
      $map = array();
      while($record = $result->fetchAssoc()){
        $map[$record['cid']] = $record['name'];
      }
      return $map;
  }
}

/**
 * Implementation of hook_apachesolr_update_index($document, $node, $namespace) {
 */
function scratchpads_biblio_search_apachesolr_update_index($document, $node, $namespace){
  if($node->type == 'biblio'){
    foreach($node as $key => $value){
      if(substr($key, 0, 7) == 'biblio_'){
        if(is_string($value)){
          $document->addField("tus_$key", $value);
        }else if(is_array($value)){
          switch($key){
            case 'biblio_contributors':
              foreach($value as $contributor){
                $document->addField('im_biblio_contributor', $contributor['cid']);
              }
              break;
          }
        }
      }
    }
    $style = biblio_get_style();
    $base = variable_get('biblio_base', 'biblio');
    $document->content .= strip_tags(theme('biblio_long', array(
      'node' => $node,
      'base' => $base,
      'style' => $style
    )));
    $document->teaser .= strip_tags(theme('biblio_style', array(
      'node' => $node,
      'base' => $base,
      'style_name' => $style
    )));
  }
}