<?php

/**
 * Implements hook_theme().
 * 
 * Theme the user edit/create form.
 */
function scratchpads_user_theme(){
  return array(
    'scratchpads_user_register_form' => array(
      'file' => 'scratchpads_user.theme.inc',
      'render element' => 'form'
    )
  );
}

/**
 * Implements hook_admin_paths().
 * 
 * Add the user/register as an admin path (the registration form looks 100x
 * better in an overlay).
 */
function scratchpads_user_admin_paths(){
  return array(
    'user/register' => TRUE
  );
}

/**
 * Implements hook_menu_alter().
 * 
 * Override the admin/people page to add columns and display stub users
 * correctly.
 * 
 * Alter the user_reference/autocomplete function so that we can make the names
 * look a little more beautiful.
 */
function scratchpads_user_menu_alter(&$items){
  $items['admin/people']['page callback'] = 'scratchpads_user_admin';
  $items['admin/people']['file'] = 'scratchpads_user.admin.inc';
  $items['admin/people']['module'] = 'scratchpads_user';
  $items['user_reference/autocomplete/%/%/%']['page callback'] = 'scratchpads_user_reference_autocomplete';
}

/**
 * NOTE, the following two functions are directly copied from the user_reference
 * module, and should be updated if they are updated.
 */
function scratchpads_user_reference_autocomplete($entity_type, $bundle, $field_name, $string = ''){
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);
  $options = array(
    'string' => $string,
    'match' => $instance['widget']['settings']['autocomplete_match'],
    'limit' => 10
  );
  $references = scratchpads_user_reference_potential_references($field, $options);
  $matches = array();
  foreach($references as $id => $row){
    // Markup is fine in autocompletion results (might happen when rendered
    // through Views) but we want to remove hyperlinks.
    $suggestion = preg_replace('/<a href="([^<]*)">([^<]*)<\/a>/', '$2', $row['rendered']);
    // Remove link tags Add a class wrapper for a few required CSS overrides.
    $matches[$row['title'] . " [uid:$id]"] = '<div class="reference-autocomplete">' . $suggestion . '</div>';
  }
  drupal_json_output($matches);
}

function scratchpads_user_reference_potential_references($field, $options = array()){
  // Fill in default options.
  $options += array(
    'string' => '',
    'match' => 'contains',
    'ids' => array(),
    'limit' => 0
  );
  $results = &drupal_static(__FUNCTION__, array());
  // Create unique id for static cache.
  $cid = $field['field_name'] . ':' . $options['match'] . ':' . ($options['string'] !== '' ? $options['string'] : implode('-', $options['ids'])) . ':' . $options['limit'];
  if(!isset($results[$cid])){
    $references = FALSE;
    if(module_exists('views') && !empty($field['settings']['view']['view_name'])){
      $references = _user_reference_potential_references_views($field, $options);
    }
    if($references === FALSE){
      $references = scratchpads_user_reference_potential_references_standard($field, $options);
    }
    // Store the results.
    $results[$cid] = !empty($references) ? $references : array();
  }
  return $results[$cid];
}

/**
 * Scratchpads customised version of _user_reference_potential_references_standard
 * from the user_reference module.
 */
function scratchpads_user_reference_potential_references_standard($field, $options){
  // Avoid useless work.
  $filter_roles = array_filter($field['settings']['referenceable_roles']);
  $filter_status = array_filter($field['settings']['referenceable_status']);
  if(!count($filter_status) && !count($filter_roles)){return array();}
  $query = db_select('users', 'u')->fields('u')->addMetaData('id', ' _user_reference_potential_references_standard')->addMetaData('field', $field)->addMetaData('options', $options);
  // Enable this filter only if any statuses checked (and not both).
  if(count($filter_status) == 1){
    $query->condition('u.status', array_keys($filter_status), 'IN');
  }
  // Skip filter when "authenticated user" choosen.
  if($filter_roles && !isset($filter_roles[DRUPAL_AUTHENTICATED_RID])){
    $query->join('users_roles', 'r', 'u.uid = r.uid');
    $query->condition('r.rid', array_keys($filter_roles), 'IN');
  }
  if($options['string'] !== ''){
    switch($options['match']){
      case 'contains':
        $query->condition('u.name', '%' . $options['string'] . '%', 'LIKE');
        break;
      case 'starts_with':
        $query->condition('u.name', $options['string'] . '%', 'LIKE');
        break;
      case 'equals':
      default: // no match type or incorrect match type: use "="
        $query->condition('u.name', $options['string'], '=');
        break;
    }
  }
  if($options['ids']){
    $query->condition('u.uid', $options['ids'], 'IN');
  }
  // Explicitly exclude the anonymous user.
  $query->condition('u.uid', 0, '<>');
  if($options['limit']){
    $query->range(0, $options['limit']);
  }
  $query->orderBy('u.name');
  $result = $query->execute()->fetchAll();
  $references = array();
  foreach($result as $account){
    $references[$account->uid] = array(
      'title' => $account->name,
      'rendered' => check_plain(format_username($account))
    );
  }
  return $references;
}

/**
 * 
 * Implements hook_ENTITY_TYPE_load().
 * 
 * Add the "stub_user" property, and also set the name to the given name/surname
 * fields.
 */
function scratchpads_user_user_load($entities){
  // For entitites with a dummy username, use the name/surname
  foreach($entities as $entity_id => $entity){
    if($entity->uid && empty($entity->pass)){
      // Is this user just a stub - cannot login
      $entities[$entity_id]->stub_user = true;
      // Following edited as it throws up an error on install with UID 1.
      $new_name = FALSE;
      preg_match('/(.*) [0-9]*$/', $entities[$entity_id]->name, $matches);
      if(count($matches) == 2){
        $entities[$entity_id]->name = $matches[1];
      }
    }
  }
  return $entities;
}

/**
 * Implements hook_module_implements_alter()
 * 
 * Execute our form_alter functions last.
 */
function scratchpads_user_module_implements_alter(&$imps, $hook){
  if($hook == 'form_alter'){
    if(isset($imps['scratchpads_user'])){
      $this_module = $imps['scratchpads_user'];
      unset($imps['scratchpads_user']);
      $imps['scratchpads_user'] = $this_module;
    }
  }
}

/**
 * Helper function to replace a submit handler in a form with any other number of handlers
 */
function _scratchpads_user_replace_submit_handler(&$form, $origin_handler, $handlers){
  if(!isset($form['actions']['submit']['#submit'])){
    $form['actions']['submit']['#submit'] = $handlers;
  }else{
    $pos = array_search($origin_handler, $form['actions']['submit']['#submit']);
    if($pos === FALSE){
      $form['actions']['submit']['#submit'] = array_merge($handlers, $form['actions']['submit']['#submit']);
    }else{
      array_splice($form['actions']['submit']['#submit'], $pos, 1, $handlers);
    }
  }
}

/**
 * Implement hook_form_FORM_ID_alter().
 */
function scratchpads_user_form_user_register_form_alter(&$form, &$form_state){
  _scratchpads_user_form_alter($form, $form_state);
  if(count($form_state['input']) && !isset($form_state['input']['create_user_account'])){
    $handlers = array(
      'scratchpads_user_register_form_pre_submit',
      'user_register_submit',
      'scratchpads_user_register_form_post_submit'
    );
    _scratchpads_user_replace_submit_handler($form, 'user_register_submit', $handlers);
  }
  array_unshift($form['#validate'], 'scratchpads_user_user_register_validate');
}

/**
 * Implement hook_form_FORM_ID_alter().
 */
function scratchpads_user_form_user_profile_form_alter(&$form, &$form_state){
  global $user;
  _scratchpads_user_form_alter($form, $form_state);
  if(isset($form['#user']->stub_user)){
    $form['create_user_account']['#default_value'] = 0;
    // Get rid of the crap that we don't need (biblio, etc).
    unset($form['biblio_fieldset']);
    unset($form['overlay_control']);
    unset($form['timezone']);
    unset($form['comment_notify_settings']);
    unset($form['contact']);
    unset($form['legal']);
    // Set the correct user name, as we may have removed a number from the end
    $row = db_select('users', 'u')->fields('u', array(
      'name'
    ))->condition('uid', $form['#user']->uid)->execute()->fetchCol(0);
    $form['account']['name']['#default_value'] = array_pop($row);
  }else{
    $form['create_user_account']['#default_value'] = 1;
    if($user->uid == 1){
      $form['create_user_account']['#disabled'] = true;
      if(count($form_state['input'])){
        $form_state['input']['create_user_account'] = 1;
      }
    }
  }
  if(count($form_state['input']) && !isset($form_state['input']['create_user_account'])){
    $handlers = array(
      'scratchpads_user_register_form_pre_submit_set_name',
      'user_profile_form_submit',
      'scratchpads_user_register_form_post_submit_clear_error'
    );
    _scratchpads_user_replace_submit_handler($form, 'user_register_submit', $handlers);
    $form['#validate'][] = 'scratchpads_user_allow_picture_validate';
  }
  foreach(element_children($form) as $key){
    if(isset($form[$key]['#type']) && $form[$key]['#type'] == 'fieldset' && (!isset($form[$key]['#collapsible']) || $form[$key]['#collapsible'])){
      $form[$key]['#collapsed'] = TRUE;
    }
  }
}

/**
 * 
 * helper function - make alterations to both the user_profile_form() & user_register_form() forms
 */
function _scratchpads_user_form_alter(&$form, &$form_state){
  global $user;
  $form['account']['#type'] = 'fieldset';
  $form['account']['#title'] = t('User account settings');
  if($user->uid > 0){
    $form['account']['#states'] = array(
      // Hide the settings when the cancel notify checkbox is disabled.
      'invisible' => array(
        'input[name="create_user_account"]' => array(
          'checked' => FALSE
        )
      )
    );
    $form['legal']['#states'] = array(
      // Hide the settings when the cancel notify checkbox is disabled.
      'invisible' => array(
        'input[name="create_user_account"]' => array(
          'checked' => FALSE
        )
      )
    );
    $form['create_user_account'] = array(
      '#type' => 'checkbox',
      '#title' => t('Allow user login?'),
      '#description' => t("Do you want to create a user account for this user so they can log into the website?"),
      '#default_value' => 1,
      '#disabled' => ($form['#user']->uid ? 1 : 0)
    );
  }else{
    $form['create_user_account'] = array(
      '#type' => 'hidden',
      '#value' => 1
    );
  }
  $form['#fields'] = field_info_instances($form['#entity_type'], $form['#bundle']);
  // Add the theme function to make this form look better
  array_unshift($form['#theme'], 'scratchpads_user_register_form');
  // If the user isn't creating a user account, limit the validation errors to email & extra fields
  if(count($form_state['input']) && !isset($form_state['input']['create_user_account']) && (!$form['#user']->uid || $form_state['input']['name'] == '')){
    $form['actions']['submit']['#limit_validation_errors'] = array(
      array(
        'mail'
      ),
      array(
        'parent_build_cache_id'
      )
    );
    foreach($form['#fields'] as $field_name => $field){
      $form['actions']['submit']['#limit_validation_errors'][] = array(
        $field_name
      );
    }
  }
}

/**
 * Alter the triggering element to allow picture upload.
 */
function scratchpads_user_allow_picture_validate($form, &$form_state){
  if(isset($form_state['values']['picture_upload']) && is_object($form_state['values']['picture_upload'])){
    $form_state['triggering_element']['#limit_validation_errors'][] = array(
      'picture_upload'
    );
  }
}

/**
 * Validate the user register form so that we can add an email address if we are
 * not allowing login!
 */
function scratchpads_user_user_register_validate($form, &$form_state){
  if(!$form_state['values']['create_user_account']){
    $errors = form_get_errors();
    if(is_array($errors) && isset($errors['mail'])){
      unset($errors['mail']);
      form_clear_error();
      foreach($errors as $key => $msg){
        form_set_error($key, $msg);
      }
    }
    global $base_url;
    $url = parse_url($base_url);
    $form_state['values']['mail'] = uniqid('', TRUE) . '@' . $url['host'];
  }
}

/**
 * Submit function called before user_register_submit()
 * Used to manipulate the values before the user is saved
 * @param array $form
 * @param array $form_state
 */
function scratchpads_user_register_form_pre_submit($form, &$form_state){
  $form_state['values']['administer_users'] = 1;
  scratchpads_user_register_form_pre_submit_set_name($form, $form_state);
}

/**
 * Submit function simply to clear the errors displayed in user_register_submit.
 */
function scratchpads_user_register_form_post_submit_clear_error($form, &$form_state){
  drupal_get_messages('error');
  if(isset($form_state['values']['uid']) && $form_state['values']['uid']){
    $form_state['redirect'] = 'user/' . $form_state['values']['uid'];
  }
}

/**
 * Submit function to set the name.
 */
function scratchpads_user_register_form_pre_submit_set_name($form, &$form_state){
  // Don't do anything if this is a login user
  if($form_state['values']['create_user_account']){return;}
  // Set the name
  $name = '';
  foreach(array(
    'field_user_title',
    'field_user_given_names',
    'field_user_family_name'
  ) as $field_name){
    if(@isset($form_state['values'][$field_name][LANGUAGE_NONE][0]['value'])){
      $name = $name . ' ' . $form_state['values'][$field_name][LANGUAGE_NONE][0]['value'];
    }
    $name = trim($name);
  }
  // Check this name does not exist, else we add a number to the end.
  $results = db_select('users', 'u')->fields('u', array(
    'name'
  ))->condition('name', "$name%", 'LIKE')->condition('uid', (@isset($form['#user']->uid) ? $form['#user']->uid : ''), '!=')->execute();
  $matches = array();
  foreach($results as $row){
    $matches[] = $row->name;
  }
  $index = 1;
  $new_name = $name;
  while(in_array($new_name, $matches)){
    $new_name = "$name $index";
    $index++;
  }
  $form_state['values']['name'] = $new_name;
}

/**
 * Submit function called after user_register_submit()
 * Used to manipulate the message displayed to the user
 * @param array $form
 * @param array $form_state
 */
function scratchpads_user_register_form_post_submit($form, &$form_state){
  // Reset the messages
  drupal_get_messages('status');
  // Reset the error messages, as the following error is displayed:
  // Notice: Undefined index: pass in user_register_submit() (line 3752 of /home/simor/Zend/workspaces/DefaultWorkspace7/Scratchpads-2.0/modules/user/user.module).
  drupal_get_messages('error');
  drupal_set_message(t('Created a new profile for @user_title @user_given_name @user_family_name.', array(
    '@user_title' => $form_state['values']['field_user_title'][LANGUAGE_NONE][0]['value'],
    '@user_given_name' => $form_state['values']['field_user_given_names'][LANGUAGE_NONE][0]['value'],
    '@user_family_name' => $form_state['values']['field_user_family_name'][LANGUAGE_NONE][0]['value']
  )));
  // Give a warning that no user account was created
  drupal_set_message('No user account was created so this person will not be able to log into the website!', 'warning');
  // Ensure that no password is set
  $form['#user']->pass = '';
  user_save($form['#user']);
}