<?php

/**
 * FIXME - Remove the horrible deltas added by the facetapi module, and replace
 * them with the improved code in the scratchpads_media_gallery module.
 */
/**
 * Implementation of hook_menu_alter().
 */
function scratchpads_biblio_search_menu_alter(&$items){
  $items['biblio']['menu_name'] = PRIMARY_MENU_NAME;
  $items['biblio']['weight'] = 1;
  $items['biblio']['type'] = MENU_NORMAL_ITEM;
  $items['biblio/import']['type'] = MENU_CALLBACK;
  unset($items['biblio/authors'], $items['biblio/keywords']);
}

/**
 * Implementation of hook_apache_solr_default_sorts_alter()
 */
function scratchpads_biblio_search_apache_solr_default_sorts_alter(&$default_sorts){
  $default_sorts = array_merge(array(
    'tus_biblio_year' => array(
      'title' => t('Year'),
      'default' => 'desc'
    ),
    'tus_biblio_first_author_lastname' => array(
      'title' => t('First author surname'),
      'default' => 'asc'
    )
  ), $default_sorts);
}

/**
 * Implements hook_menu_contextual_links_alter()
 */
function scratchpads_biblio_search_contextual_links_alter(&$links, $router_item, $root_path){
  drupal_set_message($router_item);
  drupal_set_message($root_path);
}
/**
 * Implementation of hook_scratchpads_solr_info().
 */
function scratchpads_biblio_search_scratchpads_solr_info(){
  return array(
    'biblio' => array(
      'theme' => 'scratchpads_biblio_search',
      'empty' => 'scratchpads_biblio_search_empty'
    )
  );
}

/**
 * Implementation of hook_apache_solr_sortstring_alter()
 */
function scratchpads_biblio_search_apache_solr_sortstring_alter(&$sortstring){
  // Here we teak the $sortstring to reflect what is set in the $_GET array.
  $order = isset($_GET['order']) ? $_GET['order'] : t('Authors');
  switch($order){
    case t('Year'):
      $sortstring = 'tus_biblio_year ' . (isset($_GET['sort']) ? $_GET['sort'] : 'desc');
      break;
    case t('Authors'):
      $sortstring = 'tus_biblio_first_author_lastname ' . (isset($_GET['sort']) ? $_GET['sort'] : 'asc');
      break;
    case t('Title'):
      $sortstring = 'sort_label ' . (isset($_GET['sort']) ? $_GET['sort'] : 'asc');
      break;
  }
  // This also gives us an opportunity to tweak the facets if we've been linked
  // to by the biblio module.
  if(isset($_GET['f'])){
    if(isset($_GET['f']['author'])){
      $_GET['f'] = array(
        'im_biblio_contributor:' . $_GET['f']['author']
      );
    }elseif(isset($_GET['f']['keyword'])){
      $_GET['f'] = array(
        'im_biblio_keyword:' . $_GET['f']['keyword']
      );
    }
  }
}

/**
 * Implementation of hook_facetapi_facet_info().
 */
function scratchpads_biblio_search_facetapi_facet_info($searcher_info){
  // Facets are usually associated with the type of content stored in the index.
  if(isset($searcher_info['types']['node'])){return array(
      'im_biblio_contributor' => array(
        'name' => 'im_biblio_contributor',
        'label' => t('Biblio: Contributor'),
        'description' => t('Biblio: Contributor'),
        'query types' => array(
          'term'
        ),
        'map callback' => 'scratchpads_biblio_search_map_callback',
        'map options' => array(
          'biblio_contributor'
        )
      ),
      'im_biblio_keyword' => array(
        'name' => 'im_biblio_keyword',
        'label' => t('Biblio: Keyword'),
        'description' => t('Biblio: Keyword'),
        'query types' => array(
          'term'
        ),
        'map callback' => 'scratchpads_biblio_search_map_callback',
        'map options' => array(
          'biblio_keyword'
        )
      ),
      'tus_biblio_year' => array(
        'name' => 'tus_biblio_year',
        'label' => t('Biblio: Publication year'),
        'description' => t('Biblio: Publication year'),
        'query types' => array(
          'term'
        )
      ),
      'im_biblio_secondary_title' => array(
        'name' => 'im_biblio_secondary_title',
        'label' => t('Biblio: Secondary title'),
        'description' => t('Biblio: Secondary title'),
        'query types' => array(
          'term'
        ),
        'map callback' => 'scratchpads_biblio_search_map_callback',
        'map options' => array(
          'biblio_secondary_title'
        )
      ),
      'tus_biblio_type' => array(
        'name' => 'tus_biblio_type',
        'label' => t('Biblio: Type'),
        'description' => t('Biblio: Type'),
        'query types' => array(
          'term'
        ),
        'map callback' => 'scratchpads_biblio_search_map_callback',
        'map options' => array(
          'biblio_type'
        )
      )
    );}
  return array();
}

/**
 * Implementation of hook_theme().
 */
function scratchpads_biblio_search_theme(){
  return array(
    'scratchpads_biblio_search' => array(
      'variables' => array(
        'results' => NULL,
        'module' => NULL
      ),
      'file' => 'scratchpads_biblio_search.theme.inc'
    ),
    'scratchpads_biblio_search_empty' => array(
      'variables' => array(),
      'file' => 'scratchpads_biblio_search.theme.inc'
    )
  );
}

/**
 * Implementation of hook_context_default_contexts().
 */
function scratchpads_biblio_search_context_default_contexts(){
  $export = array();
  $context = new stdClass();
  $context->disabled = FALSE;
  $context->api_version = 3;
  $context->name = 'biblio_search_page';
  $context->description = t('Biblio search page');
  $context->tag = 'solr';
  $context->conditions = array(
    'path' => array(
      'values' => array(
        'biblio*' => 'biblio*'
      )
    )
  );
  $context->reactions = array(
    'block' => array(
      'blocks' => array(
        // Type
        'facetapi-efUCrEc1MxBSc0No16CZsf3DfmXuzfMe' => array(
          'module' => 'facetapi',
          'delta' => 'efUCrEc1MxBSc0No16CZsf3DfmXuzfMe',
          'region' => 'sidebar',
          'weight' => '-27'
        ),
        // Journal title
        'facetapi-TQUQDrX4oCYLioqiEiS0F7PkhlBC0hGo' => array(
          'module' => 'facetapi',
          'delta' => 'TQUQDrX4oCYLioqiEiS0F7PkhlBC0hGo',
          'region' => 'sidebar',
          'weight' => '-28'
        ),
        // Year
        'facetapi-oAU7juLpy7tz9yH0jXrLldP25ANlraws' => array(
          'module' => 'facetapi',
          'delta' => 'oAU7juLpy7tz9yH0jXrLldP25ANlraws',
          'region' => 'sidebar',
          'weight' => '-29'
        ),
        // Contributor
        'facetapi-jPTx4B1cFfdtd3vkkRIVq0t9Z3qDjf9U' => array(
          'module' => 'facetapi',
          'delta' => 'jPTx4B1cFfdtd3vkkRIVq0t9Z3qDjf9U',
          'region' => 'sidebar',
          'weight' => '-30'
        ),
        // Keyword
        'facetapi-wbFpemj0oBSspRI13zcXqTWuc2j7bpQg' => array(
          'module' => 'facetapi',
          'delta' => 'wbFpemj0oBSspRI13zcXqTWuc2j7bpQg',
          'region' => 'sidebar',
          'weight' => '-26'
        )
      )
    )
  );
  $context->condition_mode = 0;
  $export['biblio_search_page'] = $context;
  return $export;
}

/**
 * Implementation of hook_block_view_alter()
 */
function scratchpads_biblio_search_block_view_alter(&$data, $block){
  if($block->module == 'facetapi'){
    switch($block->delta){
      case 'jPTx4B1cFfdtd3vkkRIVq0t9Z3qDjf9U':
        $data['subject'] = t('Contributor');
        break;
      case 'oAU7juLpy7tz9yH0jXrLldP25ANlraws':
        $data['subject'] = t('Year');
        break;
      case 'TQUQDrX4oCYLioqiEiS0F7PkhlBC0hGo':
        $data['subject'] = t('Journal Title');
        break;
      case 'efUCrEc1MxBSc0No16CZsf3DfmXuzfMe':
        $data['subject'] = t('Type');
        break;
      case 'wbFpemj0oBSspRI13zcXqTWuc2j7bpQg':
        $data['subject'] = t('Keyword');
        break;
    }
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function scratchpads_biblio_search_ctools_plugin_api(){
  list($module, $api) = func_get_args();
  if($module == 'facetapi'){return array(
      'version' => 1
    );}
  if($module == "context" && $api == "context"){return array(
      "version" => "3"
    );}
}

/**
 * Implements hook_facetapi_default_facet_settings().
 */
function scratchpads_biblio_search_facetapi_default_facet_settings(){
  $facets = array();
  foreach(scratchpads_biblio_search_facetapi_facet_info(array(
    'types' => array(
      'node' => TRUE
    )
  )) as $facet_id => $facet_values){
    $facet = new stdClass();
    $facet->disabled = FALSE;
    $facet->api_version = 1;
    $facet->name = 'apachesolr@solr:block:' . $facet_id;
    $facet->searcher = 'apachesolr@solr';
    $facet->realm = 'block';
    $facet->facet = $facet_id;
    $facet->enabled = TRUE;
    $facet->settings = array(
      'weight' => 0,
      'widget' => 'facetapi_links',
      'filters' => array(),
      'active_sorts' => array(
        'active' => 'active',
        'count' => 'count',
        'display' => 'display'
      ),
      'sort_weight' => array(
        'active' => -50,
        'count' => -49,
        'display' => -48
      ),
      'sort_order' => array(
        'active' => 3,
        'count' => 3,
        'display' => 4
      ),
      'empty_behavior' => 'text',
      'empty_text' => array(
        'value' => t('There are no facets available to filter on.'),
        'format' => 'filtered_html'
      ),
      'soft_limit' => 20,
      'show_expanded' => 0
    );
    $facets[$facet_id] = $facet;
  }
  return $facets;
}

/**
 * Map keys to values
 */
function scratchpads_biblio_search_map_callback($values, $options){
  if(count($values)){
    switch($options[0]){
      case 'biblio_type':
        $result = db_select('biblio_types', 'b')->fields('b', array(
          'tid',
          'name'
        ))->condition('tid', $values, 'IN')->execute();
        $map = array();
        while($record = $result->fetchAssoc()){
          $map[$record['tid']] = $record['name'];
        }
        return $map;
      case 'biblio_contributor':
        $result = db_select('biblio_contributor_data', 'b')->fields('b', array(
          'cid',
          'name'
        ))->condition('cid', $values, 'IN')->execute();
        $map = array();
        while($record = $result->fetchAssoc()){
          $map[$record['cid']] = $record['name'];
        }
        return $map;
      case 'biblio_secondary_title':
        $result = db_select('biblio_secondary_title', 'b')->fields('b')->condition('bstid', $values, 'IN')->execute();
        $map = array();
        while($record = $result->fetchAssoc()){
          $map[$record['bstid']] = $record['secondary_title'];
        }
        return $map;
      case 'biblio_keyword':
        $result = db_select('biblio_keyword_data', 'b')->fields('b')->condition('kid', $values, 'IN')->execute();
        $map = array();
        while($record = $result->fetchAssoc()){
          $map[$record['kid']] = $record['word'];
        }
        return $map;
    }
  }else{
    return array();
  }
}

/**
 * Implementation of hook_apachesolr_index_document_build($document, $entity, $entity_type, $env_id)
 */
function scratchpads_biblio_search_apachesolr_index_document_build(ApacheSolrDocument $document, $entity, $entity_type, $env_id){
  if($entity_type == 'node' && $entity->type == 'biblio'){
    foreach($entity as $key => $value){
      if(substr($key, 0, 7) == 'biblio_'){
        switch($key){
          case 'biblio_secondary_title':
            $value = trim($value);
            // We insert this text into the 'biblio_secondary_title' table, and
            // use the tsid instead.
            $results = db_select('biblio_secondary_title', 'b')->fields('b')->condition('secondary_title', $value)->execute()->fetch();
            if($results){
              $bstid = $results->bstid;
            }else{
              $record = array(
                'secondary_title' => $value
              );
              drupal_write_record('biblio_secondary_title', $record);
              $bstid = $record['bstid'];
            }
            $document->addField('im_biblio_secondary_title', $bstid);
            break;
          default:
            if(is_string($value)){
              $document->setField("tus_$key", $value);
            }else if(is_array($value)){
              switch($key){
                case 'biblio_contributors':
                  $set_first_author_surname = TRUE;
                  foreach($value as $contributor){
                    if($set_first_author_surname){
                      $document->setField('tus_biblio_first_author_lastname', $contributor['lastname']);
                      $set_first_author_surname = FALSE;
                    }
                    $document->addField('im_biblio_contributor', $contributor['cid']);
                  }
                  break;
                case 'biblio_keywords':
                  foreach($value as $kid => $value){
                    $document->addField('im_biblio_keyword', $kid);
                  }
                  break;
              }
            }
            break;
        }
      }
    }
    $style = biblio_get_style();
    $base = variable_get('biblio_base', 'biblio');
    $document->content .= strip_tags(theme('biblio_long', array(
      'node' => $entity,
      'base' => $base,
      'style' => $style
    )));
    $document->teaser .= strip_tags(theme('biblio_style', array(
      'node' => $entity,
      'base' => $base,
      'style_name' => $style
    )));
  }
}
