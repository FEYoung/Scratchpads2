<?php
define("MIGRATE_NONE", 0);
define("MIGRATE_ALL", 1);
define("MIGRATE_CONTENT", 2);
define("MIGRATE_FIELD", 3);
/**
 * Add the database connection.
 * 
 * We're not adding the additional connection into the settings.php file as that
 * file is managed by Aegir.  Instead, every new site that is going to become
 * an "old" site will have an additional settings file in its files folder.
 * Simply including that file will add the additional database connection.  The
 * file should look like:
//----------
<?php
Database::addConnectionInfo('scratchpad_1', 'default', array(
  'database' => 'scratchpad_1_database',
  'username' => 'scratchpad_1_user',
  'password' => 'scratchpad_1_database_password',
  'host' => 'localhost',
  'port' => '',
  'driver' => 'mysql',
  'prefix' => ''
));
//----------
 */
global $base_url;
global $s1_domain;
// The domain of this site should be s2.blah-blah, so we remove the first three
// characters.
$s1_domain = substr(parse_url($base_url, PHP_URL_HOST), 3);
$filename = '/var/aegir/scratchpad_1_db_settings/' . $s1_domain . '.scratchpad_1.php';
if(file_exists($filename)){
  require_once ($filename);
}else{
  // We add a dummy connection just to keep the Migrate module happy.  Any
  // migrations attempted using this connection WILL fail.
  $connection_info = Database::getConnectionInfo();
  Database::addConnectionInfo('scratchpad_1', 'default', $connection_info['default']);
}

/**
 * Implements hook_field_default_fields_alter().
 * 
 * Yes, this is a darwincore module hook.
 */
function darwincore_field_default_fields_alter(&$fields){
  unset($fields['node-specimen_observation-field_collector']);
  unset($fields['node-specimen_observation-field_identified_by']);
}

/**
 * Implements hook_flush_caches().
 */
function scratchpads_migrate_flush_caches(){
  scratchpads_migrate_register_migrations();
}

/**
 * Implements hook_migrate_api().
 */
function scratchpads_migrate_migrate_api(){
  return array(
    'api' => 2
  );
}

/**
 * Register all of the migrations for this module.
 */
function scratchpads_migrate_register_migrations(){
  // Enable blog module
  if(scratchpads_migrate_source_table_exists('content_type_blog')){
    if(!module_exists('blog')){
      module_enable(array(
        'blog'
      ));
    }
  }
  // The database connection to the Scratchpad 1 site.
  $common_arguments = array(
    'source_connection' => 'scratchpad_1',
    'source_version' => 6
  );
  /*********************************************************************************************
   * Citation
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of citations from Drupal 6'),
    'machine_name' => 'Citations',
    'group' => MigrateGroup::getInstance('setup')
  );
  Migration::registerMigration('CitationMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * Variables
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of variables from Drupal 6'),
    'machine_name' => 'Variable',
    'group' => MigrateGroup::getInstance('setup')
  );
  Migration::registerMigration('VariableMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * ContentTypes
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of content types from Drupal 6'),
    'machine_name' => 'ContentType',
    'dependencies' => array(
      'Vocabulary' // Vocabulary throws an error if not run first, so make content type dependent on it
    ),
    'group' => MigrateGroup::getInstance('setup')
  );
  Migration::registerMigration('DrupalContentTypeMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * Vocabularies
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of vocabularies from Drupal 6'),
    'machine_name' => 'Vocabulary',
    'group' => MigrateGroup::getInstance('setup')
  );
  Migration::registerMigration('DrupalVocabularyMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * Vocabulary fields
   ********************************************************************************************/
  $term_dependencies = array(
    'Vocabulary'
  );
  foreach(scratchpads_migrate_get_term_vocabularies() as $vid => $term_node_type){
    $machine_name = scratchpads_migrate_get_machine_name('FieldVocabulary', $term_node_type);
    // Allow bespokes classes for different term nodes (with different fields)
    // We override the ITIS term class with our own as we know the field mappings
    $class_name = scratchpads_migrate_get_class_name($machine_name);
    if(!class_exists($class_name)){
      $class_name = 'DrupalFieldVocabularyMigration';
    }
    $arguments = $common_arguments + array(
      'description' => t('Migration of vocabulary fields from Drupal 6'),
      'machine_name' => $machine_name . $vid,
      'content_type' => $term_node_type,
      'vid' => $vid,
      'dependencies' => array(
        'Vocabulary'
      ),
      'group' => MigrateGroup::getInstance('fields', array(
        'setup'
      ))
    );
    $term_dependencies[] = $arguments['machine_name'];
    Migration::registerMigration($class_name, $arguments['machine_name'], $arguments);
  }
  /*********************************************************************************************
   * Fields
   ********************************************************************************************/
  // The description and the migration machine name are also required arguments,
  // which will be unique for each migration you register.
  $arguments = $common_arguments + array(
    'description' => t('Migration of fields from Drupal 6'),
    'machine_name' => 'Field',
    'dependencies' => array(
      'ContentType'
    ),
    'group' => MigrateGroup::getInstance('fields')
  );
  // We just use the migrate_d2d D6 migration class as-is.
  Migration::registerMigration('DrupalFieldMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * Body fields
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of body fields from Drupal 6'),
    'machine_name' => 'FieldBody',
    'dependencies' => array(
      'ContentType'
    ),
    'group' => MigrateGroup::getInstance('fields')
  );
  // We just use the migrate_d2d D6 migration class as-is.
  Migration::registerMigration('DrupalFieldBodyMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * Taxonomy fields
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of taxonomy fields from Drupal 6'),
    'machine_name' => 'FieldTaxonomy',
    'dependencies' => array(
      'ContentType',
      'Vocabulary'
    ),
    'group' => MigrateGroup::getInstance('fields')
  );
  Migration::registerMigration('DrupalFieldTaxonomyMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * Profile fields
   ********************************************************************************************/
  $user_dependencies = array();
  // If profile_fields table exists, add the FieldProfile migration
  if(scratchpads_migrate_source_table_exists('profile_fields')){
    $arguments = $common_arguments + array(
      'description' => t('Migration of profile fields from Drupal 6'),
      'machine_name' => 'FieldProfile',
      'dependencies' => array(
        'ContentType'
      ),
      'group' => MigrateGroup::getInstance('fields')
    );
    // We just use the migrate_d2d D6 migration class as-is.
    Migration::registerMigration('DrupalFieldProfileMigration', $arguments['machine_name'], $arguments);
    $user_dependencies[] = $arguments['machine_name'];
  }
  /*********************************************************************************************
   * Profile CCK fields
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of profile CCK fields from Drupal 6'),
    'machine_name' => 'FieldContentProfile',
    'dependencies' => array(
      'ContentType'
    ),
    'group' => MigrateGroup::getInstance('fields')
  );
  // We just use the migrate_d2d D6 migration class as-is.
  Migration::registerMigration('DrupalFieldContentProfileMigration', $arguments['machine_name'], $arguments);
  $user_dependencies[] = $arguments['machine_name'];
  /*********************************************************************************************
   * Image fields
   ********************************************************************************************/
  // Special handling for image fields
  $arguments = $common_arguments + array(
    'description' => t('Migration of image fields from Drupal 6'),
    'machine_name' => 'FieldImage',
    'dependencies' => array(
      'ContentType'
    ),
    'group' => MigrateGroup::getInstance('fields')
  );
  // We just use the migrate_d2d D6 migration class as-is.
  Migration::registerMigration('DrupalFieldImageMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * Image taxonomy fields
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of taxonomy fields from Drupal 6'),
    'machine_name' => 'FieldImageTaxonomy',
    'dependencies' => array(
      'ContentType',
      'Vocabulary'
    ),
    'group' => MigrateGroup::getInstance('fields')
  );
  Migration::registerMigration('DrupalFieldImageTaxonomyMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * Attached file field
   ********************************************************************************************/
  // The description and the migration machine name are also required arguments,
  // which will be unique for each migration you register.
  $arguments = $common_arguments + array(
    'description' => t('Migration of fields from Drupal 6'),
    'machine_name' => 'FieldFileAttachment',
    'dependencies' => array(
      'ContentType'
    ),
    'group' => MigrateGroup::getInstance('fields')
  );
  // We just use the migrate_d2d D6 migration class as-is.
  Migration::registerMigration('DrupalFieldFileAttachmentMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * Field groups
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of field groups from Drupal 6'),
    'machine_name' => 'FieldGroup',
    'dependencies' => array(
      'Field',
      'FieldBody',
      'FieldTaxonomy'
    ),
    'group' => MigrateGroup::getInstance('fields')
  );
  // We just use the migrate_d2d D6 migration class as-is.
  Migration::registerMigration('DrupalFieldGroupMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * User
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of users from Drupal 6'),
    'machine_name' => 'User',
    'dependencies' => $user_dependencies,
    'group' => MigrateGroup::getInstance('content', array(
      'fields'
    ))
  );
  Migration::registerMigration('ScratchpadsUserMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * Profile
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of profile-only users from Drupal 6'),
    'machine_name' => 'Profile',
    'dependencies' => array(
      'User'
    ),
    'group' => MigrateGroup::getInstance('content', array(
      'fields'
    ))
  );
  Migration::registerMigration('ScratchpadsProfileMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * Image galleries
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of image galleries from Drupal 6'),
    'machine_name' => 'ImageGallery',
    'dependencies' => array(
      'User'
    ),
    'group' => MigrateGroup::getInstance('content')
  );
  Migration::registerMigration('DrupalImageGalleryMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * Files
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of files from Drupal 6'),
    'machine_name' => 'File',
    'dependencies' => array(
      'User'
    ),
    'group' => MigrateGroup::getInstance('content')
  );
  Migration::registerMigration('DrupalFileMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * Images
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of images from Drupal 6'),
    'machine_name' => 'Image',
    'dependencies' => array(
      'User',
      'ImageGallery'
    ),
    'group' => MigrateGroup::getInstance('content')
  );
  Migration::registerMigration('DrupalImageMigration', $arguments['machine_name'], $arguments);
  // Define node arguments here so all term migrations can be added as depenencies
  $common_node_arguments = $common_arguments + array(
    'user_migration' => 'User',
    'default_uid' => 0,
    'dependencies' => array( // Content types & fields must be migrated first 
      'ContentType',
      'Field',
      'FieldBody',
      'FieldTaxonomy',
      'FieldGroup',
      'User',
      'Vocabulary',
      'File',
      'Image'
    ),
    'group' => MigrateGroup::getInstance('content')
  );
  /*********************************************************************************************
   * Terms
   ********************************************************************************************/
  $common_term_arguments = $common_arguments + array(
    'dependencies' => $term_dependencies,
    'group' => MigrateGroup::getInstance('terms')
  );
  // Get vocabularies to register the term migrations
  $query = Database::getConnection('default', 'scratchpad_1')->select('vocabulary', 'v');
  $query->fields('v', array(
    'vid',
    'name'
  ));
  $query->condition('module', array(
    'forum',
    'scratchpadify',
    'taxonomy'
  ), 'IN');
  $query->condition('name', 'Image Galleries', '!=');
  $query->condition('name', '', '!=');
  $vocabularies = $query->execute();
  foreach($vocabularies as $vocabulary){
    $arguments = array(
      'class_name' => 'ScratchpadTermMigration',
      'description' => t('Migration of %name terms from Drupal 6', array(
        '%name' => $vocabulary->name
      )),
      'machine_name' => scratchpads_migrate_get_machine_name('Term', $vocabulary->name),
      'source_vocabulary' => $vocabulary->vid,
      'destination_vocabulary' => $vocabulary->vid
    );
    $arguments = array_merge_recursive($arguments, $common_term_arguments);
    Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);
    $common_node_arguments['dependencies'][] = $arguments['machine_name'];
  }
  /****************************************************************************
   * Dependencies for the PathRedirect migration
   ****************************************************************************/
  $path_dependencies = array();
  /*********************************************************************************************
   * Nodes
   ********************************************************************************************/
  // Create the organic groups migration class seperately so other nodes can be made dependent
  $arguments = array(
    'class_name' => 'ScratchpadsNodeOrganicGroupMigration',
    'description' => t('Migration of %type nodes from Drupal 6', array(
      '%type' => 'group'
    )),
    'machine_name' => 'OrganicGroup',
    'source_type' => 'group',
    'destination_type' => 'group'
  );
  $arguments = array_merge_recursive($arguments, $common_node_arguments);
  Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);
  $common_node_arguments['dependencies'][] = 'OrganicGroup';
  $mappings = DrupalContentTypeMigration::getContentTypeMappings();
  // Get unmapped node types (custom content types on site)
  $query = Database::getConnection('default', 'scratchpad_1')->select('node_type', 'nt');
  $query->addField('nt', 'type');
  $query->condition('nt.type', array_keys($mappings), 'NOT IN');
  $result = $query->execute();
  foreach($result as $unmapped_node_type){
    $mappings[$unmapped_node_type->type] = MIGRATE_ALL;
  }
  $source_node_types = scratchpads_migrate_source_node_types();
  foreach($mappings as $type => $mapping){
    // Skip if we don't want to migrate this content type
    if($mapping == MIGRATE_NONE || $mapping == MIGRATE_FIELD){
      continue;
    }
    // Check we have a source node of this type
    if(!in_array($type, $source_node_types)){
      continue;
    }
    // Perform a table check for these nodes to ensure the module is turned on
    //    if(in_array($type, array(
    //      'spm',
    //      'darwincorelocation',
    //      'darwincore'
    //    ))){
    //      if(!scratchpads_migrate_source_table_exists($type)){
    //        continue;
    //      }
    //    }
    if(is_array($mapping)){
      if(isset($mapping['entity_type']) && $mapping['entity_type'] != 'node'){
        // Only do nodes at the moment
        continue;
      }
      if(isset($mapping['bundle'])){
        $destination_type = $mapping['bundle'];
      }
    }else{
      $destination_type = $type;
    }
    // Allow individual node type handlers
    $class_name = 'ScratchpadsNode' . ucfirst($type) . 'Migration';
    if(!class_exists($class_name)){
      $class_name = 'ScratchpadsNodeMigration';
    }
    $node_migration = ucfirst($type);
    // Create the arguments array from the mapping
    $arguments = array(
      'class_name' => $class_name,
      'description' => t('Migration of %type nodes from Drupal 6', array(
        '%type' => $type
      )),
      'machine_name' => $node_migration,
      'source_type' => $type,
      'destination_type' => $destination_type
    );
    $path_dependencies[] = $arguments['machine_name'];
    $arguments = array_merge_recursive($arguments, $common_node_arguments);
    if($type == 'darwincore'){
      $arguments['dependencies'][] = 'Darwincorelocation';
    }
    Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);
    /*********************************************************************************************
     * Comments
     ********************************************************************************************/
    // Comments are registered per node
    $arguments = $common_arguments + array(
      'description' => t('Migration of comments from Drupal 6'),
      'machine_name' => $node_migration . 'Comments',
      'node_migration' => $node_migration,
      'user_migration' => 'User',
      'destination_type' => $destination_type,
      'source_type' => $type,
      'group' => MigrateGroup::getInstance('content')
    );
    Migration::registerMigration('ScratchpadsCommentMigration', $arguments['machine_name'], $arguments);
  }
  /*********************************************************************************************
   * PathRedirect
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of URL redirects from Drupal 6'),
    'machine_name' => 'PathRedirect',
    'dependencies' => $path_dependencies,
    'group' => MigrateGroup::getInstance('content')
  );
  Migration::registerMigration('PathRedirectMigration', $arguments['machine_name'], $arguments);
}

function scratchpads_migrate_get_term_vocabularies(){
  $term_vocabularies = scratchpads_migrate_variable_get('term_node_vocabularies-contenttypes');
  return array_filter($term_vocabularies);
}

/**
 * Get a variable from the old DB
 * @param string $name
 */
function scratchpads_migrate_variable_get($name){
  $query = Database::getConnection('default', 'scratchpad_1')->select('variable', 'v');
  $query->addField('v', 'value');
  $query->condition('name', $name);
  return unserialize($query->execute()->fetchField());
}

/**
 * Load all terms indexed by TID by vocabulary ID
 * @param string $name
 */
function scratchpads_migrate_get_terms($name){
  $query = Database::getConnection('default', 'scratchpad_1')->select('term_data', 'td');
  $query->fields('td', array(
    'tid',
    'name'
  ));
  $query->innerJoin('vocabulary', 'v', 'v.vid = td.vid');
  $query->condition('v.name', $name);
  return $query->execute()->fetchAllKeyed();
}

function scratchpads_migrate_get_image_gallery_vid(){
  if(!$vid = scratchpads_migrate_variable_get('image_gallery_vid')){
    $query = Database::getConnection('default', 'scratchpad_1')->select('vocabulary', 'v');
    $query->addField('v', 'vid');
    $query->condition('name', 'Image Galleries');
    $vid = $query->execute()->fetchField();
  }
  return $vid;
}

function scratchpads_migrate_source_table_exists($table){
  return Database::getConnection('default', 'scratchpad_1')->schema()->tableExists($table);
}

function scratchpads_migrate_source_node_types(){
  $query = Database::getConnection('default', 'scratchpad_1')->select('node_type', 'nt');
  $query->addField('nt', 'type');
  $query->distinct();
  return $query->execute()->fetchCol();
}

function scratchpads_migrate_get_class_name($machine_name){
  return 'Drupal' . $machine_name . 'Migration';
}

function scratchpads_migrate_get_machine_name($type, $name){
  // Make sure the type is uppercase
  $type = ucwords($type);
  // Format the name
  $name = str_replace('_', ' ', $name);
  $name = ucwords($name);
  $name = str_replace(' ', '', $name);
  $name = str_replace(array(
    '(',
    ')',
    '/'
  ), '', $name);
  return $type . $name;
}

function scratchpads_migrate_unset_empty_fields($object){
  // Loop through and unset NULL fields, otherwise they are populated with empty values
  $properties = array_keys((array)$object);
  foreach($properties as $property){
    if($property == 'uid'){
      continue;
    }
    if((is_array($object->{$property}) && array_key_exists(0, $object->{$property}) && empty($object->{$property}[0])) || empty($object->{$property})){
      unset($object->{$property});
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function scratchpads_migrate_menu(){
  $items = array();
  $items['admin/content/migrate/scratchpads'] = array(
    'title' => 'Scratchpads',
    'type' => MENU_LOCAL_TASK,
    'description' => 'View all error messages',
    'page callback' => 'scratchpads_migrate_status_page',
    'access arguments' => array(
      MIGRATE_ACCESS_BASIC
    ),
    'weight' => 10
  );
  return $items;
}

function scratchpads_migrate_status_page(){
  $output = '';
  $migrations = migrate_migrations();
  foreach($migrations as $migration){
    if(method_exists($migration, 'sourceCount')){
      $total = $migration->sourceCount();
      // If we don't have any records don't validate the migration
      // Field migrations throw missing source field errors if there are no records to
      if($total == 0){
        continue;
      }
    }
    $items = array();
    $has_mappings = method_exists($migration, 'getFieldMappings');
    if($has_mappings){
      $field_mappings = $migration->getFieldMappings();
      $destination = $migration->getDestination();
      $source = $migration->getSource();
      $source_key = $migration->getMap()->getSourceKey();
      $source_fields = $source->fields();
      $destination_fields = $destination->fields($migration);
      foreach($field_mappings as $mapping){
        // Validate source and destination fields actually exist
        $source_field = $mapping->getSourceField();
        $destination_field = $mapping->getDestinationField();
        if(!is_null($source_field) && !isset($source_fields[$source_field])){
          $items[] = t('"!source" was used as source field in the
          "!destination" mapping but is not in list of source fields', array(
            '!source' => $source_field,
            '!destination' => $destination_field
          ));
        }
        if(!is_null($destination_field) && !isset($destination_fields[$destination_field])){
          $items[] = t('"!destination" was used as destination field in
          "!source" mapping but is not in list of destination fields', array(
            '!source' => $source_field,
            '!destination' => $destination_field
          ));
        }
      }
    }
    if(count($items)){
      $output .= theme('item_list', array(
        'items' => $items,
        'title' => $migration->getMachineName()
      ));
    }
  }
  if(strlen($output) == 0){
    $output = 'WOOP WOOP WOOP';
  }
  return $output;
}

