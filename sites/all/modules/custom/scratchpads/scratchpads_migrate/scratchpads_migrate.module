<?php
define("MIGRATE_NONE", 0);
define("MIGRATE_ALL", 1);
define("MIGRATE_CONTENT", 2);
/**
 * Add the database connection.
 * 
 * We're not adding the additional connection into the settings.php file as that
 * file is managed by Aegir.  Instead, every new site that is going to become
 * an "old" site will have an additional settings file in its files folder.
 * Simply including that file will add the additional database connection.  The
 * file should look like:
//----------
<?php
Database::addConnectionInfo('scratchpad_1', 'default', array(
  'database' => 'scratchpad_1_database',
  'username' => 'scratchpad_1_user',
  'password' => 'scratchpad_1_database_password',
  'host' => 'localhost',
  'port' => '',
  'driver' => 'mysql',
  'prefix' => ''
));
//----------
 */
if(file_exists(conf_path() . '/files/scratchpad_1_database.php')){
  require_once (conf_path() . '/files/scratchpad_1_database.php');
}else{
  // We add a dummy connection just to keep the Migrate module happy.  Any
  // migrations attempted using this connection WILL fail.
  $connection_info = Database::getConnectionInfo();
  Database::addConnectionInfo('scratchpad_1', 'default', $connection_info['default']);
}

/**
 * Implements hook_flush_caches().
 */
function scratchpads_migrate_flush_caches(){
  scratchpads_migrate_register_migrations();
}

/**
 * Implements hook_migrate_api().
 */
function scratchpads_migrate_migrate_api(){
  return array(
    'api' => 2
  );
}

/**
 * Register all of the migrations for this module.
 */
function scratchpads_migrate_register_migrations(){
  // The database connection to the Scratchpad 1 site.
  $common_arguments = array(
    'source_connection' => 'scratchpad_1',
    'source_version' => 6
  );
  /*********************************************************************************************
   * Variables
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of variables from Drupal 6'),
    'machine_name' => 'Variable'
  );
  Migration::registerMigration('VariableMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * ContentTypes
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of content types from Drupal 6'),
    'machine_name' => 'ContentType'
  );
  Migration::registerMigration('DrupalContentTypeMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * Vocabularies
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of vocabularies from Drupal 6'),
    'machine_name' => 'Vocabulary'
  );
  Migration::registerMigration('DrupalVocabularyMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * Vocabulary fields
   ********************************************************************************************/
  $term_dependencies = array(
    'Vocabulary'
  );
  foreach(scratchpads_migrate_get_term_vocabularies() as $vid => $term_node_type){
    $machine_name = scratchpads_migrate_get_machine_name('FieldVocabulary', $term_node_type);
    // Allow bespokes classes for different term nodes (with different fields)
    // We override the ITIS term class with our own as we know the field mappings
    $class_name = scratchpads_migrate_get_class_name($machine_name);
    if(!class_exists($class_name)){
      $class_name = 'DrupalFieldVocabularyMigration';
    }
    $arguments = $common_arguments + array(
      'description' => t('Migration of vocabulary fields from Drupal 6'),
      'machine_name' => $machine_name,
      'content_type' => $term_node_type,
      'vid' => $vid,
      'dependencies' => array(
        'Vocabulary'
      )
    );
    $term_dependencies[] = $machine_name;
    Migration::registerMigration($class_name, $arguments['machine_name'], $arguments);
  }
  /*********************************************************************************************
   * Fields
   ********************************************************************************************/
  // The description and the migration machine name are also required arguments,
  // which will be unique for each migration you register.
  $arguments = $common_arguments + array(
    'description' => t('Migration of fields from Drupal 6'),
    'machine_name' => 'Field',
    'dependencies' => array(
      'ContentType'
    )
  );
  // We just use the migrate_d2d D6 migration class as-is.
  Migration::registerMigration('DrupalFieldMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * Body fields
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of body fields from Drupal 6'),
    'machine_name' => 'FieldBody',
    'dependencies' => array(
      'ContentType'
    )
  );
  // We just use the migrate_d2d D6 migration class as-is.
  Migration::registerMigration('DrupalFieldBodyMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * Taxonomy fields
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of taxonomy fields from Drupal 6'),
    'machine_name' => 'FieldTaxonomy',
    'dependencies' => array(
      'ContentType',
      'Vocabulary'
    )
  );
  Migration::registerMigration('DrupalFieldTaxonomyMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * Profile fields
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of profile fields from Drupal 6'),
    'machine_name' => 'FieldProfile',
    'dependencies' => array(
      'ContentType'
    )
  );
  // We just use the migrate_d2d D6 migration class as-is.
  Migration::registerMigration('DrupalFieldProfileMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * Profile CCK fields
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of profile CCK fields from Drupal 6'),
    'machine_name' => 'FieldContentProfile',
    'dependencies' => array(
      'ContentType'
    )
  );
  // We just use the migrate_d2d D6 migration class as-is.
  Migration::registerMigration('DrupalFieldContentProfileMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * Field groups
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of field groups from Drupal 6'),
    'machine_name' => 'FieldGroup',
    'dependencies' => array(
      'Field',
      'FieldBody',
      'FieldTaxonomy'
    )
  );
  // We just use the migrate_d2d D6 migration class as-is.
  Migration::registerMigration('DrupalFieldGroupMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * User
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of users from Drupal 6'),
    'machine_name' => 'User',
    'dependencies' => array(
      'FieldProfile',
      'FieldContentProfile'
    )
  );
  Migration::registerMigration('ScratchpadsUserMigration', $arguments['machine_name'], $arguments);
  /*********************************************************************************************
   * Files
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of files from Drupal 6'),
    'machine_name' => 'File',
    'dependencies' => array(
      'User'
    )
  );
  Migration::registerMigration('DrupalFileMigration', $arguments['machine_name'], $arguments);
  // Define node arguments here so all term migrations can be added as depenencies
  $common_node_arguments = $common_arguments + array(
    'user_migration' => 'User',
    'dependencies' => array( // Content types & fields must be migrated first 
      'ContentType',
      'Field',
      'FieldBody',
      'FieldTaxonomy',
      'FieldGroup',
      'User',
      'Vocabulary'
    )
  );
  /*********************************************************************************************
   * Terms
   ********************************************************************************************/
  $common_term_arguments = $common_arguments + array(
    'dependencies' => $term_dependencies
  );
  // Get vocabularies to register the term migrations
  $query = Database::getConnection('default', 'scratchpad_1')->select('vocabulary', 'v');
  $query->fields('v', array(
    'vid',
    'name'
  ));
  $query->condition('module', array(
    'forum',
    'scratchpadify',
    'taxonomy'
  ), 'IN');
  $query->condition('name', 'Image Galleries', '!=');
  $vocabularies = $query->execute();
  foreach($vocabularies as $vocabulary){
    $arguments = array(
      'class_name' => ScratchpadTermMigration,
      'description' => t('Migration of %name terms from Drupal 6', array(
        '%name' => $vocabulary->name
      )),
      'machine_name' => scratchpads_migrate_term_machine_name($vocabulary->name),
      'source_vocabulary' => $vocabulary->vid,
      'destination_vocabulary' => $vocabulary->vid
    );
    $arguments = array_merge_recursive($arguments, $common_term_arguments);
    Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);
    $common_node_arguments['dependencies'][] = $arguments['machine_name'];
  }
  /****************************************************************************
   * Dependencies for the PathRedirect migration
   ****************************************************************************/
  $path_dependencies = array();
  /*********************************************************************************************
   * Nodes
   ********************************************************************************************/
  // Create the organic groups migration class seperately so other nodes can be made dependent
  $arguments = array(
    'class_name' => 'ScratchpadsNodeOrganicGroupMigration',
    'description' => t('Migration of %type nodes from Drupal 6', array(
      '%type' => 'group'
    )),
    'machine_name' => 'OrganicGroup',
    'source_type' => 'group',
    'destination_type' => 'group'
  );
  $arguments = array_merge_recursive($arguments, $common_node_arguments);
  Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);
  $common_node_arguments['dependencies'][] = 'OrganicGroup';
  $mappings = DrupalContentTypeMigration::getContentTypeMappings();
  // Get unmapped node types (custom content types on site)
  $query = Database::getConnection('default', 'scratchpad_1')->select('node_type', 'nt');
  $query->addField('nt', 'type');
  $query->condition('nt.type', array_keys($mappings), 'NOT IN');
  $result = $query->execute();
  foreach($result as $unmapped_node_type){
    $mappings[$unmapped_node_type->type] = MIGRATE_ALL;
  }
  foreach($mappings as $type => $mapping){
    // Skip if we don't want to migrate this content type
    if($mapping == MIGRATE_NONE){
      continue;
    }
    if(is_array($mapping)){
      if(isset($mapping['entity_type']) && $mapping['entity_type'] != 'node'){
        // Only do nodes at the moment
        continue;
      }
      if(isset($mapping['bundle'])){
        $destination_type = $mapping['bundle'];
      }
    }else{
      $destination_type = $type;
    }
    // Allow individual node type handlers
    $class_name = 'ScratchpadsNode' . ucfirst($type) . 'Migration';
    if(!class_exists($class_name)){
      $class_name = 'ScratchpadsNodeMigration';
    }
    // Create the arguments array from the mapping
    $arguments = array(
      'class_name' => $class_name,
      'description' => t('Migration of %type nodes from Drupal 6', array(
        '%type' => $type
      )),
      'machine_name' => ucfirst($type),
      'source_type' => $type,
      'destination_type' => $destination_type
    );
    $path_dependencies[] = $arguments['machine_name'];
    $arguments = array_merge_recursive($arguments, $common_node_arguments);
    Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);
  }
  /*********************************************************************************************
   * PathRedirect
   ********************************************************************************************/
  $arguments = $common_arguments + array(
    'description' => t('Migration of URL redirects from Drupal 6'),
    'machine_name' => 'PathRedirect',
    'dependencies' => $path_dependencies
  );
  Migration::registerMigration('PathRedirectMigration', $arguments['machine_name'], $arguments);
}

function scratchpads_migrate_term_machine_name($name){
  return 'Term' . str_replace(' ', '', ucwords($name));
}

function scratchpads_migrate_get_term_vocabularies(){
  $query = Database::getConnection('default', 'scratchpad_1')->select('variable', 'v');
  $query->addField('v', 'value');
  $query->condition('name', 'term_node_vocabularies-contenttypes');
  return array_filter(unserialize($query->execute()->fetchField()));
}

function scratchpads_migrate_get_class_name($machine_name){
  return 'Drupal' . $machine_name . 'Migration';
}

function scratchpads_migrate_get_machine_name($type, $name){
  // Make sure the type is uppercase
  $type = ucwords($type);
  // Format the name
  $name = str_replace('_', ' ', $name);
  $name = ucwords($name);
  $name = str_replace(' ', '', $name);
  return $type . $name;
}




