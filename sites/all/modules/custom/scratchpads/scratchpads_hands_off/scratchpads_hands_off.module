<?php

/**
 * Implements hook_form_alter
 */
function scratchpads_hands_off_form_alter(&$form, &$form_state, $form_id){
  global $user;
  if($user->uid == 1){return;}
  $forbidden_regions = array(
    'slide_bottom',
    'slide_top',
    'content',
    'menu',
    'branding',
    'header'
  );
  switch($form_id){
    case 'block_admin_configure':
      foreach(element_children($form['regions']) as $child_key){
        foreach($forbidden_regions as $forbidden_region){
          try{
            unset($form['regions'][$child_key]['#options'][$forbidden_region]);
          }
          catch(Exception $e){
            ;
          }
        }
      }
      break;
    case 'dashboard_admin_display_form':
    case 'block_admin_display_form':
      foreach($form['blocks'] as $form_block_key => $form_block){
        switch($form_block['module']['#value']){
          case 'facetapi':
          case 'apachesolr_search':
          case 'scratchpads_blocks':
          case 'system':
            unset($form['blocks'][$form_block_key]);
          case 'views':
            switch($form_block['delta']['#value']){
              case 'front_page_content-block':
                unset($form['blocks'][$form_block_key]);
            }
        }
        // Ensure the block can only be set to the allowed regions.
        foreach($forbidden_regions as $forbidden_region){
          unset($form['blocks'][$form_block_key]['region']['#options'][$forbidden_region]);
        }
      }
      $contexts = context_enabled_contexts();
      foreach($contexts as $context){
        if(isset($context->reactions) && isset($context->reactions['block'])){
          foreach($context->reactions['block']['blocks'] as $context_block_key => $context_block){
            foreach($form['blocks'] as $form_block_key => $form_block){
              if($form_block['module']['#value'] == $context_block['module'] && $form_block['delta']['#value'] == $context_block['delta']){
                unset($form['blocks'][$form_block_key]);
              }
            }
          }
        }
      }
      // Unset certain regions
      foreach($forbidden_regions as $forbidden_region){
        unset($form['block_regions']['#value'][$forbidden_region]);
      }
      break;
    case 'system_themes_admin_form':
      global $user;
      if($user->uid != 1){
        $form['admin_theme']['admin_theme']['#disabled'] = TRUE;
        $form['admin_theme']['admin_theme']['#default_value'] = 'scratchpads_admin';
        $form['admin_theme']['admin_theme']['#title'] .= '<br/><span class="error">' . t('This option has been locked') . '</span>';
        $form['admin_theme']['node_admin_theme']['#disabled'] = TRUE;
        $form['admin_theme']['node_admin_theme']['#default_value'] = 1;
        $form['admin_theme']['node_admin_theme']['#title'] .= '<br/><span class="error">' . t('This option has been locked') . '</span>';
      }
      break;
  }
}

/**
 * Implements hook_menu_alter().
 */
function scratchpads_hands_off_menu_alter(&$items){
  foreach(array(
    'admin/config/content/clone',
    'admin/config/system/boost',
    'admin/config/system/customerror',
    'admin/config/system/globalredirect',
    'admin/config/system/cron',
    'admin/config/user-interface/beautytips',
    'admin/config/development',
    'admin/structure/file-types',
    'user/1/edit'
  ) as $url){
    $items[$url]['access callback'] = 'user_access';
    $items[$url]['access arguments'] = array(
      'scratchpad team'
    );
  }
}

/**
 * Implements hook_system_themes_page_alter().
 */
function scratchpads_hands_off_system_themes_page_alter(&$theme_groups){
  global $user;
  if($user->uid != 1){
    $theme_groups['disabled'] = array();
  }
}
