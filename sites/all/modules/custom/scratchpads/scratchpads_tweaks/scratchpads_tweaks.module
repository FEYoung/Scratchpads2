<?php

/**
 * Implements hook_init()
 */
function scratchpads_tweaks_init(){
  if($_GET['q'] == 'admin/config' && !user_access('scratchpad team')){
    // Set the REQUIREMENT_ERROR variable so that no errors are displayed when
    // viewing the admin/config page as a non-admin user.
    define('REQUIREMENT_ERROR', 'Hide requirement error');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function media_multiselect_form_file_entity_add_upload_multiple_alter(&$form, &$form_state, $form_id){
  // Add an additional submit function if we're being called from a popup. This
  // will prevent the redirect from being set to file/[fid]/edit and correctly
  // show the library tab.
  $form['#submit'][] = 'media_multiselect_temporary_submit_function';
}

/**
 * Callback to ensure that the redirect for the media upload form is correctly
 * set, and not being fucked up by the media module.
 * Note, this is NOT dynamic, and is actually pretty shit.
 */
function media_multiselect_temporary_submit_function($form, &$form_state){
  if($_GET['render'] == 'media-popup'){
    $query = _scratchpads_tweaks_get_media_browser_query();
    $query['enabledPlugins'] = array(
      'media_default--media_browser_1' => 'media_default--media_browser_1'
    );
    $form_state['redirect'] = array(
      'media/browser',
      array(
        'query' => $query
      )
    );
  }else{
    $form_state['redirect'] = 'admin/content';
  }
}

/**
 * Simple function to return the options for the media browser page.
 */
function _scratchpads_tweaks_get_media_browser_query(){
  return array(
    'render' => isset($_GET['render']) ? $_GET['render'] : '',
    'types' => '',
    'activePlugins' => '',
    'enabledPlugins' => '',
    'schemes' => array(
      'public' => 'public'
    ),
    'file_directory' => '',
    'file_extensions' => variable_get('upload_extensions_default', 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp'),
    'max_filesize' => file_upload_max_size(),
    'uri_scheme' => 'public',
    'multiselect' => 'true',
    'plugins' => 'undefined'
  );
}

/**
 * Implements hook_watchdog().
 * 
 * This function simply adds an additional entry to the dblog (if dblog is
 * enabled) that displays the full trace of a PHP error.
 */
function scratchpads_tweaks_watchdog(array $log_entry){
  if($log_entry['type'] == 'php' && module_exists('dblog') && variable_get('scratchpads_tweaks_extra_debug', FALSE)){
    Database::getConnection('default', 'default')->insert('watchdog')->fields(array(
      'uid' => $log_entry['uid'],
      'type' => substr($log_entry['type'], 0, 64),
      'message' => $log_entry['message'] . '<br/>' . module_exists('devel') ? kpr(debug_backtrace(), TRUE) : print_r(debug_backtrace(), TRUE),
      'variables' => serialize($log_entry['variables']),
      'severity' => $log_entry['severity'],
      'link' => substr($log_entry['link'], 0, 255),
      'location' => $log_entry['request_uri'],
      'referer' => $log_entry['referer'],
      'hostname' => substr($log_entry['ip'], 0, 128),
      'timestamp' => $log_entry['timestamp']
    ))->execute();
  }
}

/**
 * Implements hook_date_formats()
 */
function scratchpads_tweaks_date_formats(){
  return array(
    array(
      'type' => 'short',
      'format' => 'Y-m-d'
    ),
    array(
      'type' => 'medium',
      'format' => 'Y-m-d H:i'
    )
  );
}

/**
 * Implements hook_cron().
 *
 * This function ensures that all required modules are enabled.
 */
function scratchpads_tweaks_cron(){
  // Don't report if we're a "dev" or D6 upgrade site.
  if(substr($_SERVER['HTTP_HOST'], 0, 3) != 's2.' && substr($_SERVER['HTTP_HOST'], 0, 4) != 'dev.' && strpos($_SERVER['HTTP_HOST'], 'training') === FALSE && strpos($_SERVER['HTTP_HOST'], 'taxon.name') === FALSE){
    // Once a day we'll report that we exist to a central repository which can
    // then build a list of all Scratchpads.
    if(variable_get('scratchpad_last_reported', 0) < time() - 86400){ // Seconds in a day
      // Send the update to our central server
      $central_servers = variable_get('scratchpad_central_servers', array(
        'http://dev.scratchpads.eu/'
      ));
      $result = db_query('SELECT COUNT(*) AS count, type FROM node GROUP BY type');
      foreach($result as $row){
        $nodes[$row->type] = $row->count;
      }
      $users = db_query("SELECT COUNT(uid) AS users FROM users WHERE status = 1 AND uid > 1")->fetchField(); //Total users
      $users_login = db_query("SELECT COUNT(uid) AS users FROM users WHERE login != 0")->fetchField(); //Total users logged in
      $users_week = db_query("SELECT COUNT(uid) AS users FROM users WHERE login > UNIX_TIMESTAMP()-604800")->fetchField(); //Week users
      $users_month = db_query("SELECT COUNT(uid) AS users FROM users WHERE login > UNIX_TIMESTAMP()-2592000")->fetchField(); //Month users
      $results = db_query("SELECT mail FROM {users} u, {users_roles} ur WHERE u.uid = ur.uid AND rid = 5");
      foreach($results as $row){
        $mails[] = $row->mail;
      }
      $report_data = array(
        'site_url' => $_SERVER['HTTP_HOST'],
        'site_title' => variable_get('site_name', 'Scratchpad'),
        'site_mission' => variable_get('front_page_welcome_message', ''),
        'nodes' => $nodes,
        'users' => array(
          'login' => $users_login,
          'total' => $users,
          'week' => $users_week,
          'month' => $users_month
        ),
        'views' => 0,
        'maintainer_emails' => $mails,
        'last_login_time' => db_query('SELECT access FROM {users} WHERE uid > 1 ORDER BY access DESC LIMIT 1;')->fetchField(),
        'last_node_changed_time' => db_query('SELECT created FROM {node} ORDER BY created DESC LIMIT 1')->fetchField(),
        'profile' => variable_get('install_profile', 'scratchpad_profile')
      );
      foreach($central_servers as $central_server){
        file_get_contents($central_server . 'report_scratchpad/?data=' . urlencode(serialize($report_data))); // Could run into GET limits here. Ho hum!
      }
      variable_set('scratchpad_last_reported', time());
    }
    if(variable_get('scratchpad_last_updated', 0) < time() - 86400 && !in_array("http://" . $_SERVER['HTTP_HOST'] . "/", variable_get('scratchpad_central_servers', array(
      'http://dev.scratchpads.eu/'
    )))){ // 86400 = seconds in a day
      // Also update the sites list for this site
      $central_servers = variable_get('scratchpad_central_servers', array(
        'http://dev.scratchpads.eu/'
      ));
      $sites = array();
      foreach($central_servers as $central_server){
        $content = file_get_contents($central_server . 'scratchpads/serial');
        if($content){
          $sites = array_merge($sites, unserialize($content));
        }
      }
      variable_set('scratchpad_sites_list', $sites);
      variable_set('scratchpad_last_updated', time());
    }
  }
  // Note, we need to parse the scratchpads_tweaks info file ourselves as it
  // has its dependencies removed to allow required modules to be removed.
  $tweaks_info = drupal_parse_info_file(drupal_get_path('module', 'scratchpads_tweaks') . '/scratchpads_tweaks.info');
  $system_data = system_rebuild_module_data();
  $modules_to_enable = array();
  foreach($tweaks_info['dependencies'] as $module_name){
    if(!module_exists($module_name)){
      $row = db_select('system', 's')->condition('name', $module_name)->fields('s')->execute()->fetch();
      if(!$row || $row->schema_version == -1){
        // This module has never been installed, we install it.
        $modules_to_enable[] = $module_name;
      }else{
        // The module has been installed before, we need to check the module's
        // info file to check if it is a tool and could be disabled.
        if(!isset($system_data[$module_name]->info['tool'])){
          $modules_to_enable[] = $module_name;
        }
      }
    }
  }
  if(count($modules_to_enable)){
    module_enable($modules_to_enable);
  }
  // Rebuild caches
  _scratchpads_tweaks_register_shutdown();
}

/**
 * Implements hook_flush_caches
 */
function scratchpads_tweaks_flush_caches(){
  // Rebuild caches
  _scratchpads_tweaks_register_shutdown();
}

/**
 * Helper function to ensure we only register the shutdown function once.
 */
function _scratchpads_tweaks_register_shutdown(){
  $shutdown_registered = &drupal_static(__FUNCTION__);
  if(!$shutdown_registered){
    $shutdown_registered = TRUE;
    drupal_register_shutdown_function('scratchpads_tweaks_shutdown', TRUE);
  }
}

/**
 * Shutdown function used to improve performance.
 */
function scratchpads_tweaks_shutdown($reset = FALSE){
  // Ensure that certain caches are built.  This should help speed up cold start
  // page loads.
  theme_get_registry();
  views_get_all_views($reset);
  context_enabled_contexts($reset);
  context_get_plugin('condition', 'path', $reset);
  context_get_plugin('condition', 'language', $reset);
  context_get_plugin('condition', 'user', $reset);
}

/**
 * Implements hook_node_type_insert().
 */
function scratchpads_tweaks_node_type_insert($info){
  // Set the default for all comment forms to be on separate pages.
  variable_get('comment_form_location_' . $info->type, COMMENT_FORM_SEPARATE_PAGE);
}

/**
 * Implements hook_preprocess_HOOK
 */
function scratchpads_tweaks_preprocess_comment(&$variables){
  $variables['classes_array'][] = $variables['zebra'];
}

/**
 * Implementation of hook_form_alter()
 */
function scratchpads_tweaks_form_alter(&$form, &$form_state, $form_id){
  switch($form_id){
    case 'taxonomy_form_term':
      if(isset($form['description'])){
        $form['description']['#after_build'][] = 'scratchpads_tweaks_taxonomy_description_after_build';
      }
      break;
    default:
      // Only use the "comment_filtered_html" input type for comment bodies!
      if(substr($form_id, 0, 8) == 'comment_'){
        if(@isset($form['comment_body'][LANGUAGE_NONE])){
          $form['comment_body'][LANGUAGE_NONE]['#after_build'][] = 'scratchpads_tweaks_comment_body_after_build';
        }
      }
  }
}

function scratchpads_tweaks_taxonomy_description_after_build($element, &$form_state){
  if(@isset($element['format']['format'])){
    $element['format']['format']['#options'] = array(
      'plain_text' => t('Plain text')
    );
  }
  return $element;
}

function scratchpads_tweaks_comment_body_after_build($element, &$form_state){
  scratchpads_tweaks_remove_filtered_html($element);
  return $element;
}

function scratchpads_tweaks_remove_filtered_html(&$item){
  if(is_array($item)){
    foreach($item as $key => $value){
      if($key === 'filtered_html'){
        unset($item[$key]);
      }else if(is_array($value)){
        scratchpads_tweaks_remove_filtered_html($item[$key]);
      }else if($value === 'filtered_html'){
        $item[$key] = 'comment_filtered_html';
      }
    }
  }
}

/**
 * Translate a check plained string.
 * This should add back <em> tags.
 */
function scratchpads_tweaks_translate_after_check_plain($string){
  return strtr($string, array(
    '[i]' => '<em>',
    '[em]' => '<em>',
    '[/i]' => '</em>',
    '[/em]' => '</em>',
    '&lt;i&gt;' => '<em>',
    '&lt;em&gt;' => '<em>',
    '&lt;/i&gt;' => '</em>',
    '&lt;/em&gt;' => '</em>'
  ));
}

/**
 * Implements hook_menu_alter().
 */
function scratchpads_tweaks_menu_alter(&$items){
  if(isset($items['node/%node/clone'])){
    $items['node/%node/clone']['title'] = t('Clone');
    $items['node/%node/clone']['type'] = MENU_LOCAL_TASK;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function scratchpads_tweaks_form_user_profile_form_alter(&$form, &$form_state, $form_id){
  if(isset($form['account']) && isset($form['account']['roles'])){
    $form['account']['roles']['#description'] = theme('item_list', array(
      'items' => array(
        'Authenticated user: Able to create and edit own forum posts',
        'Contributor: Able to create content and edit own content',
        'Editor: Able to create and edit own content, and also edit other people\'s content',
        'Maintainer: Like editor, but also has administration privileges'
      )
    ));
  }
}

/**
 * Alter default views defined by other modules.
 */
function scratchpads_tweaks_views_default_views_alter(&$views){
  if(isset($views['feeds_log'])){
    unset($views['feeds_log']);
  }
}

function scratchpads_tweaks_form_user_register_form_alter(&$form, &$form_state, $form_id){
  scratchpads_tweaks_form_user_profile_form_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_system_info_alter().
 */
function scratchpads_tweaks_system_info_alter(&$info, $file, $type){
  switch($file->name){
    case 'scratchpads_tweaks':
      // Unset the dependencies of the scratchpads module so that other modules
      // can be disabled (e.g. EOL taxon page data).
      unset($info['dependencies']);
      break;
    case 'webform':
      $info['tool'] = TRUE;
      $info['name'] = 'Webforms';
      $info['description'] = 'Enables the creation of simple online forms. Useful for questionnaires, conference signup, polls, and much more.';
      break;
    case 'views_ui':
      $info['tool'] = TRUE;
      $info['name'] = 'Views';
      $info['description'] = 'Allows you to create custom reports or views of the data held on your Scratchpad';
      break;
    case 'pathauto':
      $info['dependencies'][] = 'redirect';
      $info['tool'] = TRUE;
      $info['name'] = 'Pretty URLs';
      $info['description'] = 'Automatically generates pretty URLs based on the title of the content being edited/created. e.g. A page titled "About this site" will be given the URL content/about-this-site, instead of node/x.';
      break;
    case 'rules':
      $info['dependencies'][] = 'trigger';
    case 'rules_admin':
    case 'blog':
    case 'simplenews':
    case 'googleanalytics':
      $info['tool'] = TRUE;
      break;
  }
}

/**
 * Add default body field to a node type.
 * Clone of node_add_body_field() but with weight setting added
 *
 * @param $type A
 *        node type object.
 * @param $label The
 *        label for the body instance.
 *        
 * @return Body field instance.
 */
function scratchpads_tweaks_add_body_field($type, $label = 'Body', $weight = 0){
  // Add or remove the body field, as needed.
  $field = field_info_field('body');
  $instance = field_info_instance('node', 'body', $type->type);
  if(empty($field)){
    $field = array(
      'field_name' => 'body',
      'type' => 'text_with_summary',
      'entity_types' => array(
        'node'
      )
    );
    $field = field_create_field($field);
  }
  if(empty($instance)){
    $instance = array(
      'field_name' => 'body',
      'entity_type' => 'node',
      'bundle' => $type->type,
      'label' => $label,
      'widget' => array(
        'type' => 'text_textarea_with_summary'
      ),
      'settings' => array(
        'display_summary' => TRUE
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'text_default',
          'weight' => $weight
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'text_summary_or_trimmed',
          'weight' => $weight
        )
      )
    );
    $instance = field_create_instance($instance);
  }
  return $instance;
}

/**
 * Implements hook_field_widget_info_alter()
 */
function scratchpads_tweaks_field_widget_info_alter(&$info){
  unset($info['image_image']);
}