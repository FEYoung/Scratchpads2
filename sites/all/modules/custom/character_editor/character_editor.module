<?php
include_once ('character_editor.features.inc');
include_once ('includes/relations.inc');
include_once ('includes/CharacterProjectModel.inc');
include_once ('includes/CharacterModel.inc');
include_once ('includes/CharacterTreeNode.inc');
/*********************************************************************************************
 * 
 * CONSTANTS
 * 
 ********************************************************************************************/
define('PROJECT_CHARACTER_RELATION_TYPE', 'character');
define('DNA_CHARACTERS', 'ATGC');

/*********************************************************************************************
 * 
 * CORE HOOKS
 * 
 ********************************************************************************************/
/** 
 * Implements hook_menu(). 
 */
function character_editor_menu(){
  return array(
    'character_editor/get/data/%' => array(
      'page callback' => 'character_editor_get_data',
      'page arguments' => array(
        3
      ),
      'access arguments' => array(
        'access content'
      ),
      'type' => MENU_CALLBACK,
      'file' => 'character_editor.getdata.inc'
    ),
    'admin/content/sdd-import' => array(
      'title' => 'Character Project SDD Import',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'character_editor_sdd_import_form'
      ),
      'access arguments' => array(
        'create character editor'
      ),
      'file' => 'character_editor.import.inc'
    ),
    'character-editor-project/%entity_object/apply-inheritance' => array(
      'type' => MENU_CALLBACK,
      'file' => 'character_editor.inheritance.inc',
      'load arguments' => array(
        'character_editor_project'
      ),
      'page callback' => 'character_editor_process_inheritance',
      'page arguments' => array(
        1
      ),
      'access callback' => 'entity_access',
      'access arguments' => array(
        'update',
        'character_editor_project',
        1
      )
    )
  );
}

/**
 * Implementation of hook_help().
 */
function character_editor_help($path, $arg){
  if($path == 'admin/help#character-editor'){return t('Scratchpads charcter editor.');}
}

/**
 * Implement hook_permission().
 */
function character_editor_permission(){
  return array(
    'create character editor' => array(
      'title' => t('Create character editor'),
      'description' => t('Create character editor projects.')
    ),
    'view character editor' => array(
      'title' => t('View character editor'),
      'description' => t('View character editor projects.')
    ),
    'edit character editor' => array(
      'title' => t('Update character editor'),
      'description' => t('Update character editor projects.')
    ),
    'delete character editor' => array(
      'title' => t('Delete character editor'),
      'description' => t('Delete character editor projects.')
    )
  );
}

/**
 * Implements hook_scratchpads_default_permission().
 * 
 * If this module is released to drupal.org, this hook could be moved to a 
 * separate file, or it could be moved to a scratchpads_* module.
 */
function character_editor_scratchpads_default_permissions(){
  return array(
    'anonymous user' => array(
      'view character editor'
    ),
    'contributor' => array(
      'create character editor',
      'edit character editor',
      'delete character editor'
    )
  );
}

/**
 * Implementation of hook_theme().
 */
function character_editor_theme(){
  $path = drupal_get_path('module', 'character_editor');
  return array(
    'field__field_char_states' => array(
      'render element' => 'element'
    ),
    'character_editor_character' => array(
      'render element' => 'elements',
      'template' => 'character-entity',
      'path' => $path . '/theme'
    ),
    'character_editor_characters_order' => array(
      'render element' => 'element'
    ),
    'character_editor_description_row' => array(
      'file' => 'theme.inc',
      'path' => $path . '/theme',
      'variables' => array(
        'project_id' => '',
        'tid' => ''
      )
    )
  );
}

/**
 * Implementation of hook_menu_local_tasks_alter().
 *
 * Remove local tasks on the character forms, as all operations are managed via the project's
 * characters page.
 */
function character_editor_menu_local_tasks_alter(&$data, $router_item, $root_path){
  if(isset($router_item['map'][0]) && $router_item['map'][0] == 'character-editor-character' && isset($router_item['map'][1])){
    $data['tabs'] = array();
  }
}

/**
 * Implementation of hook_theme_registry_alter
 *
 * Override slickgrid control theme
 */
function character_editor_theme_registry_alter(&$theme_registry){
  $theme_registry['slickgrid_controls'] = array_merge($theme_registry['slickgrid_controls'], array(
    'arguments' => array(
      'view' => array()
    ),
    'path' => drupal_get_path('module', 'character_editor') . '/theme',
    'file' => 'theme.inc',
    'includes' => array(
      drupal_get_path('module', 'character_editor') . '/theme/theme.inc'
    ),
    'function' => 'character_editor_theme_slickgrid_controls'
  ));
}

/**
 * Implementation of hook_block_info
 *
 * Provide a block on the taxon overview page
 */
function character_editor_block_info(){
  return array(
    'default' => array(
      'info' => t('Characgter editor Species Page Block'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
      'pages' => 'taxonomy/term/*/descriptions',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'status' => 1,
      'region' => 'content',
      'weight' => 100
    )
  );
}

/**
 * Implements hook_block_view()
 *
 * Provide a block on the taxon overview page
 */
function character_editor_block_view($delta = ''){
  // Get the character projects this term is linked too
  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'character_editor_project');
  $efq->fieldCondition('field_taxonomic_name', 'tid', arg(2));
  $result = $efq->execute();
  if(empty($result['character_editor_project'])){return NULL;}
  $rows = array();
  foreach(array_keys($result['character_editor_project']) as $project_id){
    $rows[] = theme('character_editor_description_row', array(
      'project_id' => $project_id,
      'tid' => arg(2)
    ));
  }
  $rows = array_filter($rows);
  if(!empty($rows)){
    return array(
      'subject' => t('Character matrix'),
      'content' => array(
        '#type' => 'markup',
        '#markup' => implode('', $rows),
        '#attached' => array(
          'css' => array(
            drupal_get_path('module', 'character_editor') . '/css/character-editor-row.css'
          )
        )
      )
    );
  }else{
    return NULL;
  }
}

/**
 * Implement hook_node_view
 *
 * Add a link to relevant character projects for this specimen
 */
function character_editor_node_view($node, $view_mode, $langcode){
  if($view_mode != 'full' || $node->type != 'specimen_observation'){return;}
  // Get the character projects this specimen is linked too
  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'character_editor_project');
  $efq->fieldCondition('field_char_proj_specimen', 'nid', $node->nid);
  $result = $efq->execute();
  if(empty($result['character_editor_project'])){return;}
  $rows = array();
  foreach(array_keys($result['character_editor_project']) as $project_id){
    $project_w = character_editor_wrapper('character_editor_project', $project_id);
    $rows[] = l($project_w->label(), 'character-editor-project/' . $project_id, array(
      'query' => array(
        'character_entity_field' => $node->title
      )
    ));
  }
  $rows = array_filter($rows);
  if(empty($rows)){return;}
  $node->content['character_editor'] = array(
    '#type' => 'markup',
    '#weight' => 1001,
    '#markup' => '
      <div class="stripy-div-group clearfix">
        <div  class="field">
          <div class="field-label">' . t('Character Matrix') . ':</div>
          <div class="field-items"><ul><li>' . implode('</li><li>', $rows) . '</li></ul></div>
        </div>
      </div>'
  );
}

/*********************************************************************************************
 * 
 * VIEWS HOOKS
 * 
 ********************************************************************************************/
/**
 * Implementation of hook_views_api
 */
function character_editor_views_api(){
  $path = drupal_get_path('module', 'character_editor');
  return array(
    'api' => '3',
    'path' => $path . '/views'
  );
}

/**
 * Implementation of hook_views_pre_execute
 *
 * Set the query that was build in the field handler
 */
function character_editor_views_pre_execute(&$view){
  if(!property_exists($view, 'character_editor_query') || !$view->character_editor_query){return;}
  $view->build_info['query'] = $view->character_editor_query;
  $view->build_info['count_query'] = $view->character_editor_count_query;
}

/**
 * Implementation of hook_views_pre_view
 *
 * Add all the characters as columns in the view.
 */
function character_editor_views_pre_view(&$view, $display_id, &$args){
  // Is this a slickgrid? Is there an argument ?
  if($view->display_handler->get_option('style_plugin') != 'character_editor'){return;}
  if(!count($args)){return;}
  $style_options = $view->display_handler->get_option('style_options');
  // Always turn off tabs
  $style_options['tabs'] = false;
  // Editing entity type will always be relation
  $style_options['entity_type'] = 'relation';
  if(arg(2) != 'edit' && (arg(0) != 'slickgrid' && arg(1) != 'callback')){
    // Turn off all the edit controls
    $style_options['enableColumnResize'] = false;
    $style_options['enableColumnReorder'] = false;
    $style_options['autoEdit'] = false;
    $style_options['select_columns'] = false;
    $style_options['add'] = array();
    $editable = false;
  }elseif(user_access('edit character editor')){
    $editable = true;
    $style_options['editable'] = TRUE;
    $style_options['enableCellNavigation'] = TRUE;
    $style_options['row_selection_checkbox'] = true;
    $style_options['multi_edit'] = true;
  }else{
    drupal_access_denied();
    drupal_exit();
  }
  // The project ID will always be passed in as the first argument
  $project_model = new CharacterProjectModel('character_editor_project', reset($args), TRUE);
  $view->project_model = $project_model;
  $editor_tree = array();
  foreach($project_model->getTree() as $item_key => $tree_item){
    $column_id = $tree_item->columnId();
    $editor_tree[$column_id] = $tree_item->getEditorTreeDefinition();
    if($tree_item->model()->isGroup()){
      continue;
    }
    $field = $tree_item->getViewFieldDefinition();
    $view->add_item('page', 'field', 'views', 'character_field', $field, $column_id);
    $style_options['columns'][$column_id] = $tree_item->getViewStyleOptions($project_model);
    // Only add the editor if it's editable
    if($editable){
      $style_options['columns'][$column_id]['editor'] = $tree_item->model()->getEditorName();
    }
  }
  // Always use the author's settings as default. These may be overriden per user.
  $author_settings = slickgrid_get_settings(array(
    'uid' => $project_model->uid(),
    'view_name' => $view->name,
    'display_id' => $project_model->id()
  ));
  if(is_array($author_settings)){
    $style_options = array_merge($style_options, $author_settings);
  }
  $view->display_handler->set_option('style_options', $style_options);
  drupal_add_js(array(
    'CharacterTreeUI' => array(
      'editable' => $editable,
      'mode' => isset($style_options['character_tree_mode']) ? $style_options['character_tree_mode'] : 'collapsed',
      'width' => isset($style_options['character_tree_width']) ? $style_options['character_tree_width'] : '200',
      'tree' => $editor_tree,
      'project' => $project_model->id()
    )
  ), 'setting');
  // Add the list of available flags for this project
  drupal_add_js(array(
    'CharacterEditorFlags' => $project_model->getFlags()
  ), 'setting');
}

/**
 * Implementation of hook_views_pre_render
 * 
 * - Assign the values of the characters ;
 * - Order the taxon/specimens in a tree ;
 * - Filter out collapsed values.
 */
function character_editor_views_pre_render($view){
  if($view->display_handler->get_option('style_plugin') != 'character_editor'){return;}
  $view->result = $view->project_model->getRowValues($view->result);
}

/*********************************************************************************************
 * 
 * FIELD HOOKS
 * 
 ********************************************************************************************/
/**
 * Implementation of hook_form_entity_admin_entity_form_alter
 *
 * Dispatch to character or project forms.
 */
function character_editor_form_entity_admin_entity_form_alter(&$form, &$form_state, $form_id){
  if($form['#entity_type'] == 'character_editor_project'){
    character_editor_form_character_editor_project_alter($form, $form_state, $form_id);
  }else if($form['#entity_type'] == 'character_editor_character'){
    character_editor_form_character_editor_character_alter($form, $form_state, $form_id);
  }
}

/**
 * Implementation of hook_form_entity_admin_entity_form_alter for project form
 *
 * Apply modifications to the character project form
 */
function character_editor_form_character_editor_project_alter(&$form, &$form_state, $form_id){
  $fields_to_disable = array(
    'computed',
    'inherited'
  );
  // Hide the flag identifier field ; we set that automatically. Add classes for the
  // javascript to do auto-completion and remove the 'Remove' buttons.
  $existing_ids = array();
  foreach(element_children($form['field_char_proj_flags']) as $lang){
    foreach(element_children($form['field_char_proj_flags'][$lang]) as $delta){
      $disable = array();
      $elem = & $form['field_char_proj_flags'][$lang][$delta]['field_char_proj_flags_id'];
      foreach(element_children($elem) as $field_lang){
        $value = $elem[$field_lang][0]['value']['#default_value'];
        $is_new = !empty($elem[$field_lang][0]['#entity']) && property_exists($elem[$field_lang][0]['#entity'], 'is_new') && $elem[$field_lang][0]['#entity']->is_new;
        if(!empty($value)){
          $existing_ids[] = $value;
        }
        if(in_array($value, $fields_to_disable)){
          $elem[$field_lang][0]['value']['#type'] = 'value';
          $elem[$field_lang][0]['value']['#value'] = $value;
          $disable[] = $field_lang;
        }else{
          $form['field_char_proj_flags'][$lang][$delta]['field_char_proj_flags_flag']['#attributes']['class'][] = 'character-editor-flag-flag';
          $form['field_char_proj_flags'][$lang][$delta]['field_char_proj_flags_abbr']['#attributes']['class'][] = 'character-editor-flag-abbr';
          if(empty($value) || $is_new){
            $elem[$field_lang][0]['value']['#type'] = 'hidden';
            $elem['#attributes']['class'][] = 'character-editor-flag-id';
          }else{
            $elem[$field_lang][0]['value']['#type'] = 'value';
            $elem[$field_lang][0]['value']['#value'] = $value;
          }
        }
      }
      // Disable editing of 'computed' and 'inherited', and instruct js to remove the 'Remove' button
      foreach($disable as $field_lang){
        $elem = & $form['field_char_proj_flags'][$lang][$delta]['field_char_proj_flags_flag'];
        $elem[$field_lang][0]['value']['#disabled'] = TRUE;
        $elem[$field_lang][0]['value']['#description'] = t('This is a system annotation and cannot be edited.');
        $elem['#attributes']['class'][] = 'character-editor-flag-flag-fixed';
      }
    }
  }
  $form['#attached']['js'][] = drupal_get_path('module', 'character_editor') . '/js/character-editor-settings-form.js';
  $form['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => array(
      'characterEditorSettingsForm' => array(
        'existingIds' => $existing_ids
      )
    )
  );
}

/**
 * Implementation of hook_form_entity_admin_entity_form_alter for character form
 *
 * Apply modifications to the character add/edit form
 */
function character_editor_form_character_editor_character_alter(&$form, &$form_state, $form_id){
  // Is this an add link from slickgrid
  $project_w = FALSE;
  $project_model = FALSE;
  if(!isset($form_state['character_project_id'])){
    if($form_state['entity']->is_new){
      $form_state['character_project_id'] = arg(5);
      $project_model = new CharacterProjectModel('character_editor_project', arg(5));
    }else{
      $project_model = CharacterProjectModel::getProjectOfEntity($form['#entity_type'], $form_state['entity']);
      $form_state['character_project_id'] = $project_model->entityId();
    }
  }else{
    $project_model = new CharacterProjectModel('character_editor_project', $form_state['character_project_id']);
  }
  // Add the group select
  $groups = $project_model->getGroupSelect();
  if(count($groups)){
    $character_w = character_editor_wrapper('character_editor_character', $form_state['entity']);
    $selected_group_wrappers = character_editor_get_parents($character_w);
    $selected_groups = array();
    foreach($selected_group_wrappers as $group_w){
      $selected_groups[] = $group_w->getIdentifier();
    }
    // Get the actual title weight - the one in the form gets over-written later
    $extra_fields = field_info_extra_fields('character_editor_character', $form_state['entity']->type, 'form');
    if(isset($extra_fields['title']['weight'])){
      $title_weight = $extra_fields['title']['weight'];
    }else{
      $title_weight = $form['title']['#weight'];
    }
    $form['group'] = array(
      '#type' => 'select',
      '#title' => t('Group'),
      '#options' => $groups,
      '#description' => t('Which group(s) would you like to add this character to?'),
      '#required' => FALSE,
      '#default_value' => $selected_groups,
      '#nane' => 'group',
      '#multiple' => TRUE,
      '#weight' => $title_weight + 0.5
    );
    if(isset($form['#group_children'])){
      $form['#group_children']['group'] = 'group_char_group';
    }
  }
  if(!$form_state['entity']->is_new){
    // The tabs have been changed so there's no longer delete - add delete button, unless
    // we're editing from a modal.
    if(empty($form_state['modal'])){
      $form['actions']['delete'] = array(
        '#type' => 'submit',
        '#value' => t('Delete'),
        '#submit' => array(
          'character_editor_character_delete_submit'
        )
      );
      if(!empty($form_state['character_project_id'])){
        $form['actions']['cancel'] = array(
          '#type' => 'markup',
          '#markup' => l('Cancel', 'character-editor-project/' . $form_state['character_project_id'] . '/characters')
        );
      }
    }else{
      $form['plugin'] = array(
        '#type' => 'hidden',
        '#value' => $form_state['modal']
      );
      $form['modal_character_id'] = array(
        '#type' => 'hidden',
        '#value' => $form_state['entity']->id
      );
    }
    $form['actions']['submit']['#update'] = TRUE;
  }
  // Generate the help for the conditions and expresion fields.
  if(isset($form['field_char_expr'])){
    _character_editor_entity_form_expression($form, 'field_char_expr', $project_model);
  }
  if(isset($form['field_char_condition'])){
    _character_editor_entity_form_expression($form, 'field_char_condition', $project_model);
  }
  $form['#attached']['css'][] = drupal_get_path('module', 'character_editor') . '/css/character-editor-forms.css';
  $form['actions']['submit']['#submit'][] = 'character_editor_character_form_submit';
  $form['#after_build'][] = 'character_editor_character_form_after_build';
}

/**
 * _character_editor_entity_form_expression
 *
 * Helper function for hook_form_entity_admin_entity_form_alter to help
 * generate the expression/condition form
 */
function _character_editor_entity_form_expression(&$form, $expr_field, $project_model){
  $lang = field_language('character_editor_character', $form['#entity'], $expr_field);
  // Get the variable list and prepare them for display
  $variables = $project_model->getAvailableVariables();
  $themed_variables = array();
  $controlled_characters = array();
  $available_states = array();
  foreach($variables['list'] as $var_id => $var_row){
    $themed_variables[$var_id][0] = '<span class="character-editor-variable">{' . htmlspecialchars($var_row['name']) . '}</span>';
    $themed_variables[$var_id][1] = t(ucfirst($var_row['type']));
    if(!empty($var_row['states'])){
      $themed_states = array();
      foreach($var_row['states'] as $state_id => $state_label){
        $themed_states[$state_id] = '<span class="character-editor-symbol">\'' . htmlspecialchars($state_label) . '\'</span>';
      }
      $themed_variables[$var_id][2] = "<ul><li>" . implode('</li><li>', $themed_states) . '<li></ul>';
    }else{
      $themed_variables[$var_id][2] = '';
    }
    if($var_row['type'] == 'controlled'){
      $controlled_characters[$var_id] = $var_row['name'];
      $available_states[$var_id] = $var_row['states'];
    }
  }
  // Replace ids in the expression with names
  $expr = $form[$expr_field][$lang][0]['value']['#default_value'];
  $e = NULL;
  if($expr){
    module_load_include('inc', 'character_editor', 'includes/CharacterExpressionParser');
    try{
      $e = new CharacterExpressionParser($expr);
      $e->rename(array_flip($variables['character_map']), array_flip($variables['state_map']));
      $expr = $e->getExpression();
    }
    catch(Exception $exp){
      $expr = "Could not parse saved expression: " . $exp->getMessage();
      $e = NULL;
    }
    $form[$expr_field][$lang][0]['value']['#default_value'] = $expr;
  }
  // Add the helper table with the variable and value names
  $table_html = theme('table', array(
    'header' => array(
      t('Character'),
      t('Type'),
      t('States')
    ),
    'rows' => $themed_variables,
    'attributes' => array(
      'class' => array(
        "character-editor-variable"
      )
    )
  ));
  $form[$expr_field][$lang][] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#description' => t('List of characters that can be used in the expression. Characters are enclosed in {curly} brackets and states in \'single quotes\'.  Click on a character or state to insert it into the text editor.'),
    '#title' => t('Characters'),
    'table' => array(
      '#markup' => $table_html
    ),
    '#attributes' => array(
      'class' => array(
        'condition-form-mode-advanced'
      )
    )
  );
  // If this is a condition editor, add the simple/advanced switch and the html for the simple form.
  if($expr_field == 'field_char_condition'){
    $use_simple_editor = TRUE;
    $default_variable = '';
    $default_operator = '';
    $default_value = array();
    if(!empty($form_state['values']['simple_cond_var'])){
      $default_variable = $form_state['values']['simple_cond_var'];
      $default_operator = $form_state['values']['simple_cond_op'];
    }
    if($e){
      if($match = $e->match("{v} in ['values']")){
        $variable_id = $variables['character_map'][$match['{v}']->name()];
        if($variables['list'][$variable_id]['type'] != 'controlled'){
          $use_simple_editor = FALSE;
        }else if(!$default_operator){
          $default_variable = $variable_id;
          if($match["['values']"]->isConjoined()){
            $default_operator = 'is all of';
          }else{
            $default_operator = 'is one of';
          }
          foreach($match["['values']"]->value() as $list_value){
            if(!($list_value instanceof CharacterExpressionSymbol)){
              $use_simple_editor = FALSE;
              break;
            }
            $state_label = $list_value->value();
            $state_id = $variables['state_map'][$state_label];
            $default_value[$state_id] = $state_id;
          }
        }
      }else if($match = $e->match("{v} not-in ['values']")){
        $variable_id = $variables['character_map'][$match['{v}']->name()];
        if($variables['list'][$variable_id]['type'] != 'controlled'){
          $use_simple_editor = FALSE;
        }else if(!$default_operator){
          $default_variable = $variable_id;
          if($match["['values']"]->isConjoined()){
            $default_operator = 'is not';
          }else{
            $default_operator = 'is none of';
          }
          foreach($match["['values']"]->value() as $list_value){
            if(!($list_value instanceof CharacterExpressionSymbol)){
              $use_simple_editor = FALSE;
              break;
            }
            $state_label = $list_value->value();
            $state_id = $variables['state_map'][$state_label];
            $default_value[$state_id] = $state_id;
          }
        }
      }else{
        $use_simple_editor = FALSE;
      }
    }
    $form[$expr_field][$lang]['condition_simple_editor'] = array(
      'simple_cond_var' => array(
        '#type' => 'select',
        '#empty_option' => t('- Select Character -'),
        '#options' => $controlled_characters,
        '#default_value' => $default_variable,
        '#attributes' => array(
          'class' => array(
            'condition-form-mode-simple',
            'condition-form-var-selector'
          )
        )
      ),
      'simple_cond_op' => array(
        '#type' => 'select',
        '#empty_option' => t('- Select operator -'),
        '#options' => array(
          'is one of' => t('is one of'),
          'is all of' => t('is all of'),
          'is none of' => t('is none of'),
          'is not' => t('is not')
        ),
        '#default_value' => $default_operator,
        '#attributes' => array(
          'class' => array(
            'condition-form-mode-simple'
          )
        )
      ),
      'simple_cond_value' => array(
        '#type' => 'select',
        '#options' => $available_states,
        '#multiple' => TRUE,
        '#default_value' => $default_value,
        '#size' => max(array_map('count', $available_states)) + 1,
        '#attributes' => array(
          'class' => array(
            'condition-form-mode-simple',
            'condition-form-val-selector'
          )
        )
      )
    );
    $form[$expr_field][$lang]['condition_editor_mode'] = array(
      '#type' => 'select',
      '#options' => array(
        'simple' => t('Simple'),
        'advanced' => t('Advanced')
      ),
      '#required' => TRUE,
      '#title' => t('Condition Editor Mode'),
      '#default_value' => $use_simple_editor ? 'simple' : 'advanced',
      '#weight' => '-1',
      '#attributes' => array(
        'class' => array(
          'condition-form-mode-selector'
        )
      )
    );
  }
  $form['#attached']['js'][] = drupal_get_path('module', 'character_editor') . '/js/character-editor-expression.js';
  $form['#validate'][] = 'character_editor_character_form_validate';
  $form['actions']['submit']['#submit'] = array_merge(array(
    'character_editor_character_form_submit_expression'
  ), $form['actions']['submit']['#submit']);
}

/**
 * character_editor_character_form_validate
 */
function character_editor_character_form_validate($form, &$form_state){
  $expression_fields = array(
    'field_char_expr',
    'field_char_condition'
  );
  foreach($expression_fields as $expr_field){
    if(!isset($form[$expr_field])){
      continue;
    }
    $lang = field_language('character_editor_character', $form['#entity'], $expr_field);
    if($expr_field == 'field_char_condition' && $form_state['values'][$expr_field][$lang]['condition_editor_mode'] == 'simple'){
      continue;
    }else if(!empty($form_state['values'][$expr_field][$lang][0]['value'])){
      module_load_include('inc', 'character_editor', 'includes/CharacterExpressionParser');
      try{
        $e = new CharacterExpressionParser($form_state['values'][$expr_field][$lang][0]['value']);
      }
      catch(Exception $e){
        form_set_error($expr_field, t("Expression could not be parsed:") . $e->getMessage());
      }
    }
  }
}

/**
 * character_editor_character_form_submit_expression
 * 
 * Called before other submit handlers so we can:
 * - Select to use the simple or advanced editor input ;
 * - change the value of the expression to use identifiers rather than labels
 */
function character_editor_character_form_submit_expression($form, &$form_state){
  $expression_fields = array(
    'field_char_expr',
    'field_char_condition'
  );
  foreach($expression_fields as $expr_field){
    if(!isset($form[$expr_field])){
      continue;
    }
    $lang = field_language('character_editor_character', $form['#entity'], $expr_field);
    if($expr_field == 'field_char_condition' && $form_state['values'][$expr_field][$lang]['condition_editor_mode'] == 'simple'){
      $variable_id = trim($form_state['values'][$expr_field][$lang]['condition_simple_editor']['simple_cond_var']);
      $operator = trim($form_state['values'][$expr_field][$lang]['condition_simple_editor']['simple_cond_op']);
      $values = $form_state['values'][$expr_field][$lang]['condition_simple_editor']['simple_cond_value'];
      $expr = '';
      if($variable_id && $operator && is_array($values) && !empty($values)){
        switch($operator){
          case 'is one of':
            $expr = '{' . $variable_id . '}' . " in ['" . implode("' | '", $values) . "']";
            break;
          case 'is all of':
            $expr = '{' . $variable_id . '}' . " in ['" . implode("' & '", $values) . "']";
            break;
          case 'is none of':
            $expr = '{' . $variable_id . '}' . " not-in ['" . implode("' | '", $values) . "']";
            break;
          case 'is not':
            $expr = '{' . $variable_id . '}' . " not-in ['" . implode("' & '", $values) . "']";
            break;
          default:
            $expr = '';
        }
      }
      $form_state['values'][$expr_field][$lang][0]['value'] = $expr;
    }else if(!empty($form_state['values'][$expr_field][$lang][0]['value'])){
      $project_model = new CharacterProjectModel('character_editor_project', $form_state['character_project_id']);
      $variables = $project_model->getAvailableVariables();
      module_load_include('inc', 'character_editor', 'includes/CharacterExpressionParser');
      try{
        $e = new CharacterExpressionParser($form_state['values'][$expr_field][$lang][0]['value']);
        $e->rename($variables['character_map'], $variables['state_map']);
        $expr = $e->getExpression();
      }
      catch(Exception $e){
        $expr = '';
      }
      $form_state['values'][$expr_field][$lang][0]['value'] = $expr;
    }else{
      $form_state['values'][$expr_field][$lang][0]['value'] = '';
    }
  }
}

/**
 * Implementation of hook_form_entity_admin_entity_delete_form_alter()
 *
 * Apply modifications to the character delete form
 */
function character_editor_form_entity_admin_entity_delete_form_alter(&$form, &$form_state, $form_id){
  if(preg_match('/^\/character-editor-character\/\d+\/delete(\?.*)?$/', $form['#action'])){
    $form['actions']['submit']['#submit'][] = 'character_editor_character_delete_submit';
    $entity_w = character_editor_wrapper('character_editor_character', $form_state['entity']);
    $project_w = character_editor_get_character_project($entity_w);
    if($project_w){
      $form['actions']['cancel']['#href'] = 'character-editor-project/' . $project_w->getIdentifier() . '/characters';
    }
  }
}

/**
 * Implement hook_field_create_instance
 *
 * Ensure we have the right default values for the character project flags field
 * set up.
 */
function character_editor_field_create_instance($instance){
  if($instance['field_name'] != 'field_char_proj_flags'){return;}
  if(!empty($instance['default_value'])){return;}
  $flag_defaults = array(
    'c' => 'computed',
    'i' => 'inherited',
    'a' => 'approximate',
    'g' => 'guessed',
    'r' => 'rare'
  );
  foreach($flag_defaults as $flag_abbr => $flag){
    $instance['default_value'][] = array(
      'field_char_proj_flags_abbr' => array(
        'und' => array(
          0 => array(
            'value' => $flag_abbr
          )
        )
      ),
      'field_char_proj_flags_flag' => array(
        'und' => array(
          0 => array(
            'value' => $flag
          )
        )
      ),
      'field_char_proj_flags_id' => array(
        'und' => array(
          0 => array(
            'value' => $flag
          )
        )
      ),
      'remove_button' => 'Remove',
      'entity' => entity_import('field_collection_item', '{
        "item_id" : null,
        "revision_id" : null,
        "field_name" : "field_char_proj_flags",
        "default_revision" : true,
        "archived" : false,
        "field_char_proj_flags_abbr" : { "und" : [ { "value" : "' . $flag_abbr . '" } ] },
        "field_char_proj_flags_flag" : { "und" : [ { "value" : "' . $flag . '" } ] },
        "field_char_proj_flags_id" : { "und" : [ { "value" : "' . $flag . '" } ] }
       }')
    );
  }
  field_update_instance($instance);
}

/*********************************************************************************************
 * 
 * ENTITY HOOKS & CALLBACKS
 * 
 ********************************************************************************************/
/**
 * Implement hook_entity_info().
 *
 */
function character_editor_entity_info(){
  // Character projects
  $return['character_editor_project'] = array(
    'label' => t('Character project'),
    // The entity class and controller class extend the classes provided by the Entity API
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'character_editor_project',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'type',
      'label' => 'title'
    ),
    // Bundles are defined by the publication types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array(
      'bundle' => 'type'
    ),
    'access callback' => 'character_editor_entity_access',
    'module' => 'character_editor',
    'admin ui' => array(
      'path' => 'admin/content/character-editor/projects',
      'controller class' => 'CharacterProjectEntityController'
    ),
    'views controller class' => 'CharacterProjectViewsController'
  );
  // The entity that holds information about the entity types	  
  $return['character_editor_project_type'] = array(
    'label' => t('Character project type'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIControllerExportable',
    'base table' => 'character_editor_project_type',
    'fieldable' => FALSE,
    'bundle of' => 'character_editor_project',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label'
    ),
    'access callback' => 'character_editor_entity_access',
    'module' => 'character_editor',
    'admin ui' => array(
      'path' => 'admin/structure/character-editor/project',
      'controller class' => 'EntityAdminTypeController'
    )
  );
  $return['character_editor_character'] = array(
    'label' => t('Character'),
    // The entity class and controller class extend the classes provided by the Entity API
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'character_editor_character',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'type',
      'label' => 'title'
    ),
    // Bundles are defined by the publication types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array(
      'bundle' => 'type'
    ),
    'access callback' => 'character_editor_entity_access',
    'module' => 'character_editor',
    'admin ui' => array(
      'path' => 'admin/content/character-editor/characters',
      'controller class' => 'EntityAdminEntityController',
      'access' => false
    ),
    'creation callback' => null
  );
  // The entity that holds information about the entity types	  
  $return['character_editor_character_type'] = array(
    'label' => t('Character type'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIControllerExportable',
    'base table' => 'character_editor_character_type',
    'fieldable' => FALSE,
    'bundle of' => 'character_editor_character',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label'
    ),
    'access callback' => 'character_editor_entity_access',
    'module' => 'character_editor',
    'admin ui' => array(
      'path' => 'admin/structure/character-editor/character',
      'controller class' => 'EntityAdminTypeController'
    )
  );
  return $return;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function character_editor_entity_property_info_alter(&$info){
  // Set the editor project properties
  $project = &$info['character_editor_project']['properties'];
  $project['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the character project was created."),
    'schema field' => 'created'
  );
  $project['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'description' => t("The date the character project was updated."),
    'schema field' => 'created'
  );
  $project['uid'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'setter callback' => 'entity_property_verbatim_set',
    'description' => t("The author of the character project."),
    'schema field' => 'uid'
  );
  // Set the character properties
  $character = &$info['character_editor_character']['properties'];
  $character['title'] = array(
    'type' => 'text',
    'label' => 'Title',
    'schema field' => 'title',
    'description' => 'The title of the character',
    'setter callback' => 'entity_property_verbatim_set'
  );
}

/**
 * Entity access callback
 */
function character_editor_entity_access($op){
  switch($op){
    case 'access':
      $op = 'view';
      break;
    case 'update':
    case 'settings':
    case 'characters':
      $op = 'edit';
      break;
  }
  $permission = $op . ' character editor';
  return user_access($permission);
}

/**
 * Entity delete
 * Delete all the character groups & characters 
 */
function character_editor_entity_delete($entity, $type){
  switch($type){
    case 'character_editor_project':
    case 'character_editor_character':
      // XXX should we delete child characters or re-parent them?
      // Delete child characters. Note that character state values are
      // help as part of the relations - so they will get deleted automatically.
      $wrapper = character_editor_wrapper($type, $entity);
      $children = character_editor_get_characters($wrapper);
      foreach($children as $child){
        $child->delete();
      }
      break;
  }
}

/*********************************************************************************************
 * 
 * MENU CALLBACKS
 * 
 ********************************************************************************************/
/**
 * View a character project entity
 */
function character_editor_project_view($entity){
  $path = drupal_get_path('module', 'character_editor');
  $name = character_editor_get_default_view();
  $display_id = 'default';
  $args = array(
    $entity->id
  );
  // Load the view and render it.
  if(($view = views_get_view($name)) != FALSE){
    $build = array(
      '#type' => 'markup',
      '#markup' => $view->execute_display($display_id, $args),
      '#attached' => array(
        'js' => array(
          $path . '/js/character-editor-info-popups.js',
          $path . '/js/character-editor-character-tree.js',
          $path . '/js/character-editor-context-menu.js',
          $path . '/js/character-editor-metadata-manager.js',
          $path . '/js/character-editor-inheritance.js',
          $path . '/js/character-editor.js',
          array(
            'data' => array(
              'CharacterEditorPath' => drupal_get_path('module', 'character_editor')
            ),
            'type' => 'setting'
          )
        ),
        'css' => array(
          $path . '/css/character-editor.css'
        )
      )
    );
  }
  // Override the JS setting set by the slickgrid module.
  drupal_add_js(array(
    'slickgrid' => array(
      'get_data_callback_url' => url('character_editor/get/data/' . $entity->id . '/', array(
        'absolute' => TRUE
      ))
    )
  ), 'setting');
  // views_get_view overwites the title so need to reset it here 
  drupal_set_title($entity->label());
  return $build;
}

/*********************************************************************************************
 * 
 * FORM FUNCTIONS
 * 
 ********************************************************************************************/
/**
 * Additional form submit handler for new characters. This is called after entity_admin_entity_form_submit
 */
function character_editor_character_form_submit(&$form, &$form_state){
  if(empty($form_state['entity'])){return;}
  $character_w = character_editor_wrapper('character_editor_character', $form_state['entity']);
  // Attach to it's new parents, and detach from old parents
  $parents = array();
  if(isset($form_state['values']['group'])){
    foreach($form_state['values']['group'] as $group_id){
      $parents[] = character_editor_wrapper('character_editor_character', $group_id);
    }
  }
  if(empty($parents)){
    $parents[] = character_editor_wrapper('character_editor_project', $form_state['character_project_id']);
  }
  $existing_parents = character_editor_get_parents($character_w);
  $new_parents_ids = array();
  foreach($parents as $parent_w){
    character_editor_associate_character($parent_w, $character_w);
    $new_parents_ids[] = $parent_w->type() . ':' . $parent_w->getIdentifier();
  }
  foreach($existing_parents as $parent_w){
    if(!in_array($parent_w->type() . ':' . $parent_w->getIdentifier(), $new_parents_ids)){
      character_editor_detach_character($character_w, $parent_w);
    }
  }
  // Feedback and redirect
  if(empty($form_state['triggering_element']['#update'])){
    drupal_set_message(t("%type character added", array(
      "%type" => ucfirst($character_entity->type)
    )));
    unset($form_state['redirect']);
  }else{
    if(!empty($form_state['character_project_id'])){
      $form_state['redirect'] = 'character-editor-project/' . $form_state['character_project_id'] . '/characters';
    }
  }
}

/**
 * Handle submission of character form delete button
 * @param array $form
 * @param array $form_state
 */
function character_editor_character_delete_submit($form, &$form_state){
  $entity_w = character_editor_wrapper('character_editor_character', $form_state['entity']);
  $project_w = character_editor_get_character_project($entity_w);
  if($project_w){
    $form_state['redirect'] = 'character-editor-project/' . $project_w->getIdentifier() . '/characters';
  }
  entity_delete($entity_w->type(), $entity_w->getIdentifier());
}

function character_editor_character_form_after_build(&$form, &$form_state){
  // Bug fix: subform destroys the $_POST array so slickgrid doesn't know when form has validated
  // Manually set it here
  if(empty($_POST)){
    $form['#validated'] = true;
  }
  return $form;
}

/**
 * 
 * Create a relation between two entities
 * Invoked from character_editor_add_character_form_submit()
 * @param string $relation_type
 * @param entity obj $parent_entity
 * @param entity obj $character_entity
 */
function character_editor_create_relation($parent_entity, $character_entity){
  $entity_keys = array(
    array(
      'entity_type' => $parent_entity->entityType(),
      'entity_id' => $parent_entity->identifier(),
      'r_index' => 0
    ),
    array(
      'entity_type' => $character_entity->entityType(),
      'entity_id' => $character_entity->identifier(),
      'r_index' => 1
    )
  );
  $relation = relation_create(PROJECT_CHARACTER_RELATION_TYPE, $entity_keys);
  relation_save($relation);
}

/**
 * character_editor_characters_order_form
 *
 * Form for ordering/parenting characters
 */
function character_editor_characters_order_form($form, &$form_state){
  $project_id = arg(1);
  $project_w = character_editor_wrapper('character_editor_project', $project_id);
  if(!$project_w){return;}
  $tree = character_editor_get_tree($project_w);
  $form['characters_order'] = array(
    '#tree' => TRUE,
    '#theme' => 'character_editor_characters_order'
  );
  foreach($tree as $item_id => $item){
    $edit = l(t('Edit'), 'character-editor-character/' . $item['wrapper']->getIdentifier() . '/edit');
    $delete = l(t('Delete'), 'character-editor-character/' . $item['wrapper']->getIdentifier() . '/delete');
    $form['characters_order'][] = array(
      'label' => array(
        '#type' => 'item',
        '#markup' => $item['wrapper']->title->value()
      ),
      'operations' => array(
        '#markup' => $edit . ' ' . $delete
      ),
      'weight' => array(
        '#type' => 'textfield',
        '#default_value' => $item['weight']
      ),
      'id' => array(
        '#type' => 'hidden',
        '#value' => $item_id
      ),
      'parent_id' => array(
        '#type' => 'textfield',
        '#default_value' => $item['parent_id']
      ),
      '#depth' => $item['depth'],
      '#is_group' => $item['wrapper']->getBundle() == 'group'
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save')
  );
  return $form;
}

/**
 * theme_character_editor_characters_order
 *
 * Theme the character ordering form into a table of draggable elements
 */
function theme_character_editor_characters_order($variables){
  $element = $variables['element'];
  drupal_add_tabledrag('character-editor-characters-order-table', 'order', 'sibling', 'row-weight');
  drupal_add_tabledrag('character-editor-characters-order-table', 'match', 'parent', 'row-parent', 'row-parent', 'row-id');
  $header = array(
    'label' => t('Character'),
    'operations' => t('Operations'),
    'weight' => t('Weight+Parent')
  );
  $rows = array();
  foreach(element_children($element) as $key){
    $form_element = & $element[$key];
    $form_element['weight']['#attributes']['class'][] = 'row-weight';
    $form_element['id']['#attributes']['class'][] = 'row-id';
    $form_element['parent_id']['#attributes']['class'][] = 'row-parent';
    $row = array(
      'data' => array(),
      'class' => array(
        'draggable'
      )
    );
    $indent = theme('indentation', array(
      'size' => $form_element['#depth']
    ));
    if(empty($element[$key]['#is_group'])){
      $row['class'][] = 'tabledrag-leaf';
      $row['data'][] = $indent . drupal_render($form_element['label']);
    }else{
      $row['data'][] = $indent . '<strong>' . drupal_render($form_element['label']) . '</strong>';
    }
    $row['data'][] = drupal_render($form_element['operations']);
    $row['data'][] = drupal_render($form_element['weight']) . drupal_render($form_element['id']) . drupal_render($form_element['parent_id']);
    $rows[] = $row;
  }
  return theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(
      'id' => 'character-editor-characters-order-table'
    )
  ));
}

/**
 * character_editor_characters_order_form_submit
 */
function character_editor_characters_order_form_submit($form, &$form_state){
  // Get the project
  $project_id = arg(1);
  $project_w = character_editor_wrapper('character_editor_project', $project_id);
  if(!$project_w){return;}
  // Check if endpoints & weight are translatable
  $field_info = field_info_field('endpoints');
  $endpoints_tr = $field_info['translatable'];
  $field_info = field_info_field('field_character_weight');
  $weight_tr = $field_info['translatable'];
  // Get the items and update the values as needed
  $items = $form_state['values']['characters_order'];
  foreach($items as $item){
    $update = FALSE;
    // Get the entity and the existing relationship to it's parent
    list($entity_type, $entity_id, $relation_id) = explode(':', $item['id']);
    $relation = entity_load_single('relation', $relation_id);
    // Update the weight if needed
    $relation_weight = field_get_items('relation', $relation, 'field_character_weight');
    if(!isset($relation_weight[0]['value']) || $relation_weight[0]['value'] != $item['weight']){
      $langcode = $weight_tr ? entity_language('relation', $relation) : LANGUAGE_NONE;
      $relation->field_character_weight[$langcode][0] = array(
        'value' => $item['weight']
      );
      $update = TRUE;
    }
    // Get the parent item, and update the endpoints
    if($item['parent_id']){
      list($parent_entity_type, $parent_entity_id, $parent_relation_id) = explode(':', $item['parent_id']);
    }else{
      $parent_entity_type = 'character_editor_project';
      $parent_entity_id = $project_id;
      $parent_relation_id = 0;
    }
    $endpoints = field_get_items('relation', $relation, 'endpoints');
    foreach($endpoints as $endpoint_index => $endpoint){
      if($endpoint['entity_type'] == $entity_type && $endpoint['entity_id'] == $entity_id){
        continue;
      }
      if($endpoint['entity_type'] != $parent_entity_type || $endpoint['entity_id'] != $parent_entity_id){
        $endpoints[$endpoint_index]['entity_type'] = $parent_entity_type;
        $endpoints[$endpoint_index]['entity_id'] = $parent_entity_id;
        $langcode = $endpoints_tr ? entity_language('relation', $relation) : LANGUAGE_NONE;
        $relation->endpoints[$langcode] = $endpoints;
        $update = TRUE;
      }
    }
    if($update){
      entity_save('relation', $relation);
    }
  }
}

/*********************************************************************************************
 * 
 * MODULE FUNCTIONS
 * 
 ********************************************************************************************/
/**
 * Get the default view name
 * TODO - hook into views default
 */
function character_editor_get_default_view(){
  module_load_include('inc', 'character_editor', 'views/character_editor.views_default');
  return key(character_editor_views_default_views());
}

/*********************************************************************************************
 * 
 * CTOOLS PLUGIN INTEGRATION
 * 
 ********************************************************************************************/
/**
 * Implements hook_ctools_plugin_api().
 */
function character_editor_ctools_plugin_api($module, $api){
  if($module == 'slickgrid'){return array(
      'version' => 1
    );}
  if($module == "relation" && $api == "relation_type_default"){return array(
      "version" => "1"
    );}
  if($module == 'field_group' && $api == 'field_group'){return array(
      'version' => '1'
    );}
}

/**
 * Implementation of hook_ctools_plugin_directory() to let the system know
 * we implement task and task_handler plugins.
 */
function character_editor_ctools_plugin_directory($module, $plugin){
  if($module == 'slickgrid'){return 'plugins/' . $plugin . 's';}
}

/*********************************************************************************************
 * 
 * SLICKGRID PROCESSOR & CALLBACK FUNCTIONS
 * 
 ********************************************************************************************/
/**
 * Implement hook_slickgrid_entity_add
 *
 * Ensure we reset the columns when characters are modified
 */
function character_editor_slickgrid_add_entity($entity_type, $bundle, $arguments, $entity){
  // If we are adding a new character (and we know the project id), then
  // provide the rebuild-columns too.
  $result = array();
  if($entity_type == 'character_editor_character' && count($arguments)){
    $project_entity_id = reset($arguments);
    $view = views_get_view(character_editor_get_default_view());
    if($view){
      $view->execute_display('defaut', array(
        $project_entity_id
      ));
      $result['columns'] = slickgrid_encode_columns($view->columns);
    }
  }
  return $result;
}

/**
 * Slickgrid process function
 * Retrieve form / process a modal character form (text & DNA)
 * @param object $editor
 */
function character_editor_state_form_process($editor){
  // Include the ctools stuff
  ctools_include('modal');
  ctools_include('ajax');
  $form_state['values'] = $_POST;
  // Additional form_state settings required for ctools modal forms
  $editor->entity_info = entity_get_info($editor->entity_type);
  list(, $character_entity_id) = explode('_', $editor->field_id);
  list($entity_type, $entity_id) = explode(':', reset($form_state['values']['entity_ids']));
  $form_state['entity_type'] = $entity_type;
  $form_state['entity_id'] = $entity_id;
  $character_entity = entity_load_single('character_editor_character', $character_entity_id);
  $form_state['title'] = t("Editing %label (!type)", array(
    '%label' => $character_entity->label(),
    '!type' => $form_state['values']['character_type']
  ));
  $form_state['ajax'] = true;
  // Pass the editor object into the form_state
  $form_state['editor'] = $editor;
  $nfs = array_merge(array(), $form_state);
  $output = ctools_modal_form_wrapper($editor->plugin['form_id'], $nfs);
  if(!empty($nfs['executed'])){
    // Form has succesfully completed, submit the other entities too
    foreach($form_state['values']['entity_ids'] as $entity_desc){
      $nfs = array_merge(array(), $form_state);
      list($entity_type, $entity_id) = explode(':', $entity_desc);
      $nfs['entity_type'] = $entity_type;
      $nfs['entity_id'] = $entity_id;
      drupal_build_form($editor->plugin['form_id'], $nfs);
    }
    // We're going to exit the process, so get editor result manually
    $result = $form_state['editor']->get_result();
    slickgrid_callback_add_messages($result);
    // Build a ctools ajax output array
    $output = array(
      array(
        'command' => 'slickgrid',
        'response' => array(
          'result' => $result
        )
      )
    );
  }
  print ajax_render($output);
  exit();
}

/**
 * Slickgrid process function
 * Retrieve form / process an inline character form (numeric & controlled)
 * @param object $editor
 */
function character_editor_inline_cell_process($editor){
  $_POST['op'] = t('Save');
  $entity = current($editor->entities);
  // The language in use in the slickgrid is the language that would be chosen by
  // field_language(...). This is not strictly equivalent, though in our case
  // will work as expected.
  $field = field_info_field('field_characater_state_data');
  $available_languages = field_available_languages('relation', $field);
  $suggestions = _field_language_suggestion($available_languages, field_valid_language(NULL, FALSE), 'field_character_states');
  $language = reset($suggestions);
  $_POST['field_character_state_data'][$language] = array(
    array(
      'value' => $_POST['value']
    )
  );
  $form_state['programmed'] = true;
  // Additional form_state settings required for ctools modal forms
  $editor->entity_info = entity_get_info($editor->entity_type);
  $form_state['values'] = $_POST;
  $form_state['editor'] = $editor;
  // Form isn't being displayed - so no rendering or redirecting
  $form_state['re_render'] = true;
  $form_state['no_redirect'] = true;
  // Build & submit the form
  foreach($form_state['values']['entity_ids'] as $entity_id){
    $nfs = array_merge(array(), $form_state);
    list($entity_type, $entity_id) = explode(':', $entity_id);
    $nfs['entity_id'] = $entity_id;
    $nfs['entity_type'] = $entity_type;
    drupal_build_form($editor->plugin['form_id'], $nfs);
  }
}

/**
 * Slickgrid state form
 * Used for inline & modal states
 */
function character_editor_state_form($form, &$form_state){
  $form = array();
  $form_state['character_id'] = preg_replace('/^character_(\d+)_\d+$/', '$1', $_POST['field_id']);
  $form_state['field_id'] = $_POST['field_id'];
  $character_w = character_editor_wrapper('character_editor_character', $form_state['character_id']);
  $entity_w = entity_metadata_wrapper($form_state['entity_type'], entity_load_single($form_state['entity_type'], $form_state['entity_id']));
  $values = character_editor_get_character_values($character_w, $entity_w);
  if(!empty($values)){
    $form_state['relation'] = $values[0]['relation_w']->raw();
  }else{
    $relation = new stdClass();
    $relation->relation_type = 'character_state';
    $form_state['relation'] = $relation;
  }
  field_attach_form('relation', $form_state['relation'], $form, $form_state);
  foreach(element_children($form['field_character_state_data']) as $language){
    unset($form['field_character_state_data'][$language][0]['value']['#title']);
  }
  unset($form['endpoints']);
  // Ensure values passed in from the slickgrid are persistent across the form rebuild
  foreach(array(
    'field_name',
    'field_id',
    'view',
    'display_id',
    'plugin',
    'revision',
    'entity_type',
    'entity_ids',
    'id',
    'character_type',
    'field_character_state_flag',
    'field_character_state_pass'
  ) as $element_name){
    if(is_array($form_state['values'][$element_name])){ // entity ids will be passed as an array
      foreach($form_state['values'][$element_name] as $element_value){
        $form[$element_name][] = array(
          '#type' => 'hidden',
          '#value' => $element_value,
          '#parents' => array(
            $element_name,
            ''
          ) // Make these items into an array
        );
      }
    }else{
      $form[$element_name] = array(
        '#type' => 'hidden',
        '#value' => $form_state['values'][$element_name]
      );
    }
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100
  );
  $form['#submit'] = array(
    'character_editor_state_form_submit'
  );
  return $form;
}

/**
 * Slickgrid state form validate
 */
function character_editor_state_form_validate($form, &$form_state){
  $editor = &$form_state['editor'];
  $id = $form_state['values']['id'];
  $character = entity_load_single('character_editor_character', $form_state['character_id']);
  $character_w = entity_metadata_wrapper('character_editor_character', $character);
  foreach(element_children($form_state['values']['field_character_state_data']) as $language){
    switch($form_state['values']['character_type']){
      case 'controlled':
        // Is the state field not empty - then validate it
        if(is_string($form_state['values']['field_character_state_data'][$language][0]['value']) && $form_state['values']['field_character_state_data'][$language][0]['value'] != '?' && $form_state['values']['field_character_state_data'][$language][0]['value'] != '-'){
          if(!count($character->field_char_states[$language])){
            $err = t("There are no states for this character");
            break;
          }
          if(strpos($form_state['values']['field_character_state_data'][$language][0]['value'], ',') !== false){
            $states = explode(',', $form_state['values']['field_character_state_data'][$language][0]['value']);
          }else{
            $states = array(
              $form_state['values']['field_character_state_data'][$language][0]['value']
            );
          }
          $states = array_filter($states);
          if(!empty($states)){
            $available_states = array();
            foreach($character->field_char_states[$language] as $char_state){
              $available_states[] = $char_state['value'];
            }
            if(array_diff($states, $available_states)){
              $err = t('Illegal state selected');
            }
          }
        }
        break;
      case 'numeric':
        if(!empty($form_state['values']['field_character_state_data'][$language][0]['value'])){
          if($character_w->field_char_integer->value()){
            if(!preg_match('/^\s*(-?\s*[0-9]+)(?:\s*-\s*(-?\s*[0-9]+))?\s*$/', $form_state['values']['field_character_state_data'][$language][0]['value'])){
              $err = t("Character state needs to be a integer value or the form '9', or a range of the form '-4 - -1'");
            }
          }else{
            if(!preg_match('/^\s*(-?\s*[0-9.]+)(?:\s*-\s*(-?\s*[0-9.]+))?\s*$/', $form_state['values']['field_character_state_data'][$language][0]['value'])){
              $err = t("Character state needs to be a numeric value or the form '9.3', or a range of the form '-4.3 - -1'");
            }
          }
        }
        break;
      case 'dna':
        $dna = $form_state['values']['field_character_state_data'][$language][0]['value'];
        preg_match('/[' . DNA_CHARACTERS . ']*/i', $dna, $matches);
        if($matches[0] != $dna){
          $err = t("Only the DNA characters %dna_chars are allowed", array(
            '%dna_chars' => DNA_CHARACTERS
          ));
        }
        break;
    }
  }
  if(isset($err)){
    $editor->errors[$id] = $err;
    form_set_error('field_character_state_data', $err);
  }
}

/**
 * Slickgrid state form submit
 */
function character_editor_state_form_submit($form, &$form_state){
  $editor = &$form_state['editor'];
  // Note that we do not support per-character languages ; so at the character level language is
  // always 'und'
  $lang = LANGUAGE_NONE;
  if($form_state['values']['character_type'] == 'controlled'){
    // The UI only supports simple selection of states ; however the storage and backend
    // processing supports advanced expressions. Transform the given value into an expression.
    $values = array_filter(explode(',', $form_state['values']['field_character_state_data'][$lang][0]['value']));
    if(!empty($values)){
      $character = entity_load_single('character_editor_character', $form_state['character_id']);
      $character_w = entity_metadata_wrapper('character_editor_character', $character);
      if($character_w->field_char_and_or->value() == 'AND'){
        $conj = '\' & \'';
      }else{
        $conj = '\' | \'';
      }
      $form_state['values']['field_character_state_data'][$lang][0]['value'] = '[\'' . implode($conj, $values) . '\']';
    }else{
      $form_state['values']['field_character_state_data'][$lang][0]['value'] = '';
    }
  }
  try{
    // If we just created a dummy relation for the field form, add endpoints etc.,
    if(!isset($form_state['relation']->rid)){
      $entity_keys = array();
      $entity_keys[] = array(
        'entity_type' => $form_state['entity_type'],
        'entity_id' => $form_state['entity_id'],
        'r_index' => 0
      );
      $entity_keys[] = array(
        'entity_type' => 'character_editor_character',
        'entity_id' => $form_state['character_id'],
        'r_index' => 1
      );
      $relation = relation_create('character_state', $entity_keys);
    }else{
      $relation = $form_state['relation'];
      if(isset($relation->field_character_state_flag[$lang][0]['value']) && $relation->field_character_state_flag[$lang][0]['value'] == 'inherited'){
        // Values directly submited via a form should loose the 'inherited' flag to ensure they don't get overwritten.
        $relation->field_character_state_flag[$lang][0]['value'] = '';
      }
    }
    entity_form_submit_build_entity('relation', $relation, $form, $form_state);
    relation_save($relation);
    // Return input value, not values value as this may have been changed.
    $editor->updated[$form_state['values']['id']]['value'] = $form_state['input']['field_character_state_data'][$lang][0]['value'];
  }
  // ERROR: Entity save callback has thrown an exception
  catch(Exception $e){
    // Add entity to the editor's error array
    $editor->set_error($form_state['tid'], t('Error trying to update entity'), 'submit');
  }
}

/*********************************************************************************************
 * 
 * THEME & PREPROCESS FUNCTIONS
 * 
 ********************************************************************************************/
/**
 * hook_preprocess_entity
 * Add the character type
 * @param array $variables
 */
function character_editor_preprocess_entity(&$variables){
  switch($variables['entity_type']){
    case 'character_editor_character':
      $entity_info = $variables['elements']['#entity']->entityInfo();
      $variables['character_type'] = $entity_info['bundles'][$variables['elements']['#bundle']]['label'];
      break;
  }
}

/**
 * hook_preprocess_slickgrid
 * Add JS & we always want a tabs div
 * @param array $variables
 */
function character_editor_preprocess_views_view_slickgrid(&$variables){
  if($variables['view']->display_handler->get_option('style_plugin') == 'character_editor'){
    $path = drupal_get_path('module', 'slickgrid');
    drupal_add_css($path . '/css/slickgrid.controls.css');
    drupal_add_js($path . '/js/controls/slickgrid.tabs.js');
    // Ensure there is the tab container
    $variables['tabs'] = '<div id="slickgrid-tabs"></div>';
    $variables['class'] .= ' character-editor';
  }
}

/**
 * theme_field
 * The the char field - this is used in tooltip display
 * @param array $variables
 */
function theme_field__field_char_states(&$variables){
  $output = '';
  foreach($variables['items'] as $delta => $item){
    $classes = 'field-item';
    if(isset($item['#markup'])){
      $output .= $item['#markup'];
    }else if(isset($item['#theme']) && $item['#theme'] == 'image_formatter'){
      $output .= '<div class="character-editor-state-image">' . drupal_render($item) . '</div>';
    }else{
      $output .= '<div class="field-label"' . $variables['title_attributes'] . '>' . $delta . ':&nbsp;</div>';
      $output .= drupal_render($item);
    }
  }
  return $output;
}

function character_editor_preprocess_slickgrid_control__add(&$variables){
  // Make a copy and reset
  $add_links = $variables['add_links'];
  $variables['add_links'] = array();
  // Reorder the characters (reversed cos they're floated)
  foreach(array(
    'character_editor_character/computed',
    'character_editor_character/numeric',
    'character_editor_character/text',
    'character_editor_character/controlled',
    'character_editor_character/group'
  ) as $character){
    if(isset($add_links[$character])){
      $variables['add_links'][] = $add_links[$character];
    }
  }
}

/*********************************************************************************************
 * 
 * EXPORT
 * 
 ********************************************************************************************/
/**
 * Preprocess xml output template.
 */
function template_preprocess_views_data_export_sdd(&$vars){
  // Compute the root XML node, using the base table, and appending an 's' if needed.
  //  $root_node = $vars['view']->base_table;
  //  if (rtrim($root_node, 's') == $root_node) {
  //    $root_node .= 's';
  //  }
  //  $vars['root_node'] = _views_data_export_xml_tag_clean($root_node);
}

/*********************************************************************************************
 * 
 * IMPORT
 * 
 ********************************************************************************************/
/**
 * Implementation of hook_silver().
 * 
 * * type
 * * name
 * * access arguments
 * * file
 * * form_id
 */
function character_editor_silver(){
  // Here we tell ourselves about the Feeds module forms, and suck like.
  return array(
    array(
      'type' => 'Character data',
      'name' => 'SDD file import',
      'access callback' => 'user_access',
      'access arguments' => array(
        'create character editor'
      ),
      'form_id' => 'character_editor_sdd_import_form',
      'file' => 'character_editor.import.inc'
    )
  );
}