<?php

/**
 * Provides the following fields:
 * 
 * - Google maps point
 * - Google maps polygon
 * - Google maps polyline
 * - Google maps countries (click on a country to select)
 * - Google maps combination (combination of the above).
 */
/**
 * Does not implement the following (amongst others) hook_field_* hooks.
 * This is for my benefit only, and will be removed.
 * 
 * hook_field_load().
 * hook_field_delete().
 * hook_field_access().
 * hook_field_presave().
 * hook_field_settings_form().
 */
/**
 * Implementation of hook_field_info().
 */
function gm3_field_field_info(){
  return array(
    'gm3_point' => array(
      'label' => t('Geo: Point'),
      'description' => t('This field stores latitude/longitude pairs.'),
      'default_widget' => 'gm3_point_gm3',
      'default_formatter' => 'gm3_entity_map'
    ),
    'gm3_polygon' => array(
      'label' => t('Geo: Polygon'),
      'description' => t('This field stores geographical polygons/areas.'),
      'default_widget' => 'gm3_polygon_gm3',
      'default_formatter' => 'gm3_entity_map'
    ),
    'gm3_polyline' => array(
      'label' => t('Geo: Line'),
      'description' => t('This field stores geographical lines.'),
      'default_widget' => 'gm3_polyline_gm3',
      'default_formatter' => 'gm3_entity_map'
    ),
    'gm3_combination' => array(
      'label' => t('Geo: Super-combo'),
      'description' => t('Allows for the storage of any geographical data. Including points, lines, areas, lists of countries, and addresses'),
      'settings' => array(
        'field_types' => array(
          'gm3_point',
          'gm3_polygon',
          'gm3_polyline',
          'gm3_countries'
        )
      ),
      'default_widget' => 'gm3_combination_gm3',
      'default_formatter' => 'gm3_entity_map'
    )
  );
}

/**
 * Implementation of hook_field_insert().
 */
function gm3_field_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items){
  switch($field['type']){
    case 'gm3_point':
      $items = explode("|", $items[0]);
      $delta = 0;
      foreach($items as $item){
        $lat_long = preg_replace('/[)(]/', '', $item);
        $lat_long = explode(", ", $lat_long);
        $items[$delta] = array(
          'latitude' => $lat_long[0],
          'longitude' => $lat_long[1]
        );
        $delta++;
      }
      break;
  }
}

/**
 * Implementation of hook_field_update()
 */
function gm3_field_field_update($entity_type, $entity, $field, $instance, $langcode, &$items){
  gm3_field_field_insert($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implementation of hook_library().
 */
function gm3_field_library(){
  // Whether or not to use the minified versions of the code.
  $min = variable_get('gm3_use_minified', false) ? '.min' : '';
  return array(
    // Enable the clicking of countries.
    'field_point' => array(
      'title' => t('Google Maps Javascript API V3: Point field'),
      'website' => 'http://code.google.com/apis/maps/',
      'version' => '3',
      'js' => array(
        array(
          'data' => drupal_get_path('module', 'gm3_field') . "/js/gm3_field.field_point$min.js"
        )
      ),
      'dependencies' => array(
        array(
          'gm3',
          'gm3.point'
        )
      )
    )
  );
}

/**
 * Implementation of hook_field_widget_info().
 */
function gm3_field_field_widget_info(){
  return array(
    'gm3_point_gm3' => array(
      'label' => t('Geo: Point Google Map'),
      'description' => t('Latitude/Longitude pairs entered by clicking on a map.'),
      'field types' => array(
        'gm3_point'
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_DEFAULT
      )
    ),
    'gm3_point_text' => array(
      'label' => t('Geo: Point text'),
      'description' => t('Latitude/Longitude pairs entered into a text box'),
      'field types' => array(
        'gm3_point'
      )
    )
  ); // FIXME - Add other fields.
}

/**
 * Implements hook_field_validate().
 */
function gm3_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors){
  // FIXME - Add validation on the fields.
}

/**
 * Implements hook_field_is_empty().
 */
function gm3_field_field_is_empty($item, $field){
  switch($field['type']){
    case 'gm3_point':
      return !strlen($item);
  }
}

/**
 * Implements hook_field_formatter_info().
 * 
 * FIXME - We need to add settings to these formatter types to allow the display
 * of the map to be altered.
 */
function gm3_field_field_formatter_info(){
  return array(
    'gm3_entity_map' => array(
      'label' => t('Geo field single map.'),
      'description' => t('Displays all the data from a single field on a single map.'),
      'field types' => array(
        'gm3_point',
        'gm3_polygon',
        'gm3_polyline',
        'gm3_combination'
      )
    ),
    'gm3_field_map' => array(
      'label' => t('Geo field map per field.'),
      'description' => t('Displays all the data from fields also selected to use this display type on a single map.'),
      'field types' => array(
        'gm3_point',
        'gm3_polygon',
        'gm3_polyline',
        'gm3_combination'
      )
    ),
    'gm3_text' => array(
      'label' => t('Geo field text.'),
      'field types' => array(
        'gm3_point',
        'gm3_polygon',
        'gm3_polyline',
        'gm3_combination'
      )
    )
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function gm3_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display){
  $element = array();
  switch($display['type']){
    case 'gm3_entity_map':
      switch($field['type']){
        case 'gm3_point':
          // We need to keep a record of whether or not this field has been displayed
          $element[] = theme('gm3_map', array(
            'map' => array(
              'id' => 'unique_id', //FIXME
              'libraries' => array(
                'point' => array(
                  'points' => $items
                ),
                'field_point' => array(
                  'module' => 'gm3_field'
                )
              )
            )
          ));
          break;
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_form().
 */
function gm3_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element){
  $value = isset($items[$delta]['rgb']) ? $items[$delta]['rgb'] : '';
  $widget = $element;
  $widget['#delta'] = $delta;
  switch($instance['widget']['type']){
    case 'gm3_point_gm3':
      // We need to add a GM3 map to the page.
      // We'll also need some additional JS to record the points and save them
      // actually into a form element.
      $widget += array(
        '#prefix' => drupal_render(theme('gm3_map', array(
          'map' => array(
            'id' => $element['#field_name'],
            'libraries' => array(
              'point' => array(
                'points' => $items
              ),
              'field_point' => array(
                'module' => 'gm3_field'
              )
            ),
            'tools' => array(
              theme('gm3_point_button', array(
                'id' => $element['#field_name']
              ))
            )
          )
        ))),
        '#attached' => array(
          'css' => array(
            drupal_get_path('module', 'gm3_field') . '/css/gm3_field.css'
          )
        ),
        //'#id' => $element['#field_name'] . '-textarea',
        '#attributes' => array(
          'class' => array(
            $element['#field_name'] . '-hidden_field'
          )
        ),
        '#type' => 'hidden'
      );
      break;
  }
  $element['map'] = $widget;
  return $element;
}