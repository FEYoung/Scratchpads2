<?php

/**
 * Provides the following fields:
 * 
 * - Google maps point
 * - Google maps polygon
 * - Google maps polyline
 * - Google maps countries (click on a country to select)
 * - Google maps combination (combination of the above).
 */
/**
 * Implementation of hook_field_info().
 */
function gm3_field_field_info(){
  return array(
    'gm3_point' => array(
      'label' => t('Geo: Point'),
      'description' => t('This field stores latitude/longitude pairs.'),
      'default_widget' => 'gm3_point_gm3',
      'default_formatter' => 'gm3_entity_map'
    ),
    'gm3_polygon' => array(
      'label' => t('Geo: Polygon'),
      'description' => t('This field stores geographical polygons/areas.'),
      'default_widget' => 'gm3_polygon_gm3',
      'default_formatter' => 'gm3_entity_map'
    ),
    'gm3_polyline' => array(
      'label' => t('Geo: Line'),
      'description' => t('This field stores geographical lines.'),
      'default_widget' => 'gm3_polyline_gm3',
      'default_formatter' => 'gm3_entity_map'
    ),
    'gm3_combination' => array(
      'label' => t('Geo: Super-combo'),
      'description' => t('Allows for the storage of any geographical data. Including points, lines, areas, lists of countries, and addresses'),
      'settings' => array(
        'field_types' => array(
          'gm3_point',
          'gm3_polygon',
          'gm3_polyline',
          'gm3_countries'
        )
      ),
      'default_widget' => 'gm3_combination_gm3',
      'default_formatter' => 'gm3_entity_map'
    )
  );
}

/**
 * Implementation of hook_field_insert().
 */
function gm3_field_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items){
  switch($field['type']){
    case 'gm3_point':
      $items = explode("|", $items[0]);
      $delta = 0;
      $entity_info = entity_get_info($entity_type);
      foreach($field['storage']['details']['sql']['FIELD_LOAD_CURRENT'] as $table_name => $column_info){
        ;
      }
      foreach($items as $item){
        $lat_long = preg_replace('/[)(]/', '', $item);
        $lat_long = explode(", ", $lat_long);
        $items[$delta] = array(
          'entity_type' => $instance['entity_type'],
          'bundle' => $instance['bundle'],
          'deleted' => 0,
          'entity_id' => $entity->{$entity_info['entity keys']['id']},
          'revision_id' => $entity->{$entity_info['entity keys']['revision']},
          'language' => 'und',
          'delta' => $delta,
          $column_info['latitude'] => $lat_long[0],
          $column_info['longitude'] => $lat_long[1]
        );
        $delta++;
      }
      if(count($items)){
        $insert = db_insert($table_name)->fields(array_keys($items[0]));
        foreach($items as $record){
          $insert->values($record);
        }
        $insert->execute();
      }
      $items = array();
      break;
  }
}

/**
 * Implementation of hook_field_update()
 */
function gm3_field_field_update($entity_type, $entity, $field, $instance, $langcode, &$items){
  switch($field['type']){
    case 'gm3_point':
      $items = explode("|", $items[0]);
      $delta = 0;
      $entity_info = entity_get_info($entity_type);
      foreach($field['storage']['details']['sql']['FIELD_LOAD_CURRENT'] as $table_name => $column_info){
        ;
      }
      foreach($items as $item){
        $lat_long = preg_replace('/[)(]/', '', $item);
        $lat_long = explode(", ", $lat_long);
        $items[$delta] = array(
          'entity_type' => $instance['entity_type'],
          'bundle' => $instance['bundle'],
          'deleted' => 0,
          'entity_id' => $entity->{$entity_info['entity keys']['id']},
          'revision_id' => $entity->{$entity_info['entity keys']['revision']},
          'language' => 'und',
          'delta' => $delta,
          $column_info['latitude'] => $lat_long[0],
          $column_info['longitude'] => $lat_long[1]
        );
        $delta++;
      }
      if(count($items)){
        $insert = db_insert($table_name)->fields(array_keys($items[0]));
        foreach($items as $record){
          $insert->values($record);
        }
        $insert->execute();
      }
      $items = array();
      break;
  }
}

/**
 * Implementatino of hook_field_pre
 */
/**
 * Implementation of hook_library().
 */
function gm3_field_library(){
  // Whether or not to use the minified versions of the code.
  $min = variable_get('gm3_use_minified', false) ? '.min' : '';
  return array(
    // Enable the clicking of countries.
    'field_point' => array(
      'title' => t('Google Maps Javascript API V3: Point field'),
      'website' => 'http://code.google.com/apis/maps/',
      'version' => '3',
      'js' => array(
        array(
          'data' => drupal_get_path('module', 'gm3_field') . "/js/gm3_field.field_point$min.js"
        )
      ),
      'dependencies' => array(
        array(
          'gm3',
          'gm3.point'
        )
      )
    )
  );
}

/**
 * Implementation of hook_field_widget_info().
 */
function gm3_field_field_widget_info(){
  return array(
    'gm3_point_gm3' => array(
      'label' => t('Geo: Point Google Map'),
      'description' => t('Latitude/Longitude pairs entered by clicking on a map.'),
      'field types' => array(
        'gm3_point'
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_DEFAULT
      )
    ),
    'gm3_point_text' => array(
      'label' => t('Geo: Point text'),
      'description' => t('Latitude/Longitude pairs entered into a text box'),
      'field types' => array(
        'gm3_point'
      )
    )
  ); // FIXME - Add other fields.
}

/**
 * Implements hook_field_validate().
 *
 * This hook gives us a chance to validate content that's in our
 * field. We're really only interested in the $items parameter, since
 * it holds arrays representing content in the field we've defined.
 * We want to verify that the items only contain RGB hex values like
 * this: #RRGGBB. If the item validates, we do nothing. If it doesn't
 * validate, we add our own error notification to the $errors parameter.
 *
 * @see field_example_field_widget_error()
 */
function gm3_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors){
  // FIXME - We need a switch on the field type.
  foreach($items as $delta => $item){
    // FIXME Add validation to the lat/longs
  /*
    if (!empty($item['gm3_point'])) {
      if (! preg_match('@^#[0-9a-f]{6}$@', $item['rgb'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'field_example_invalid',
          'message' => t('Color must be in the HTML format #abcdef.'),
        );
      }
    }*/
  }
}

/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function gm3_field_field_is_empty($item, $field){
  // FIXME - We need a switch on the field type.
  return FALSE;
  // FIXME - We need to return the correct data here.
  return empty($item['rgb']);
}

/**
 * Implements hook_field_formatter_info().
 * 
 * FIXME - We need to add settings to these formatter types to allow the display
 * of the map to be altered.
 */
function gm3_field_field_formatter_info(){
  return array(
    'gm3_entity_map' => array(
      'label' => t('Geo field single map.'),
      'description' => t('Displays all the data from a single field on a single map.'),
      'field types' => array(
        'gm3_point',
        'gm3_polygon',
        'gm3_polyline',
        'gm3_combination'
      )
    ),
    'gm3_field_map' => array(
      'label' => t('Geo field map per field.'),
      'description' => t('Displays all the data from fields also selected to use this display type on a single map.'),
      'field types' => array(
        'gm3_point',
        'gm3_polygon',
        'gm3_polyline',
        'gm3_combination'
      )
    ),
    'gm3_text' => array(
      'label' => t('Geo field text.'),
      'field types' => array(
        'gm3_point',
        'gm3_polygon',
        'gm3_polyline',
        'gm3_combination'
      )
    )
  );
}

/**
 * Implements hook_field_formatter_view().
 * 
 * FIXME - These are far from finished.
 */
function gm3_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display){
  $element = array();
  switch($display['type']){
    // This formatter simply outputs the field as text and with a color.
    case 'gm3_text':
      foreach($items as $delta => $item){
        $element[$delta] = array(
          '#type' => 'html_tag',
          '#tag' => 'pre',
          '#value' => print_r($item, 1)
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_form().
 */
function gm3_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element){
  $value = isset($items[$delta]['rgb']) ? $items[$delta]['rgb'] : '';
  $widget = $element;
  $widget['#delta'] = $delta;
  switch($instance['widget']['type']){
    case 'gm3_point_gm3':
      // We need to add a GM3 map to the page.
      // We'll also need some additional JS to record the points and save them
      // actually into a form element.
      $widget += array(
        '#prefix' => drupal_render(theme('gm3_map', array(
          'map' => array(
            'id' => $element['#field_name'],
            'libraries' => array(
              'point' => array(
                'points' => $items // FIXME - Get the points that we've already set (Default values).
              ),
              'field_point' => array(
                'module' => 'gm3_field'
              )
            ),
            'tools' => array(
              theme('gm3_point_button', array(
                'id' => $element['#field_name']
              ))
            )
          )
        ))),
        '#id' => $element['#field_name'] . '-textarea',
        '#type' => 'textarea'
      );
      break;
  }
  $element['map'] = $widget;
  return $element;
}