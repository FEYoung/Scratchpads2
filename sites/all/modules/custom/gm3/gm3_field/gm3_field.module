<?php

/**
 * Provides the following fields:
 * 
 * - Google maps point
 * - Google maps polygon
 * - Google maps polyline
 * - Google maps countries (click on a country to select)
 * - Google maps combination (combination of the above).
 */
/**
 * Does not implement the following (amongst others) hook_field_* hooks.
 * This is for my benefit only, and will be removed.
 * 
 * hook_field_load().
 * hook_field_delete().
 * hook_field_access().
 * hook_field_presave().
 * hook_field_settings_form().
 */
/**
 * Implementation of hook_field_info().
 */
function gm3_field_field_info(){
  return array(
    'gm3_point' => array(
      'label' => t('Geo: Point'),
      'description' => t('This field stores latitude/longitude pairs.'),
      'default_widget' => 'gm3_point_gm3',
      'default_formatter' => 'gm3_entity_map'
    ),
    'gm3_polygon' => array(
      'label' => t('Geo: Polygon'),
      'description' => t('This field stores geographical polygons/areas.'),
      'default_widget' => 'gm3_polygon_gm3',
      'default_formatter' => 'gm3_entity_map'
    ),
    'gm3_polyline' => array(
      'label' => t('Geo: Line'),
      'description' => t('This field stores geographical lines.'),
      'default_widget' => 'gm3_polyline_gm3',
      'default_formatter' => 'gm3_entity_map'
    ),
    'gm3_combination' => array(
      'label' => t('Geo: Super-combo'),
      'description' => t('Allows for the storage of any geographical data. Including points, lines, areas, lists of countries, and addresses'),
      'settings' => array(
        'field_types' => array(
          'gm3_point',
          'gm3_polygon',
          'gm3_polyline',
          'gm3_countries'
        )
      ),
      'default_widget' => 'gm3_combination_gm3',
      'default_formatter' => 'gm3_entity_map'
    )
  );
}

/**
 * Implementation of hook_field_settings_form().
 */
function gm3_field_field_settings_form($field, $instance, $has_data){
  switch($field['type']){
    case 'gm3_combination':
      return array(
        'field_types' => array(
          '#type' => 'select',
          '#title' => t('Field types'),
          '#options' => array(
            'gm3_point' => 'Point',
            'gm3_polygon' => 'Polygon',
            'gm3_polyline' => 'Polyline'
          ),
          '#multiple' => TRUE,
          '#default_value' => $field['settings']['field_types'],
          '#required' => TRUE,
          '#description' => t('Select the types of Widget you would like to use')
        )
      );
  }
}

/**
 * Implementation of hook_field_insert().
 */
function gm3_field_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items){
  switch($field['type']){
    case 'gm3_point':
      $new_items = array();
      _gm3_field_get_array_from_points_string($items[0], $new_items);
      $items = $new_items;
      break;
    case 'gm3_polygon':
    case 'gm3_polyline':
      $new_items = array();
      _gm3_field_get_array_from_poly_string($items[0], $new_items, substr($field['type'], 4));
      $items = $new_items;
      break;
    case 'gm3_combination':
      $new_items = array();
      foreach($items[0]['children'] as $type => $value){
        switch($type){
          case 'gm3_point':
            _gm3_field_get_array_from_points_string($value, $new_items, 'point');
            break;
          case 'gm3_polygon':
          case 'gm3_polyline':
            _gm3_field_get_array_from_poly_string($value, $new_items, substr($type, 4), TRUE);
            break;
        }
      }
      $items = $new_items;
      dpm($items);
      break;
  }
}

/**
 * Helper function to get values from a polygon/polyline string
 */
function _gm3_field_get_array_from_poly_string($value, &$items, $poly_type, $type = FALSE){
  if(strlen(trim($value))){
    $polys = preg_split("/\n/", $value);
    foreach($polys as $poly){
      $item = array(
        $poly_type => $poly
      );
      if($type){
        $item['gm3_type'] = $poly_type;
      }
      $items[] = $item;
    }
  }
}

/**
 * Helper function to get values from a points string
 */
function _gm3_field_get_array_from_points_string($value, &$items, $type = FALSE){
  if(strlen(trim($value))){
    $lat_lngs = explode("|", $value);
    foreach($lat_lngs as $lat_lng){
      $lat_lng = preg_replace('/[)(]/', '', $lat_lng);
      $lat_lng = explode(", ", $lat_lng);
      $lat_lng = array(
        'latitude' => $lat_lng[0],
        'longitude' => $lat_lng[1]
      );
      if($type){
        $lat_lng['gm3_type'] = $type;
      }
      $items[] = $lat_lng;
    }
  }
}

/**
 * Implementation of hook_field_update()
 */
function gm3_field_field_update($entity_type, $entity, $field, $instance, $langcode, &$items){
  gm3_field_field_insert($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implementation of hook_library().
 */
function gm3_field_library(){
  // Whether or not to use the minified versions of the code.
  $min = variable_get('gm3_use_minified', false) ? '.min' : '';
  return array(
    // Enable the clicking of countries.
    'field_point' => array(
      'title' => t('Google Maps Javascript API V3: Point field'),
      'website' => 'http://code.google.com/apis/maps/',
      'version' => '3',
      'js' => array(
        array(
          'data' => drupal_get_path('module', 'gm3_field') . "/js/gm3_field.field_point$min.js"
        )
      ),
      'dependencies' => array(
        array(
          'gm3',
          'gm3.point'
        )
      )
    ),
    'field_polygon' => array(
      'title' => t('Google Maps Javascript API V3: Polygon field'),
      'website' => 'http://code.google.com/apis/maps/',
      'version' => '3',
      'js' => array(
        array(
          'data' => drupal_get_path('module', 'gm3_field') . "/js/gm3_field.field_polygon$min.js"
        )
      ),
      'dependencies' => array(
        array(
          'gm3',
          'gm3.polygon'
        )
      )
    ),
    'field_polyline' => array(
      'title' => t('Google Maps Javascript API V3: Polyline field'),
      'website' => 'http://code.google.com/apis/maps/',
      'version' => '3',
      'js' => array(
        array(
          'data' => drupal_get_path('module', 'gm3_field') . "/js/gm3_field.field_polyline$min.js"
        )
      ),
      'dependencies' => array(
        array(
          'gm3',
          'gm3.polyline'
        )
      )
    )
  );
}

/**
 * Implementation of hook_field_widget_info().
 */
function gm3_field_field_widget_info(){
  return array(
    'gm3_point_gm3' => array(
      'label' => t('Geo: Point Google Map'),
      'description' => t('Latitude/Longitude pairs entered by clicking on a map.'),
      'field types' => array(
        'gm3_point'
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_DEFAULT
      )
    ),
    'gm3_point_text' => array(
      'label' => t('Geo: Point text'),
      'description' => t('Latitude/Longitude pairs entered into a text box'),
      'field types' => array(
        'gm3_point'
      )
    ),
    'gm3_polygon_gm3' => array(
      'label' => t('Geo: Polygon Google Map'),
      'description' => t('Many Latitude/Longitude pairs which combine to form a shape, entered on a Google map.'),
      'field types' => array(
        'gm3_polygon'
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_DEFAULT
      )
    ),
    'gm3_polygon_text' => array(
      'label' => t('Geo: Polygon text'),
      'description' => t('Many Latitude/Longitude pairs which combine to form a shape, entered in a text box.'),
      'field types' => array(
        'gm3_polygon'
      )
    ),
    'gm3_polyline_gm3' => array(
      'label' => t('Geo: Polyline Google Map'),
      'description' => t('Many Latitude/Longitude pairs which combine to form a line, entered on a Google map.'),
      'field types' => array(
        'gm3_polyline'
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_DEFAULT
      )
    ),
    'gm3_polyline_text' => array(
      'label' => t('Geo: Polygon text'),
      'description' => t('Many Latitude/Longitude pairs which combine to form a shape, entered in a text box.'),
      'field types' => array(
        'gm3_polygon'
      )
    ),
    'gm3_combination_gm3' => array(
      'label' => t('Geo: Combination Google Map'),
      'description' => t('Whatever you would like, on a Google map.'),
      'field types' => array(
        'gm3_combination'
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_DEFAULT
      )
    ),
    'gm3_combination_text' => array(
      'label' => t('Geo: Combination text'),
      'description' => t('Whatever you would like, in a text box.'),
      'field types' => array(
        'gm3_combination'
      )
    )
  );
}

/**
 * Implements hook_field_validate().
 */
function gm3_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors){
  // FIXME - Add validation on the fields.
}

/**
 * Implements hook_field_is_empty().
 */
function gm3_field_field_is_empty($item, $field){
  switch($field['type']){
    case 'gm3_point':
    case 'gm3_polygon':
    case 'gm3_polyline':
      return !strlen(trim($item));
  }
}

/**
 * Implements hook_field_formatter_info().
 * 
 * FIXME - We need to add settings to these formatter types to allow the display
 * of the map to be altered.
 */
function gm3_field_field_formatter_info(){
  return array(
    'gm3_entity_map' => array(
      'label' => t('Geo field single map.'),
      'description' => t('Displays all the data from a single field on a single map.'),
      'field types' => array(
        'gm3_point',
        'gm3_polygon',
        'gm3_polyline',
        'gm3_combination'
      )
    ),
    'gm3_field_map' => array(
      'label' => t('Geo field map per field.'),
      'description' => t('Displays all the data from fields also selected to use this display type on a single map.'),
      'field types' => array(
        'gm3_point',
        'gm3_polygon',
        'gm3_polyline',
        'gm3_combination'
      )
    ),
    'gm3_text' => array(
      'label' => t('Geo field text.'),
      'field types' => array(
        'gm3_point',
        'gm3_polygon',
        'gm3_polyline',
        'gm3_combination'
      )
    )
  );
}

/**
 * Implements hook_field_formatter_view().
 * 
 * FIXME - Still need to do the field/entity formats properly.
 */
function gm3_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display){
  $element = array();
  switch($display['type']){
    case 'gm3_entity_map':
      // Here we need to set the maps ID, and perhaps instead alter the map if
      // it has already been set (rather than setting it again).
      static $entity_map_initialised = FALSE;
    case 'gm3_field_map':
      switch($field['type']){
        case 'gm3_point':
          if(count($items)){
            $element[] = theme('gm3_map', array(
              'map' => array(
                'id' => 'unique_id', //FIXME
                'libraries' => array(
                  'point' => array(
                    'points' => $items
                  )
                )
              )
            ));
          }
          break;
        case 'gm3_polyline':
        case 'gm3_polygon':
          module_load_include('functions.inc', 'gm3');
          if(count($items)){
            $polys = array();
            foreach($items as $key => $item){
              $polys = array_merge($polys, gm3_convert_polygon_string($item[substr($field['type'], 4)]));
            }
            $element[] = theme('gm3_map', array(
              'map' => array(
                'id' => 'unique_id', //FIXME
                'libraries' => array(
                  substr($field['type'], 4) => array(
                    substr($field['type'], 4) . 's' => $polys
                  )
                )
              )
            ));
          }
          break;
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_form().
 */
function gm3_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element){
  $value = isset($items[$delta]['rgb']) ? $items[$delta]['rgb'] : '';
  $widget = $element;
  $widget['#delta'] = $delta;
  switch($instance['widget']['type']){
    case 'gm3_point_gm3':
      // We need to add a GM3 map to the page.
      // We'll also need some additional JS to record the points and save them
      // actually into a form element.
      $widget += array(
        '#prefix' => drupal_render(theme('gm3_map', array(
          'map' => array(
            'id' => $element['#field_name'],
            'libraries' => array(
              'point' => array(
                'points' => $items
              ),
              'field_point' => array(
                'module' => 'gm3_field'
              )
            ),
            'tools' => array(
              theme('gm3_point_button', array(
                'id' => $element['#field_name']
              ))
            )
          )
        ))),
        '#attached' => array(
          'css' => array(
            drupal_get_path('module', 'gm3_field') . '/css/gm3_field.css'
          )
        ),
        '#attributes' => array(
          'class' => array(
            $element['#field_name'] . '-point'
          )
        ),
        '#type' => 'hidden'
      );
      break;
    case 'gm3_polyline_gm3':
    case 'gm3_polygon_gm3':
      $poly_type = explode("_", $instance['widget']['type']);
      $poly_type = $poly_type[1];
      $polys = array();
      if(count($items)){
        module_load_include('functions.inc', 'gm3');
        foreach($items as $key => $item){
          $polys = array_merge($polys, gm3_convert_polygon_string($item[$poly_type]));
        }
      }
      $widget += array(
        '#prefix' => drupal_render(theme('gm3_map', array(
          'map' => array(
            'id' => $element['#field_name'],
            'libraries' => array(
              $poly_type => array(
                $poly_type . 's' => $polys
              ),
              'field_' . $poly_type => array(
                'module' => 'gm3_field'
              )
            ),
            'tools' => array(
              theme('gm3_' . $poly_type . '_button', array(
                'id' => $element['#field_name']
              ))
            )
          )
        ))),
        '#attached' => array(
          'css' => array(
            drupal_get_path('module', 'gm3_field') . '/css/gm3_field.css'
          )
        ),
        '#attributes' => array(
          'class' => array(
            $element['#field_name'] . '-' . $poly_type
          )
        ),
        '#type' => 'hidden'
      );
      break;
    case 'gm3_combination_gm3':
      $map = array(
        'id' => $element['#field_name'],
        'libraries' => array(),
        'tools' => array()
      );
      $widget += array(
        '#attached' => array(
          'css' => array(
            drupal_get_path('module', 'gm3_field') . '/css/gm3_field.css'
          )
        )
      );
      foreach($field['settings']['field_types'] as $field_type => $value){
        switch($field_type){
          case 'gm3_point':
            $map['libraries']['point']['points'] = array();
            $map['libraries']['field_point']['module'] = 'gm3_field';
            $map['tools'][] = theme('gm3_point_button', array(
              'id' => $element['#field_name']
            ));
            $widget['children']['gm3_point'] = array(
              '#type' => 'hidden',
              '#attributes' => array(
                'class' => array(
                  $element['#field_name'] . '-point'
                )
              )
            );
            break;
          case 'gm3_polygon':
          case 'gm3_polyline':
            $poly_type = explode("_", $field_type);
            $poly_type = $poly_type[1];
            $map['libraries'][$poly_type][$poly_type . 's'] = array();
            $map['libraries']['field_' . $poly_type]['module'] = 'gm3_field';
            $map['tools'][] = theme('gm3_' . $poly_type . '_button', array(
              'id' => $element['#field_name']
            ));
            $widget['children']['gm3_' . $poly_type] = array(
              '#type' => 'hidden',
              '#attributes' => array(
                'class' => array(
                  $element['#field_name'] . '-' . $poly_type
                )
              )
            );
            break;
          default:
            // We have a field type not defined by this module, most likely it
            // is the gm3_region module.
            break;
        }
      }
      $widget += array(
        '#prefix' => drupal_render(theme('gm3_map', array(
          'map' => $map
        )))
      );
      break;
  }
  $element['map'] = $widget;
  return $element;
}