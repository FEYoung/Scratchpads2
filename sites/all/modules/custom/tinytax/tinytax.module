<?php

/**
 * @file
 * 
 * Description of the tinytax.module file.
 */
/**
 * Implementation of hook_theme().
 */
function tinytax_theme(){
  return array(
    'tinytax_block' => array(
      'variables' => array(
        'open_tids' => array(),
        'vid' => FALSE,
        'ancestors' => FALSE
      ),
      'file' => 'tinytax.theme.inc'
    ),
    'tinytax_branch' => array(
      'variables' => array(
        'term_theme_function' => 'tinytax_term',
        'open_tids' => array(),
        'ancestors' => FALSE,
        'tid' => 0,
        'vid' => FALSE
      ),
      'file' => 'tinytax.theme.inc'
    ),
    'tinytax_term' => array(
      'variables' => array(
        'term' => FALSE,
        'ancestors' => FALSE,
        'open_tids' => array()
      ),
      'file' => 'tinytax.theme.inc'
    ),
    'tinytax_term_count' => array(
      'variables' => array(
        'count' => FALSE
      ),
      'file' => 'tinytax.theme.inc'
    )
  );
}

/**
 * Callback to return a sub-branch.
 */
function tinytax_js($term){
  return theme('tinytax_branch', array(
    'tid' => $term->tid,
    'vid' => $term->vid,
    'ancestors' => variable_get('tinytax_ancestors_'.$term->vid, 1)
  ));
}

/**
 * Implementation of hook_menu().
 */
function tinytax_menu(){
  return array(
    'tinytax/get/%taxonomy_term' => array(
      'title' => 'Tinytax',
      'title callback' => FALSE, // JSON callback, title not required.
      'page callback' => 'tinytax_js',
      'page arguments' => array(
        2
      ),
      'delivery callback' => 'ajax_deliver',
      'access arguments' => array(
        'access content' // FIXME - Should this be a little more inteligent?
      ),
      'type' => MENU_CALLBACK
    )
  );
}

/**
 * hook_block_view().
 */
function tinytax_block_view($delta = ''){
  // The delta should be set as the vid, we simply need to return the themed
  // branch with tid 0.
  $block = array();
  $vocabulary = taxonomy_vocabulary_load($delta);
  $open_tids = array();
  if($term = menu_get_object('taxonomy_term', 2)){
    $parents_all = taxonomy_get_parents_all($term->tid);
    array_shift($parents_all);
    foreach($parents_all as $parent){
      $open_tids[] = $parent->tid;
    }
  }
  if($vocabulary){
    $block['subject'] = check_plain($vocabulary->name);
    $block['content'] = array(
      '#theme' => 'tinytax_block',
      '#vid' => $delta,
      '#open_tids' => $open_tids,
      '#ancestors' => variable_get('tinytax_ancestors_'.$vocabulary->vid, 1),
      '#attached' => array(
        'css' => array(
          drupal_get_path('module', 'tinytax') . '/css/tinytax.css'
        ),
        'js' => array(
          drupal_get_path('module', 'tinytax') . '/js/tinytax.js',
          array(
            'data' => array(
              'tinytax' => array(
                'callback' => url('tinytax/get'),
                'minus' => file_create_url(drupal_get_path('module', 'tinytax') . '/images/minus.gif'),
                'load' => file_create_url(drupal_get_path('module', 'tinytax') . '/images/load.gif'),
                'plus' => file_create_url(drupal_get_path('module', 'tinytax') . '/images/plus.gif')
              )
            ),
            'type' => 'setting'
          )
        ),
      )
    );
  }
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function tinytax_block_configure($delta = '') {
  return array('tinytax_ancestors' => array(
      '#type' => 'checkbox', 
      '#title' => t('Tick to show the total number of ancestors of each term.'), 
      '#default_value' => variable_get('tinytax_ancestors_'.$delta, 1)
    ));
}

/**
 * Implements hook_block_save().
 */
function tinytax_block_save($delta = '', $edit = array()){
  variable_set('tinytax_ancestors_'.$delta, $edit['tinytax_ancestors']);
}

/**
 * hook_block_info().
 */
function tinytax_block_info(){
  $vocabularies = taxonomy_vocabulary_load_multiple(FALSE);
  $blocks = array();
  foreach($vocabularies as $vocabulary){
    $blocks[$vocabulary->vid] = array(
      'info' => t('Tinytax block for "@vocabulary_name"', array(
        '@vocabulary_name' => $vocabulary->name
      )),
      'cache' => DRUPAL_CACHE_PER_PAGE | DRUPAL_CACHE_PER_ROLE
    );
  }
  return $blocks;
}

/**
 * hook_taxonomy_vocabulary_delete($vocabulary)
 */
function tinytax_taxonomy_vocabulary_delete($vocabulary){
  db_delete('block')->condition('module', 'tinytax')->condition('delta', $vocabulary->vid)->execute();
  variable_del('tinytax_ancestors_'.$vocabulary->vid);
}
